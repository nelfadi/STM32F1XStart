   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 2
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f10x.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SystemInit,"ax",%progbits
  19              		.align	1
  20              		.global	SystemInit
  21              		.thumb
  22              		.thumb_func
  24              	SystemInit:
  25              		.fnstart
  26              	.LFB29:
  27              		.file 1 "StdPeriphLib/src/system_stm32f10x.c"
   1:StdPeriphLib/src/system_stm32f10x.c **** /**
   2:StdPeriphLib/src/system_stm32f10x.c ****   ******************************************************************************
   3:StdPeriphLib/src/system_stm32f10x.c ****   * @file    system_stm32f10x.c
   4:StdPeriphLib/src/system_stm32f10x.c ****   * @author  MCD Application Team
   5:StdPeriphLib/src/system_stm32f10x.c ****   * @version V3.5.0
   6:StdPeriphLib/src/system_stm32f10x.c ****   * @date    08-April-2011
   7:StdPeriphLib/src/system_stm32f10x.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:StdPeriphLib/src/system_stm32f10x.c ****   * 
   9:StdPeriphLib/src/system_stm32f10x.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:StdPeriphLib/src/system_stm32f10x.c ****   *     user application:
  11:StdPeriphLib/src/system_stm32f10x.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:StdPeriphLib/src/system_stm32f10x.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:StdPeriphLib/src/system_stm32f10x.c ****   *                      This function is called at startup just after reset and 
  14:StdPeriphLib/src/system_stm32f10x.c ****   *                      before branch to main program. This call is made inside
  15:StdPeriphLib/src/system_stm32f10x.c ****   *                      the "startup_stm32f10x_xx.s" file.
  16:StdPeriphLib/src/system_stm32f10x.c ****   *
  17:StdPeriphLib/src/system_stm32f10x.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:StdPeriphLib/src/system_stm32f10x.c ****   *                                  by the user application to setup the SysTick 
  19:StdPeriphLib/src/system_stm32f10x.c ****   *                                  timer or configure other parameters.
  20:StdPeriphLib/src/system_stm32f10x.c ****   *                                     
  21:StdPeriphLib/src/system_stm32f10x.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:StdPeriphLib/src/system_stm32f10x.c ****   *                                 be called whenever the core clock is changed
  23:StdPeriphLib/src/system_stm32f10x.c ****   *                                 during program execution.
  24:StdPeriphLib/src/system_stm32f10x.c ****   *
  25:StdPeriphLib/src/system_stm32f10x.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:StdPeriphLib/src/system_stm32f10x.c ****   *    Then SystemInit() function is called, in "startup_stm32f10x_xx.s" file, to
  27:StdPeriphLib/src/system_stm32f10x.c ****   *    configure the system clock before to branch to main program.
  28:StdPeriphLib/src/system_stm32f10x.c ****   *
  29:StdPeriphLib/src/system_stm32f10x.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  30:StdPeriphLib/src/system_stm32f10x.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  31:StdPeriphLib/src/system_stm32f10x.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  32:StdPeriphLib/src/system_stm32f10x.c ****   *
  33:StdPeriphLib/src/system_stm32f10x.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depedning on
  34:StdPeriphLib/src/system_stm32f10x.c ****   *    the product used), refer to "HSE_VALUE" define in "stm32f10x.h" file. 
  35:StdPeriphLib/src/system_stm32f10x.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  36:StdPeriphLib/src/system_stm32f10x.c ****   *    are using different crystal you have to adapt the HSE value to your own
  37:StdPeriphLib/src/system_stm32f10x.c ****   *    configuration.
  38:StdPeriphLib/src/system_stm32f10x.c ****   *        
  39:StdPeriphLib/src/system_stm32f10x.c ****   ******************************************************************************
  40:StdPeriphLib/src/system_stm32f10x.c ****   * @attention
  41:StdPeriphLib/src/system_stm32f10x.c ****   *
  42:StdPeriphLib/src/system_stm32f10x.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  43:StdPeriphLib/src/system_stm32f10x.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  44:StdPeriphLib/src/system_stm32f10x.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  45:StdPeriphLib/src/system_stm32f10x.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  46:StdPeriphLib/src/system_stm32f10x.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  47:StdPeriphLib/src/system_stm32f10x.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  48:StdPeriphLib/src/system_stm32f10x.c ****   *
  49:StdPeriphLib/src/system_stm32f10x.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  50:StdPeriphLib/src/system_stm32f10x.c ****   ******************************************************************************
  51:StdPeriphLib/src/system_stm32f10x.c ****   */
  52:StdPeriphLib/src/system_stm32f10x.c **** 
  53:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup CMSIS
  54:StdPeriphLib/src/system_stm32f10x.c ****   * @{
  55:StdPeriphLib/src/system_stm32f10x.c ****   */
  56:StdPeriphLib/src/system_stm32f10x.c **** 
  57:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup stm32f10x_system
  58:StdPeriphLib/src/system_stm32f10x.c ****   * @{
  59:StdPeriphLib/src/system_stm32f10x.c ****   */  
  60:StdPeriphLib/src/system_stm32f10x.c ****   
  61:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Includes
  62:StdPeriphLib/src/system_stm32f10x.c ****   * @{
  63:StdPeriphLib/src/system_stm32f10x.c ****   */
  64:StdPeriphLib/src/system_stm32f10x.c **** 
  65:StdPeriphLib/src/system_stm32f10x.c **** #include "stm32f10x.h"
  66:StdPeriphLib/src/system_stm32f10x.c **** 
  67:StdPeriphLib/src/system_stm32f10x.c **** /**
  68:StdPeriphLib/src/system_stm32f10x.c ****   * @}
  69:StdPeriphLib/src/system_stm32f10x.c ****   */
  70:StdPeriphLib/src/system_stm32f10x.c **** 
  71:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  72:StdPeriphLib/src/system_stm32f10x.c ****   * @{
  73:StdPeriphLib/src/system_stm32f10x.c ****   */
  74:StdPeriphLib/src/system_stm32f10x.c **** 
  75:StdPeriphLib/src/system_stm32f10x.c **** /**
  76:StdPeriphLib/src/system_stm32f10x.c ****   * @}
  77:StdPeriphLib/src/system_stm32f10x.c ****   */
  78:StdPeriphLib/src/system_stm32f10x.c **** 
  79:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Defines
  80:StdPeriphLib/src/system_stm32f10x.c ****   * @{
  81:StdPeriphLib/src/system_stm32f10x.c ****   */
  82:StdPeriphLib/src/system_stm32f10x.c **** 
  83:StdPeriphLib/src/system_stm32f10x.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  84:StdPeriphLib/src/system_stm32f10x.c ****    frequency (after reset the HSI is used as SYSCLK source)
  85:StdPeriphLib/src/system_stm32f10x.c ****    
  86:StdPeriphLib/src/system_stm32f10x.c ****    IMPORTANT NOTE:
  87:StdPeriphLib/src/system_stm32f10x.c ****    ============== 
  88:StdPeriphLib/src/system_stm32f10x.c ****    1. After each device reset the HSI is used as System clock source.
  89:StdPeriphLib/src/system_stm32f10x.c **** 
  90:StdPeriphLib/src/system_stm32f10x.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  91:StdPeriphLib/src/system_stm32f10x.c ****       maximum frequency.
  92:StdPeriphLib/src/system_stm32f10x.c ****       
  93:StdPeriphLib/src/system_stm32f10x.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  94:StdPeriphLib/src/system_stm32f10x.c ****     source.
  95:StdPeriphLib/src/system_stm32f10x.c **** 
  96:StdPeriphLib/src/system_stm32f10x.c ****    4. The System clock configuration functions provided within this file assume that:
  97:StdPeriphLib/src/system_stm32f10x.c ****         - For Low, Medium and High density Value line devices an external 8MHz 
  98:StdPeriphLib/src/system_stm32f10x.c ****           crystal is used to drive the System clock.
  99:StdPeriphLib/src/system_stm32f10x.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
 100:StdPeriphLib/src/system_stm32f10x.c ****           used to drive the System clock.
 101:StdPeriphLib/src/system_stm32f10x.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
 102:StdPeriphLib/src/system_stm32f10x.c ****           the System clock.
 103:StdPeriphLib/src/system_stm32f10x.c ****      If you are using different crystal you have to adapt those functions accordingly.
 104:StdPeriphLib/src/system_stm32f10x.c ****     */
 105:StdPeriphLib/src/system_stm32f10x.c ****     
 106:StdPeriphLib/src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 107:StdPeriphLib/src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 108:StdPeriphLib/src/system_stm32f10x.c ****  #define SYSCLK_FREQ_24MHz  24000000
 109:StdPeriphLib/src/system_stm32f10x.c **** #else
 110:StdPeriphLib/src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 111:StdPeriphLib/src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
 112:StdPeriphLib/src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_36MHz  36000000 */
 113:StdPeriphLib/src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
 114:StdPeriphLib/src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
 115:StdPeriphLib/src/system_stm32f10x.c **** #define SYSCLK_FREQ_72MHz  72000000
 116:StdPeriphLib/src/system_stm32f10x.c **** #endif
 117:StdPeriphLib/src/system_stm32f10x.c **** 
 118:StdPeriphLib/src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 119:StdPeriphLib/src/system_stm32f10x.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) or on 
 120:StdPeriphLib/src/system_stm32f10x.c ****      STM32100E-EVAL board (STM32 High-density value line devices) as data memory */ 
 121:StdPeriphLib/src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 122:StdPeriphLib/src/system_stm32f10x.c **** /* #define DATA_IN_ExtSRAM */
 123:StdPeriphLib/src/system_stm32f10x.c **** #endif
 124:StdPeriphLib/src/system_stm32f10x.c **** 
 125:StdPeriphLib/src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 126:StdPeriphLib/src/system_stm32f10x.c ****      Internal SRAM. */ 
 127:StdPeriphLib/src/system_stm32f10x.c **** /* #define VECT_TAB_SRAM */
 128:StdPeriphLib/src/system_stm32f10x.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
 129:StdPeriphLib/src/system_stm32f10x.c ****                                   This value must be a multiple of 0x200. */
 130:StdPeriphLib/src/system_stm32f10x.c **** 
 131:StdPeriphLib/src/system_stm32f10x.c **** 
 132:StdPeriphLib/src/system_stm32f10x.c **** /**
 133:StdPeriphLib/src/system_stm32f10x.c ****   * @}
 134:StdPeriphLib/src/system_stm32f10x.c ****   */
 135:StdPeriphLib/src/system_stm32f10x.c **** 
 136:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Macros
 137:StdPeriphLib/src/system_stm32f10x.c ****   * @{
 138:StdPeriphLib/src/system_stm32f10x.c ****   */
 139:StdPeriphLib/src/system_stm32f10x.c **** 
 140:StdPeriphLib/src/system_stm32f10x.c **** /**
 141:StdPeriphLib/src/system_stm32f10x.c ****   * @}
 142:StdPeriphLib/src/system_stm32f10x.c ****   */
 143:StdPeriphLib/src/system_stm32f10x.c **** 
 144:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Variables
 145:StdPeriphLib/src/system_stm32f10x.c ****   * @{
 146:StdPeriphLib/src/system_stm32f10x.c ****   */
 147:StdPeriphLib/src/system_stm32f10x.c **** 
 148:StdPeriphLib/src/system_stm32f10x.c **** /*******************************************************************************
 149:StdPeriphLib/src/system_stm32f10x.c **** *  Clock Definitions
 150:StdPeriphLib/src/system_stm32f10x.c **** *******************************************************************************/
 151:StdPeriphLib/src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 152:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 153:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 154:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 155:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 156:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 157:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 158:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 159:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 160:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 161:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 162:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 163:StdPeriphLib/src/system_stm32f10x.c **** #else /*!< HSI Selected as System Clock source */
 164:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
 165:StdPeriphLib/src/system_stm32f10x.c **** #endif
 166:StdPeriphLib/src/system_stm32f10x.c **** 
 167:StdPeriphLib/src/system_stm32f10x.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 168:StdPeriphLib/src/system_stm32f10x.c **** /**
 169:StdPeriphLib/src/system_stm32f10x.c ****   * @}
 170:StdPeriphLib/src/system_stm32f10x.c ****   */
 171:StdPeriphLib/src/system_stm32f10x.c **** 
 172:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 173:StdPeriphLib/src/system_stm32f10x.c ****   * @{
 174:StdPeriphLib/src/system_stm32f10x.c ****   */
 175:StdPeriphLib/src/system_stm32f10x.c **** 
 176:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClock(void);
 177:StdPeriphLib/src/system_stm32f10x.c **** 
 178:StdPeriphLib/src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 179:StdPeriphLib/src/system_stm32f10x.c ****   static void SetSysClockToHSE(void);
 180:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 181:StdPeriphLib/src/system_stm32f10x.c ****   static void SetSysClockTo24(void);
 182:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 183:StdPeriphLib/src/system_stm32f10x.c ****   static void SetSysClockTo36(void);
 184:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 185:StdPeriphLib/src/system_stm32f10x.c ****   static void SetSysClockTo48(void);
 186:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 187:StdPeriphLib/src/system_stm32f10x.c ****   static void SetSysClockTo56(void);  
 188:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 189:StdPeriphLib/src/system_stm32f10x.c ****   static void SetSysClockTo72(void);
 190:StdPeriphLib/src/system_stm32f10x.c **** #endif
 191:StdPeriphLib/src/system_stm32f10x.c **** 
 192:StdPeriphLib/src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 193:StdPeriphLib/src/system_stm32f10x.c ****   static void SystemInit_ExtMemCtl(void); 
 194:StdPeriphLib/src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 195:StdPeriphLib/src/system_stm32f10x.c **** 
 196:StdPeriphLib/src/system_stm32f10x.c **** /**
 197:StdPeriphLib/src/system_stm32f10x.c ****   * @}
 198:StdPeriphLib/src/system_stm32f10x.c ****   */
 199:StdPeriphLib/src/system_stm32f10x.c **** 
 200:StdPeriphLib/src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Functions
 201:StdPeriphLib/src/system_stm32f10x.c ****   * @{
 202:StdPeriphLib/src/system_stm32f10x.c ****   */
 203:StdPeriphLib/src/system_stm32f10x.c **** 
 204:StdPeriphLib/src/system_stm32f10x.c **** /**
 205:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Setup the microcontroller system
 206:StdPeriphLib/src/system_stm32f10x.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 207:StdPeriphLib/src/system_stm32f10x.c ****   *         SystemCoreClock variable.
 208:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 209:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 210:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 211:StdPeriphLib/src/system_stm32f10x.c ****   */
 212:StdPeriphLib/src/system_stm32f10x.c **** void SystemInit (void)
 213:StdPeriphLib/src/system_stm32f10x.c **** {
  28              		.loc 1 213 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 214:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 215:StdPeriphLib/src/system_stm32f10x.c ****   /* Set HSION bit */
 216:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  33              		.loc 1 216 0
  34 0000 464B     		ldr	r3, .L22
 213:StdPeriphLib/src/system_stm32f10x.c **** {
  35              		.loc 1 213 0
  36              		.pad #8
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.loc 1 216 0
  41 0004 1A68     		ldr	r2, [r3, #0]
  42 0006 42F00102 		orr	r2, r2, #1
  43 000a 1A60     		str	r2, [r3, #0]
 217:StdPeriphLib/src/system_stm32f10x.c **** 
 218:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 219:StdPeriphLib/src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 220:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 221:StdPeriphLib/src/system_stm32f10x.c **** #else
 222:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
  44              		.loc 1 222 0
  45 000c 5968     		ldr	r1, [r3, #4]
  46 000e 444A     		ldr	r2, .L22+4
  47 0010 0A40     		ands	r2, r2, r1
  48 0012 5A60     		str	r2, [r3, #4]
 223:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */   
 224:StdPeriphLib/src/system_stm32f10x.c ****   
 225:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset HSEON, CSSON and PLLON bits */
 226:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  49              		.loc 1 226 0
  50 0014 1A68     		ldr	r2, [r3, #0]
  51 0016 22F08472 		bic	r2, r2, #17301504
  52 001a 22F48032 		bic	r2, r2, #65536
  53 001e 1A60     		str	r2, [r3, #0]
 227:StdPeriphLib/src/system_stm32f10x.c **** 
 228:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset HSEBYP bit */
 229:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  54              		.loc 1 229 0
  55 0020 1A68     		ldr	r2, [r3, #0]
  56 0022 22F48022 		bic	r2, r2, #262144
  57 0026 1A60     		str	r2, [r3, #0]
 230:StdPeriphLib/src/system_stm32f10x.c **** 
 231:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 232:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  58              		.loc 1 232 0
  59 0028 5A68     		ldr	r2, [r3, #4]
  60 002a 22F4FE02 		bic	r2, r2, #8323072
  61 002e 5A60     		str	r2, [r3, #4]
 233:StdPeriphLib/src/system_stm32f10x.c **** 
 234:StdPeriphLib/src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 235:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset PLL2ON and PLL3ON bits */
 236:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
  62              		.loc 1 236 0
  63 0030 1A68     		ldr	r2, [r3, #0]
  64 0032 22F0A052 		bic	r2, r2, #335544320
  65 0036 1A60     		str	r2, [r3, #0]
 237:StdPeriphLib/src/system_stm32f10x.c **** 
 238:StdPeriphLib/src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 239:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CIR = 0x00FF0000;
  66              		.loc 1 239 0
  67 0038 4FF47F02 		mov	r2, #16711680
  68 003c 9A60     		str	r2, [r3, #8]
 240:StdPeriphLib/src/system_stm32f10x.c **** 
 241:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 242:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;
  69              		.loc 1 242 0
  70 003e 0022     		movs	r2, #0
  71 0040 DA62     		str	r2, [r3, #44]
  72              	.LBB8:
  73              	.LBB9:
  74              	.LBB10:
 243:StdPeriphLib/src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 244:StdPeriphLib/src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 245:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 246:StdPeriphLib/src/system_stm32f10x.c **** 
 247:StdPeriphLib/src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 248:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;      
 249:StdPeriphLib/src/system_stm32f10x.c **** #else
 250:StdPeriphLib/src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 251:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 252:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 253:StdPeriphLib/src/system_stm32f10x.c ****     
 254:StdPeriphLib/src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 255:StdPeriphLib/src/system_stm32f10x.c ****   #ifdef DATA_IN_ExtSRAM
 256:StdPeriphLib/src/system_stm32f10x.c ****     SystemInit_ExtMemCtl(); 
 257:StdPeriphLib/src/system_stm32f10x.c ****   #endif /* DATA_IN_ExtSRAM */
 258:StdPeriphLib/src/system_stm32f10x.c **** #endif 
 259:StdPeriphLib/src/system_stm32f10x.c **** 
 260:StdPeriphLib/src/system_stm32f10x.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 261:StdPeriphLib/src/system_stm32f10x.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 262:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClock();
 263:StdPeriphLib/src/system_stm32f10x.c **** 
 264:StdPeriphLib/src/system_stm32f10x.c **** #ifdef VECT_TAB_SRAM
 265:StdPeriphLib/src/system_stm32f10x.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 266:StdPeriphLib/src/system_stm32f10x.c **** #else
 267:StdPeriphLib/src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 268:StdPeriphLib/src/system_stm32f10x.c **** #endif 
 269:StdPeriphLib/src/system_stm32f10x.c **** }
 270:StdPeriphLib/src/system_stm32f10x.c **** 
 271:StdPeriphLib/src/system_stm32f10x.c **** /**
 272:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 273:StdPeriphLib/src/system_stm32f10x.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 274:StdPeriphLib/src/system_stm32f10x.c ****   *         be used by the user application to setup the SysTick timer or configure
 275:StdPeriphLib/src/system_stm32f10x.c ****   *         other parameters.
 276:StdPeriphLib/src/system_stm32f10x.c ****   *           
 277:StdPeriphLib/src/system_stm32f10x.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 278:StdPeriphLib/src/system_stm32f10x.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 279:StdPeriphLib/src/system_stm32f10x.c ****   *         based on this variable will be incorrect.         
 280:StdPeriphLib/src/system_stm32f10x.c ****   *     
 281:StdPeriphLib/src/system_stm32f10x.c ****   * @note   - The system frequency computed by this function is not the real 
 282:StdPeriphLib/src/system_stm32f10x.c ****   *           frequency in the chip. It is calculated based on the predefined 
 283:StdPeriphLib/src/system_stm32f10x.c ****   *           constant and the selected clock source:
 284:StdPeriphLib/src/system_stm32f10x.c ****   *             
 285:StdPeriphLib/src/system_stm32f10x.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 286:StdPeriphLib/src/system_stm32f10x.c ****   *                                              
 287:StdPeriphLib/src/system_stm32f10x.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 288:StdPeriphLib/src/system_stm32f10x.c ****   *                          
 289:StdPeriphLib/src/system_stm32f10x.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 290:StdPeriphLib/src/system_stm32f10x.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 291:StdPeriphLib/src/system_stm32f10x.c ****   *         
 292:StdPeriphLib/src/system_stm32f10x.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 293:StdPeriphLib/src/system_stm32f10x.c ****   *             8 MHz) but the real value may vary depending on the variations
 294:StdPeriphLib/src/system_stm32f10x.c ****   *             in voltage and temperature.   
 295:StdPeriphLib/src/system_stm32f10x.c ****   *    
 296:StdPeriphLib/src/system_stm32f10x.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 297:StdPeriphLib/src/system_stm32f10x.c ****   *              8 MHz or 25 MHz, depedning on the product used), user has to ensure
 298:StdPeriphLib/src/system_stm32f10x.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 299:StdPeriphLib/src/system_stm32f10x.c ****   *              Otherwise, this function may have wrong result.
 300:StdPeriphLib/src/system_stm32f10x.c ****   *                
 301:StdPeriphLib/src/system_stm32f10x.c ****   *         - The result of this function could be not correct when using fractional
 302:StdPeriphLib/src/system_stm32f10x.c ****   *           value for HSE crystal.
 303:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 304:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 305:StdPeriphLib/src/system_stm32f10x.c ****   */
 306:StdPeriphLib/src/system_stm32f10x.c **** void SystemCoreClockUpdate (void)
 307:StdPeriphLib/src/system_stm32f10x.c **** {
 308:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 309:StdPeriphLib/src/system_stm32f10x.c **** 
 310:StdPeriphLib/src/system_stm32f10x.c **** #ifdef  STM32F10X_CL
 311:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 312:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 313:StdPeriphLib/src/system_stm32f10x.c **** 
 314:StdPeriphLib/src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 315:StdPeriphLib/src/system_stm32f10x.c ****   uint32_t prediv1factor = 0;
 316:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
 317:StdPeriphLib/src/system_stm32f10x.c ****     
 318:StdPeriphLib/src/system_stm32f10x.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 319:StdPeriphLib/src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 320:StdPeriphLib/src/system_stm32f10x.c ****   
 321:StdPeriphLib/src/system_stm32f10x.c ****   switch (tmp)
 322:StdPeriphLib/src/system_stm32f10x.c ****   {
 323:StdPeriphLib/src/system_stm32f10x.c ****     case 0x00:  /* HSI used as system clock */
 324:StdPeriphLib/src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 325:StdPeriphLib/src/system_stm32f10x.c ****       break;
 326:StdPeriphLib/src/system_stm32f10x.c ****     case 0x04:  /* HSE used as system clock */
 327:StdPeriphLib/src/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 328:StdPeriphLib/src/system_stm32f10x.c ****       break;
 329:StdPeriphLib/src/system_stm32f10x.c ****     case 0x08:  /* PLL used as system clock */
 330:StdPeriphLib/src/system_stm32f10x.c **** 
 331:StdPeriphLib/src/system_stm32f10x.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 332:StdPeriphLib/src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 333:StdPeriphLib/src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 334:StdPeriphLib/src/system_stm32f10x.c ****       
 335:StdPeriphLib/src/system_stm32f10x.c **** #ifndef STM32F10X_CL      
 336:StdPeriphLib/src/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 337:StdPeriphLib/src/system_stm32f10x.c ****       
 338:StdPeriphLib/src/system_stm32f10x.c ****       if (pllsource == 0x00)
 339:StdPeriphLib/src/system_stm32f10x.c ****       {
 340:StdPeriphLib/src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 341:StdPeriphLib/src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 342:StdPeriphLib/src/system_stm32f10x.c ****       }
 343:StdPeriphLib/src/system_stm32f10x.c ****       else
 344:StdPeriphLib/src/system_stm32f10x.c ****       {
 345:StdPeriphLib/src/system_stm32f10x.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 346:StdPeriphLib/src/system_stm32f10x.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 347:StdPeriphLib/src/system_stm32f10x.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 348:StdPeriphLib/src/system_stm32f10x.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 349:StdPeriphLib/src/system_stm32f10x.c ****  #else
 350:StdPeriphLib/src/system_stm32f10x.c ****         /* HSE selected as PLL clock entry */
 351:StdPeriphLib/src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 352:StdPeriphLib/src/system_stm32f10x.c ****         {/* HSE oscillator clock divided by 2 */
 353:StdPeriphLib/src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 354:StdPeriphLib/src/system_stm32f10x.c ****         }
 355:StdPeriphLib/src/system_stm32f10x.c ****         else
 356:StdPeriphLib/src/system_stm32f10x.c ****         {
 357:StdPeriphLib/src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 358:StdPeriphLib/src/system_stm32f10x.c ****         }
 359:StdPeriphLib/src/system_stm32f10x.c ****  #endif
 360:StdPeriphLib/src/system_stm32f10x.c ****       }
 361:StdPeriphLib/src/system_stm32f10x.c **** #else
 362:StdPeriphLib/src/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 363:StdPeriphLib/src/system_stm32f10x.c ****       
 364:StdPeriphLib/src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 365:StdPeriphLib/src/system_stm32f10x.c ****       {
 366:StdPeriphLib/src/system_stm32f10x.c ****          pllmull += 2;
 367:StdPeriphLib/src/system_stm32f10x.c ****       }
 368:StdPeriphLib/src/system_stm32f10x.c ****       else
 369:StdPeriphLib/src/system_stm32f10x.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 370:StdPeriphLib/src/system_stm32f10x.c ****         pllmull = 13 / 2; 
 371:StdPeriphLib/src/system_stm32f10x.c ****       }
 372:StdPeriphLib/src/system_stm32f10x.c ****             
 373:StdPeriphLib/src/system_stm32f10x.c ****       if (pllsource == 0x00)
 374:StdPeriphLib/src/system_stm32f10x.c ****       {
 375:StdPeriphLib/src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 376:StdPeriphLib/src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 377:StdPeriphLib/src/system_stm32f10x.c ****       }
 378:StdPeriphLib/src/system_stm32f10x.c ****       else
 379:StdPeriphLib/src/system_stm32f10x.c ****       {/* PREDIV1 selected as PLL clock entry */
 380:StdPeriphLib/src/system_stm32f10x.c ****         
 381:StdPeriphLib/src/system_stm32f10x.c ****         /* Get PREDIV1 clock source and division factor */
 382:StdPeriphLib/src/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 383:StdPeriphLib/src/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 384:StdPeriphLib/src/system_stm32f10x.c ****         
 385:StdPeriphLib/src/system_stm32f10x.c ****         if (prediv1source == 0)
 386:StdPeriphLib/src/system_stm32f10x.c ****         { 
 387:StdPeriphLib/src/system_stm32f10x.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 388:StdPeriphLib/src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 389:StdPeriphLib/src/system_stm32f10x.c ****         }
 390:StdPeriphLib/src/system_stm32f10x.c ****         else
 391:StdPeriphLib/src/system_stm32f10x.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 392:StdPeriphLib/src/system_stm32f10x.c ****           
 393:StdPeriphLib/src/system_stm32f10x.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 394:StdPeriphLib/src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 395:StdPeriphLib/src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 396:StdPeriphLib/src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 397:StdPeriphLib/src/system_stm32f10x.c ****         }
 398:StdPeriphLib/src/system_stm32f10x.c ****       }
 399:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */ 
 400:StdPeriphLib/src/system_stm32f10x.c ****       break;
 401:StdPeriphLib/src/system_stm32f10x.c **** 
 402:StdPeriphLib/src/system_stm32f10x.c ****     default:
 403:StdPeriphLib/src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 404:StdPeriphLib/src/system_stm32f10x.c ****       break;
 405:StdPeriphLib/src/system_stm32f10x.c ****   }
 406:StdPeriphLib/src/system_stm32f10x.c ****   
 407:StdPeriphLib/src/system_stm32f10x.c ****   /* Compute HCLK clock frequency ----------------*/
 408:StdPeriphLib/src/system_stm32f10x.c ****   /* Get HCLK prescaler */
 409:StdPeriphLib/src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 410:StdPeriphLib/src/system_stm32f10x.c ****   /* HCLK clock frequency */
 411:StdPeriphLib/src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 412:StdPeriphLib/src/system_stm32f10x.c **** }
 413:StdPeriphLib/src/system_stm32f10x.c **** 
 414:StdPeriphLib/src/system_stm32f10x.c **** /**
 415:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 416:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 417:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 418:StdPeriphLib/src/system_stm32f10x.c ****   */
 419:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClock(void)
 420:StdPeriphLib/src/system_stm32f10x.c **** {
 421:StdPeriphLib/src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 422:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClockToHSE();
 423:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 424:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClockTo24();
 425:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 426:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClockTo36();
 427:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 428:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClockTo48();
 429:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 430:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClockTo56();  
 431:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 432:StdPeriphLib/src/system_stm32f10x.c ****   SetSysClockTo72();
 433:StdPeriphLib/src/system_stm32f10x.c **** #endif
 434:StdPeriphLib/src/system_stm32f10x.c ****  
 435:StdPeriphLib/src/system_stm32f10x.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 436:StdPeriphLib/src/system_stm32f10x.c ****     source (default after reset) */ 
 437:StdPeriphLib/src/system_stm32f10x.c **** }
 438:StdPeriphLib/src/system_stm32f10x.c **** 
 439:StdPeriphLib/src/system_stm32f10x.c **** /**
 440:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 441:StdPeriphLib/src/system_stm32f10x.c ****   *          before jump to __main
 442:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 443:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 444:StdPeriphLib/src/system_stm32f10x.c ****   */ 
 445:StdPeriphLib/src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 446:StdPeriphLib/src/system_stm32f10x.c **** /**
 447:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. 
 448:StdPeriphLib/src/system_stm32f10x.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 449:StdPeriphLib/src/system_stm32f10x.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
 450:StdPeriphLib/src/system_stm32f10x.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 451:StdPeriphLib/src/system_stm32f10x.c ****   *         data memory (including heap and stack).
 452:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 453:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 454:StdPeriphLib/src/system_stm32f10x.c ****   */ 
 455:StdPeriphLib/src/system_stm32f10x.c **** void SystemInit_ExtMemCtl(void) 
 456:StdPeriphLib/src/system_stm32f10x.c **** {
 457:StdPeriphLib/src/system_stm32f10x.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 458:StdPeriphLib/src/system_stm32f10x.c ****   required, then adjust the Register Addresses */
 459:StdPeriphLib/src/system_stm32f10x.c **** 
 460:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable FSMC clock */
 461:StdPeriphLib/src/system_stm32f10x.c ****   RCC->AHBENR = 0x00000114;
 462:StdPeriphLib/src/system_stm32f10x.c ****   
 463:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 464:StdPeriphLib/src/system_stm32f10x.c ****   RCC->APB2ENR = 0x000001E0;
 465:StdPeriphLib/src/system_stm32f10x.c ****   
 466:StdPeriphLib/src/system_stm32f10x.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 467:StdPeriphLib/src/system_stm32f10x.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 468:StdPeriphLib/src/system_stm32f10x.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 469:StdPeriphLib/src/system_stm32f10x.c **** /*----------------  NE3 configuration ----------------------------------------*/
 470:StdPeriphLib/src/system_stm32f10x.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 471:StdPeriphLib/src/system_stm32f10x.c ****   
 472:StdPeriphLib/src/system_stm32f10x.c ****   GPIOD->CRL = 0x44BB44BB;  
 473:StdPeriphLib/src/system_stm32f10x.c ****   GPIOD->CRH = 0xBBBBBBBB;
 474:StdPeriphLib/src/system_stm32f10x.c **** 
 475:StdPeriphLib/src/system_stm32f10x.c ****   GPIOE->CRL = 0xB44444BB;  
 476:StdPeriphLib/src/system_stm32f10x.c ****   GPIOE->CRH = 0xBBBBBBBB;
 477:StdPeriphLib/src/system_stm32f10x.c **** 
 478:StdPeriphLib/src/system_stm32f10x.c ****   GPIOF->CRL = 0x44BBBBBB;  
 479:StdPeriphLib/src/system_stm32f10x.c ****   GPIOF->CRH = 0xBBBB4444;
 480:StdPeriphLib/src/system_stm32f10x.c **** 
 481:StdPeriphLib/src/system_stm32f10x.c ****   GPIOG->CRL = 0x44BBBBBB;  
 482:StdPeriphLib/src/system_stm32f10x.c ****   GPIOG->CRH = 0x44444B44;
 483:StdPeriphLib/src/system_stm32f10x.c ****    
 484:StdPeriphLib/src/system_stm32f10x.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 485:StdPeriphLib/src/system_stm32f10x.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 486:StdPeriphLib/src/system_stm32f10x.c ****   
 487:StdPeriphLib/src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 488:StdPeriphLib/src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 489:StdPeriphLib/src/system_stm32f10x.c **** }
 490:StdPeriphLib/src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 491:StdPeriphLib/src/system_stm32f10x.c **** 
 492:StdPeriphLib/src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 493:StdPeriphLib/src/system_stm32f10x.c **** /**
 494:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 495:StdPeriphLib/src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 496:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 497:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 498:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 499:StdPeriphLib/src/system_stm32f10x.c ****   */
 500:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClockToHSE(void)
 501:StdPeriphLib/src/system_stm32f10x.c **** {
 502:StdPeriphLib/src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 503:StdPeriphLib/src/system_stm32f10x.c ****   
 504:StdPeriphLib/src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 505:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable HSE */    
 506:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 507:StdPeriphLib/src/system_stm32f10x.c ****  
 508:StdPeriphLib/src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 509:StdPeriphLib/src/system_stm32f10x.c ****   do
 510:StdPeriphLib/src/system_stm32f10x.c ****   {
 511:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 512:StdPeriphLib/src/system_stm32f10x.c ****     StartUpCounter++;  
 513:StdPeriphLib/src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 514:StdPeriphLib/src/system_stm32f10x.c **** 
 515:StdPeriphLib/src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 516:StdPeriphLib/src/system_stm32f10x.c ****   {
 517:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 518:StdPeriphLib/src/system_stm32f10x.c ****   }
 519:StdPeriphLib/src/system_stm32f10x.c ****   else
 520:StdPeriphLib/src/system_stm32f10x.c ****   {
 521:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 522:StdPeriphLib/src/system_stm32f10x.c ****   }  
 523:StdPeriphLib/src/system_stm32f10x.c **** 
 524:StdPeriphLib/src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 525:StdPeriphLib/src/system_stm32f10x.c ****   {
 526:StdPeriphLib/src/system_stm32f10x.c **** 
 527:StdPeriphLib/src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
 528:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 529:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 530:StdPeriphLib/src/system_stm32f10x.c **** 
 531:StdPeriphLib/src/system_stm32f10x.c ****     /* Flash 0 wait state */
 532:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 533:StdPeriphLib/src/system_stm32f10x.c **** 
 534:StdPeriphLib/src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 535:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 536:StdPeriphLib/src/system_stm32f10x.c **** #else
 537:StdPeriphLib/src/system_stm32f10x.c ****     if (HSE_VALUE <= 24000000)
 538:StdPeriphLib/src/system_stm32f10x.c **** 	{
 539:StdPeriphLib/src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 540:StdPeriphLib/src/system_stm32f10x.c **** 	}
 541:StdPeriphLib/src/system_stm32f10x.c **** 	else
 542:StdPeriphLib/src/system_stm32f10x.c **** 	{
 543:StdPeriphLib/src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 544:StdPeriphLib/src/system_stm32f10x.c **** 	}
 545:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 546:StdPeriphLib/src/system_stm32f10x.c **** #endif
 547:StdPeriphLib/src/system_stm32f10x.c ****  
 548:StdPeriphLib/src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 549:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 550:StdPeriphLib/src/system_stm32f10x.c ****       
 551:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 552:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 553:StdPeriphLib/src/system_stm32f10x.c ****     
 554:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 555:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 556:StdPeriphLib/src/system_stm32f10x.c ****     
 557:StdPeriphLib/src/system_stm32f10x.c ****     /* Select HSE as system clock source */
 558:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 559:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 560:StdPeriphLib/src/system_stm32f10x.c **** 
 561:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till HSE is used as system clock source */
 562:StdPeriphLib/src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 563:StdPeriphLib/src/system_stm32f10x.c ****     {
 564:StdPeriphLib/src/system_stm32f10x.c ****     }
 565:StdPeriphLib/src/system_stm32f10x.c ****   }
 566:StdPeriphLib/src/system_stm32f10x.c ****   else
 567:StdPeriphLib/src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 568:StdPeriphLib/src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 569:StdPeriphLib/src/system_stm32f10x.c ****   }  
 570:StdPeriphLib/src/system_stm32f10x.c **** }
 571:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 572:StdPeriphLib/src/system_stm32f10x.c **** /**
 573:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 574:StdPeriphLib/src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 575:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 576:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 577:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 578:StdPeriphLib/src/system_stm32f10x.c ****   */
 579:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClockTo24(void)
 580:StdPeriphLib/src/system_stm32f10x.c **** {
 581:StdPeriphLib/src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 582:StdPeriphLib/src/system_stm32f10x.c ****   
 583:StdPeriphLib/src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 584:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable HSE */    
 585:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 586:StdPeriphLib/src/system_stm32f10x.c ****  
 587:StdPeriphLib/src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 588:StdPeriphLib/src/system_stm32f10x.c ****   do
 589:StdPeriphLib/src/system_stm32f10x.c ****   {
 590:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 591:StdPeriphLib/src/system_stm32f10x.c ****     StartUpCounter++;  
 592:StdPeriphLib/src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 593:StdPeriphLib/src/system_stm32f10x.c **** 
 594:StdPeriphLib/src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 595:StdPeriphLib/src/system_stm32f10x.c ****   {
 596:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 597:StdPeriphLib/src/system_stm32f10x.c ****   }
 598:StdPeriphLib/src/system_stm32f10x.c ****   else
 599:StdPeriphLib/src/system_stm32f10x.c ****   {
 600:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 601:StdPeriphLib/src/system_stm32f10x.c ****   }  
 602:StdPeriphLib/src/system_stm32f10x.c **** 
 603:StdPeriphLib/src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 604:StdPeriphLib/src/system_stm32f10x.c ****   {
 605:StdPeriphLib/src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
 606:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 607:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 608:StdPeriphLib/src/system_stm32f10x.c **** 
 609:StdPeriphLib/src/system_stm32f10x.c ****     /* Flash 0 wait state */
 610:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 611:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 612:StdPeriphLib/src/system_stm32f10x.c **** #endif
 613:StdPeriphLib/src/system_stm32f10x.c ****  
 614:StdPeriphLib/src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 615:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 616:StdPeriphLib/src/system_stm32f10x.c ****       
 617:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 618:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 619:StdPeriphLib/src/system_stm32f10x.c ****     
 620:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 621:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 622:StdPeriphLib/src/system_stm32f10x.c ****     
 623:StdPeriphLib/src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 624:StdPeriphLib/src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 625:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 626:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 627:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 628:StdPeriphLib/src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 629:StdPeriphLib/src/system_stm32f10x.c **** 
 630:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 631:StdPeriphLib/src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 632:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 633:StdPeriphLib/src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 634:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 635:StdPeriphLib/src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 636:StdPeriphLib/src/system_stm32f10x.c ****   
 637:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL2 */
 638:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 639:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 640:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 641:StdPeriphLib/src/system_stm32f10x.c ****     {
 642:StdPeriphLib/src/system_stm32f10x.c ****     }   
 643:StdPeriphLib/src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 644:StdPeriphLib/src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 645:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 646:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 647:StdPeriphLib/src/system_stm32f10x.c **** #else    
 648:StdPeriphLib/src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 649:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 650:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 651:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 652:StdPeriphLib/src/system_stm32f10x.c **** 
 653:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL */
 654:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 655:StdPeriphLib/src/system_stm32f10x.c **** 
 656:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 657:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 658:StdPeriphLib/src/system_stm32f10x.c ****     {
 659:StdPeriphLib/src/system_stm32f10x.c ****     }
 660:StdPeriphLib/src/system_stm32f10x.c **** 
 661:StdPeriphLib/src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 662:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 663:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 664:StdPeriphLib/src/system_stm32f10x.c **** 
 665:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 666:StdPeriphLib/src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 667:StdPeriphLib/src/system_stm32f10x.c ****     {
 668:StdPeriphLib/src/system_stm32f10x.c ****     }
 669:StdPeriphLib/src/system_stm32f10x.c ****   }
 670:StdPeriphLib/src/system_stm32f10x.c ****   else
 671:StdPeriphLib/src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 672:StdPeriphLib/src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 673:StdPeriphLib/src/system_stm32f10x.c ****   } 
 674:StdPeriphLib/src/system_stm32f10x.c **** }
 675:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 676:StdPeriphLib/src/system_stm32f10x.c **** /**
 677:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
 678:StdPeriphLib/src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 679:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 680:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 681:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 682:StdPeriphLib/src/system_stm32f10x.c ****   */
 683:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClockTo36(void)
 684:StdPeriphLib/src/system_stm32f10x.c **** {
 685:StdPeriphLib/src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 686:StdPeriphLib/src/system_stm32f10x.c ****   
 687:StdPeriphLib/src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 688:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable HSE */    
 689:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 690:StdPeriphLib/src/system_stm32f10x.c ****  
 691:StdPeriphLib/src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 692:StdPeriphLib/src/system_stm32f10x.c ****   do
 693:StdPeriphLib/src/system_stm32f10x.c ****   {
 694:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 695:StdPeriphLib/src/system_stm32f10x.c ****     StartUpCounter++;  
 696:StdPeriphLib/src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 697:StdPeriphLib/src/system_stm32f10x.c **** 
 698:StdPeriphLib/src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 699:StdPeriphLib/src/system_stm32f10x.c ****   {
 700:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 701:StdPeriphLib/src/system_stm32f10x.c ****   }
 702:StdPeriphLib/src/system_stm32f10x.c ****   else
 703:StdPeriphLib/src/system_stm32f10x.c ****   {
 704:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 705:StdPeriphLib/src/system_stm32f10x.c ****   }  
 706:StdPeriphLib/src/system_stm32f10x.c **** 
 707:StdPeriphLib/src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 708:StdPeriphLib/src/system_stm32f10x.c ****   {
 709:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 710:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 711:StdPeriphLib/src/system_stm32f10x.c **** 
 712:StdPeriphLib/src/system_stm32f10x.c ****     /* Flash 1 wait state */
 713:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 714:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 715:StdPeriphLib/src/system_stm32f10x.c ****  
 716:StdPeriphLib/src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 717:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 718:StdPeriphLib/src/system_stm32f10x.c ****       
 719:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 720:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 721:StdPeriphLib/src/system_stm32f10x.c ****     
 722:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 723:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 724:StdPeriphLib/src/system_stm32f10x.c ****     
 725:StdPeriphLib/src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 726:StdPeriphLib/src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 727:StdPeriphLib/src/system_stm32f10x.c ****     
 728:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 729:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 730:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 731:StdPeriphLib/src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
 732:StdPeriphLib/src/system_stm32f10x.c **** 
 733:StdPeriphLib/src/system_stm32f10x.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 734:StdPeriphLib/src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
 735:StdPeriphLib/src/system_stm32f10x.c ****         
 736:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 737:StdPeriphLib/src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 738:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 739:StdPeriphLib/src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 740:StdPeriphLib/src/system_stm32f10x.c ****   
 741:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL2 */
 742:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 743:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 744:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 745:StdPeriphLib/src/system_stm32f10x.c ****     {
 746:StdPeriphLib/src/system_stm32f10x.c ****     }
 747:StdPeriphLib/src/system_stm32f10x.c ****     
 748:StdPeriphLib/src/system_stm32f10x.c **** #else    
 749:StdPeriphLib/src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 750:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 751:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 752:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 753:StdPeriphLib/src/system_stm32f10x.c **** 
 754:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL */
 755:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 756:StdPeriphLib/src/system_stm32f10x.c **** 
 757:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 758:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 759:StdPeriphLib/src/system_stm32f10x.c ****     {
 760:StdPeriphLib/src/system_stm32f10x.c ****     }
 761:StdPeriphLib/src/system_stm32f10x.c **** 
 762:StdPeriphLib/src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 763:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 764:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 765:StdPeriphLib/src/system_stm32f10x.c **** 
 766:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 767:StdPeriphLib/src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 768:StdPeriphLib/src/system_stm32f10x.c ****     {
 769:StdPeriphLib/src/system_stm32f10x.c ****     }
 770:StdPeriphLib/src/system_stm32f10x.c ****   }
 771:StdPeriphLib/src/system_stm32f10x.c ****   else
 772:StdPeriphLib/src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 773:StdPeriphLib/src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 774:StdPeriphLib/src/system_stm32f10x.c ****   } 
 775:StdPeriphLib/src/system_stm32f10x.c **** }
 776:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 777:StdPeriphLib/src/system_stm32f10x.c **** /**
 778:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 48MHz and configure HCLK, PCLK2 
 779:StdPeriphLib/src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 780:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 781:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 782:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 783:StdPeriphLib/src/system_stm32f10x.c ****   */
 784:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClockTo48(void)
 785:StdPeriphLib/src/system_stm32f10x.c **** {
 786:StdPeriphLib/src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 787:StdPeriphLib/src/system_stm32f10x.c ****   
 788:StdPeriphLib/src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 789:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable HSE */    
 790:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 791:StdPeriphLib/src/system_stm32f10x.c ****  
 792:StdPeriphLib/src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 793:StdPeriphLib/src/system_stm32f10x.c ****   do
 794:StdPeriphLib/src/system_stm32f10x.c ****   {
 795:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 796:StdPeriphLib/src/system_stm32f10x.c ****     StartUpCounter++;  
 797:StdPeriphLib/src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 798:StdPeriphLib/src/system_stm32f10x.c **** 
 799:StdPeriphLib/src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800:StdPeriphLib/src/system_stm32f10x.c ****   {
 801:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 802:StdPeriphLib/src/system_stm32f10x.c ****   }
 803:StdPeriphLib/src/system_stm32f10x.c ****   else
 804:StdPeriphLib/src/system_stm32f10x.c ****   {
 805:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 806:StdPeriphLib/src/system_stm32f10x.c ****   }  
 807:StdPeriphLib/src/system_stm32f10x.c **** 
 808:StdPeriphLib/src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 809:StdPeriphLib/src/system_stm32f10x.c ****   {
 810:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 811:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 812:StdPeriphLib/src/system_stm32f10x.c **** 
 813:StdPeriphLib/src/system_stm32f10x.c ****     /* Flash 1 wait state */
 814:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 815:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 816:StdPeriphLib/src/system_stm32f10x.c ****  
 817:StdPeriphLib/src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 818:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 819:StdPeriphLib/src/system_stm32f10x.c ****       
 820:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 821:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 822:StdPeriphLib/src/system_stm32f10x.c ****     
 823:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 824:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 825:StdPeriphLib/src/system_stm32f10x.c ****     
 826:StdPeriphLib/src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 827:StdPeriphLib/src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 828:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 829:StdPeriphLib/src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 830:StdPeriphLib/src/system_stm32f10x.c ****         
 831:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 832:StdPeriphLib/src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 833:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 834:StdPeriphLib/src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 835:StdPeriphLib/src/system_stm32f10x.c ****   
 836:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL2 */
 837:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 838:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 839:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 840:StdPeriphLib/src/system_stm32f10x.c ****     {
 841:StdPeriphLib/src/system_stm32f10x.c ****     }
 842:StdPeriphLib/src/system_stm32f10x.c ****     
 843:StdPeriphLib/src/system_stm32f10x.c ****    
 844:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 48 MHz */ 
 845:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 846:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 847:StdPeriphLib/src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 848:StdPeriphLib/src/system_stm32f10x.c **** #else    
 849:StdPeriphLib/src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 6 = 48 MHz */
 850:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 851:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 852:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 853:StdPeriphLib/src/system_stm32f10x.c **** 
 854:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL */
 855:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 856:StdPeriphLib/src/system_stm32f10x.c **** 
 857:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 858:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 859:StdPeriphLib/src/system_stm32f10x.c ****     {
 860:StdPeriphLib/src/system_stm32f10x.c ****     }
 861:StdPeriphLib/src/system_stm32f10x.c **** 
 862:StdPeriphLib/src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 863:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 864:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 865:StdPeriphLib/src/system_stm32f10x.c **** 
 866:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 867:StdPeriphLib/src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 868:StdPeriphLib/src/system_stm32f10x.c ****     {
 869:StdPeriphLib/src/system_stm32f10x.c ****     }
 870:StdPeriphLib/src/system_stm32f10x.c ****   }
 871:StdPeriphLib/src/system_stm32f10x.c ****   else
 872:StdPeriphLib/src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 873:StdPeriphLib/src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 874:StdPeriphLib/src/system_stm32f10x.c ****   } 
 875:StdPeriphLib/src/system_stm32f10x.c **** }
 876:StdPeriphLib/src/system_stm32f10x.c **** 
 877:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 878:StdPeriphLib/src/system_stm32f10x.c **** /**
 879:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 56MHz and configure HCLK, PCLK2 
 880:StdPeriphLib/src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 881:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 882:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 883:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 884:StdPeriphLib/src/system_stm32f10x.c ****   */
 885:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClockTo56(void)
 886:StdPeriphLib/src/system_stm32f10x.c **** {
 887:StdPeriphLib/src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 888:StdPeriphLib/src/system_stm32f10x.c ****   
 889:StdPeriphLib/src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
 890:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable HSE */    
 891:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 892:StdPeriphLib/src/system_stm32f10x.c ****  
 893:StdPeriphLib/src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 894:StdPeriphLib/src/system_stm32f10x.c ****   do
 895:StdPeriphLib/src/system_stm32f10x.c ****   {
 896:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 897:StdPeriphLib/src/system_stm32f10x.c ****     StartUpCounter++;  
 898:StdPeriphLib/src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 899:StdPeriphLib/src/system_stm32f10x.c **** 
 900:StdPeriphLib/src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 901:StdPeriphLib/src/system_stm32f10x.c ****   {
 902:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 903:StdPeriphLib/src/system_stm32f10x.c ****   }
 904:StdPeriphLib/src/system_stm32f10x.c ****   else
 905:StdPeriphLib/src/system_stm32f10x.c ****   {
 906:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 907:StdPeriphLib/src/system_stm32f10x.c ****   }  
 908:StdPeriphLib/src/system_stm32f10x.c **** 
 909:StdPeriphLib/src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 910:StdPeriphLib/src/system_stm32f10x.c ****   {
 911:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 912:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 913:StdPeriphLib/src/system_stm32f10x.c **** 
 914:StdPeriphLib/src/system_stm32f10x.c ****     /* Flash 2 wait state */
 915:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 916:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 917:StdPeriphLib/src/system_stm32f10x.c ****  
 918:StdPeriphLib/src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 919:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 920:StdPeriphLib/src/system_stm32f10x.c ****       
 921:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 922:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 923:StdPeriphLib/src/system_stm32f10x.c ****     
 924:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 925:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 926:StdPeriphLib/src/system_stm32f10x.c **** 
 927:StdPeriphLib/src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 928:StdPeriphLib/src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 929:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 930:StdPeriphLib/src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 931:StdPeriphLib/src/system_stm32f10x.c ****         
 932:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 933:StdPeriphLib/src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 934:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 935:StdPeriphLib/src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 936:StdPeriphLib/src/system_stm32f10x.c ****   
 937:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL2 */
 938:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 939:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 940:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 941:StdPeriphLib/src/system_stm32f10x.c ****     {
 942:StdPeriphLib/src/system_stm32f10x.c ****     }
 943:StdPeriphLib/src/system_stm32f10x.c ****     
 944:StdPeriphLib/src/system_stm32f10x.c ****    
 945:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 7 = 56 MHz */ 
 946:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 947:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 948:StdPeriphLib/src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL7); 
 949:StdPeriphLib/src/system_stm32f10x.c **** #else     
 950:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
 951:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 952:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 953:StdPeriphLib/src/system_stm32f10x.c **** 
 954:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 955:StdPeriphLib/src/system_stm32f10x.c **** 
 956:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL */
 957:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 958:StdPeriphLib/src/system_stm32f10x.c **** 
 959:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 960:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 961:StdPeriphLib/src/system_stm32f10x.c ****     {
 962:StdPeriphLib/src/system_stm32f10x.c ****     }
 963:StdPeriphLib/src/system_stm32f10x.c **** 
 964:StdPeriphLib/src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 965:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 966:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 967:StdPeriphLib/src/system_stm32f10x.c **** 
 968:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 969:StdPeriphLib/src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 970:StdPeriphLib/src/system_stm32f10x.c ****     {
 971:StdPeriphLib/src/system_stm32f10x.c ****     }
 972:StdPeriphLib/src/system_stm32f10x.c ****   }
 973:StdPeriphLib/src/system_stm32f10x.c ****   else
 974:StdPeriphLib/src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 975:StdPeriphLib/src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 976:StdPeriphLib/src/system_stm32f10x.c ****   } 
 977:StdPeriphLib/src/system_stm32f10x.c **** }
 978:StdPeriphLib/src/system_stm32f10x.c **** 
 979:StdPeriphLib/src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 980:StdPeriphLib/src/system_stm32f10x.c **** /**
 981:StdPeriphLib/src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 72MHz and configure HCLK, PCLK2 
 982:StdPeriphLib/src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 983:StdPeriphLib/src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 984:StdPeriphLib/src/system_stm32f10x.c ****   * @param  None
 985:StdPeriphLib/src/system_stm32f10x.c ****   * @retval None
 986:StdPeriphLib/src/system_stm32f10x.c ****   */
 987:StdPeriphLib/src/system_stm32f10x.c **** static void SetSysClockTo72(void)
 988:StdPeriphLib/src/system_stm32f10x.c **** {
 989:StdPeriphLib/src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  75              		.loc 1 989 0
  76 0042 0092     		str	r2, [sp, #0]
  77              	.LVL0:
  78 0044 0192     		str	r2, [sp, #4]
  79              	.LVL1:
 990:StdPeriphLib/src/system_stm32f10x.c ****   
 991:StdPeriphLib/src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 992:StdPeriphLib/src/system_stm32f10x.c ****   /* Enable HSE */    
 993:StdPeriphLib/src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  80              		.loc 1 993 0
  81 0046 1A68     		ldr	r2, [r3, #0]
  82 0048 42F48032 		orr	r2, r2, #65536
  83 004c 1A60     		str	r2, [r3, #0]
  84              	.L3:
 994:StdPeriphLib/src/system_stm32f10x.c ****  
 995:StdPeriphLib/src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 996:StdPeriphLib/src/system_stm32f10x.c ****   do
 997:StdPeriphLib/src/system_stm32f10x.c ****   {
 998:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  85              		.loc 1 998 0
  86 004e 1A68     		ldr	r2, [r3, #0]
  87 0050 02F40032 		and	r2, r2, #131072
  88              	.LVL2:
  89 0054 0192     		str	r2, [sp, #4]
  90              	.LVL3:
 999:StdPeriphLib/src/system_stm32f10x.c ****     StartUpCounter++;  
  91              		.loc 1 999 0
  92 0056 009A     		ldr	r2, [sp, #0]
  93              	.LVL4:
  94 0058 0132     		adds	r2, r2, #1
  95              	.LVL5:
  96 005a 0092     		str	r2, [sp, #0]
  97              	.LVL6:
1000:StdPeriphLib/src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  98              		.loc 1 1000 0
  99 005c 019A     		ldr	r2, [sp, #4]
 100              	.LVL7:
 101 005e 1AB9     		cbnz	r2, .L2
 102 0060 009A     		ldr	r2, [sp, #0]
 103 0062 B2F5A06F 		cmp	r2, #1280
 104 0066 F2D1     		bne	.L3
 105              	.L2:
1001:StdPeriphLib/src/system_stm32f10x.c **** 
1002:StdPeriphLib/src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 106              		.loc 1 1002 0
 107 0068 2C4B     		ldr	r3, .L22
 108 006a 1B68     		ldr	r3, [r3, #0]
 109 006c 13F40033 		ands	r3, r3, #131072
1003:StdPeriphLib/src/system_stm32f10x.c ****   {
1004:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 110              		.loc 1 1004 0
 111 0070 18BF     		it	ne
 112 0072 0123     		movne	r3, #1
1005:StdPeriphLib/src/system_stm32f10x.c ****   }
1006:StdPeriphLib/src/system_stm32f10x.c ****   else
1007:StdPeriphLib/src/system_stm32f10x.c ****   {
1008:StdPeriphLib/src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 113              		.loc 1 1008 0
 114 0074 0193     		str	r3, [sp, #4]
1009:StdPeriphLib/src/system_stm32f10x.c ****   }  
1010:StdPeriphLib/src/system_stm32f10x.c **** 
1011:StdPeriphLib/src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 115              		.loc 1 1011 0
 116 0076 019B     		ldr	r3, [sp, #4]
 117 0078 012B     		cmp	r3, #1
 118 007a 04D0     		beq	.L6
 119              	.L10:
 120              	.LBE10:
 121              	.LBE9:
 122              	.LBE8:
 267:StdPeriphLib/src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 123              		.loc 1 267 0
 124 007c 294B     		ldr	r3, .L22+8
 125 007e 4FF00062 		mov	r2, #134217728
 126 0082 9A60     		str	r2, [r3, #8]
 127 0084 47E0     		b	.L21
 128              	.L6:
 129              	.LBB13:
 130              	.LBB12:
 131              	.LBB11:
1012:StdPeriphLib/src/system_stm32f10x.c ****   {
1013:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
1014:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 132              		.loc 1 1014 0
 133 0086 284B     		ldr	r3, .L22+12
 134 0088 1A68     		ldr	r2, [r3, #0]
 135 008a 42F01002 		orr	r2, r2, #16
 136 008e 1A60     		str	r2, [r3, #0]
1015:StdPeriphLib/src/system_stm32f10x.c **** 
1016:StdPeriphLib/src/system_stm32f10x.c ****     /* Flash 2 wait state */
1017:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 137              		.loc 1 1017 0
 138 0090 1A68     		ldr	r2, [r3, #0]
 139 0092 22F00302 		bic	r2, r2, #3
 140 0096 1A60     		str	r2, [r3, #0]
1018:StdPeriphLib/src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 141              		.loc 1 1018 0
 142 0098 1A68     		ldr	r2, [r3, #0]
 143 009a 42F00202 		orr	r2, r2, #2
 144 009e 1A60     		str	r2, [r3, #0]
1019:StdPeriphLib/src/system_stm32f10x.c **** 
1020:StdPeriphLib/src/system_stm32f10x.c ****  
1021:StdPeriphLib/src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
1022:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 145              		.loc 1 1022 0
 146 00a0 A3F58053 		sub	r3, r3, #4096
 147 00a4 5A68     		ldr	r2, [r3, #4]
 148 00a6 5A60     		str	r2, [r3, #4]
1023:StdPeriphLib/src/system_stm32f10x.c ****       
1024:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
1025:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 149              		.loc 1 1025 0
 150 00a8 5A68     		ldr	r2, [r3, #4]
 151 00aa 5A60     		str	r2, [r3, #4]
1026:StdPeriphLib/src/system_stm32f10x.c ****     
1027:StdPeriphLib/src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
1028:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 152              		.loc 1 1028 0
 153 00ac 5A68     		ldr	r2, [r3, #4]
 154 00ae 42F48062 		orr	r2, r2, #1024
 155 00b2 5A60     		str	r2, [r3, #4]
1029:StdPeriphLib/src/system_stm32f10x.c **** 
1030:StdPeriphLib/src/system_stm32f10x.c **** #ifdef STM32F10X_CL
1031:StdPeriphLib/src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
1032:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
1033:StdPeriphLib/src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
1034:StdPeriphLib/src/system_stm32f10x.c ****         
1035:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 156              		.loc 1 1035 0
 157 00b4 D96A     		ldr	r1, [r3, #44]
 158 00b6 1D4A     		ldr	r2, .L22+16
 159 00b8 0A40     		ands	r2, r2, r1
 160 00ba DA62     		str	r2, [r3, #44]
1036:StdPeriphLib/src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
1037:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 161              		.loc 1 1037 0
 162 00bc DA6A     		ldr	r2, [r3, #44]
 163 00be 42F48332 		orr	r2, r2, #67072
 164 00c2 42F04402 		orr	r2, r2, #68
 165 00c6 DA62     		str	r2, [r3, #44]
1038:StdPeriphLib/src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
1039:StdPeriphLib/src/system_stm32f10x.c ****   
1040:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL2 */
1041:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 166              		.loc 1 1041 0
 167 00c8 1A68     		ldr	r2, [r3, #0]
 168 00ca 42F08062 		orr	r2, r2, #67108864
 169 00ce 1A60     		str	r2, [r3, #0]
 170              	.L7:
1042:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
1043:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 171              		.loc 1 1043 0
 172 00d0 1968     		ldr	r1, [r3, #0]
 173 00d2 124A     		ldr	r2, .L22
 174 00d4 0901     		lsls	r1, r1, #4
 175 00d6 FBD5     		bpl	.L7
1044:StdPeriphLib/src/system_stm32f10x.c ****     {
1045:StdPeriphLib/src/system_stm32f10x.c ****     }
1046:StdPeriphLib/src/system_stm32f10x.c ****     
1047:StdPeriphLib/src/system_stm32f10x.c ****    
1048:StdPeriphLib/src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
1049:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 176              		.loc 1 1049 0
 177 00d8 5368     		ldr	r3, [r2, #4]
 178 00da 23F47C13 		bic	r3, r3, #4128768
 179 00de 5360     		str	r3, [r2, #4]
1050:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 180              		.loc 1 1050 0
 181 00e0 5368     		ldr	r3, [r2, #4]
 182 00e2 43F4E813 		orr	r3, r3, #1900544
 183 00e6 5360     		str	r3, [r2, #4]
1051:StdPeriphLib/src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
1052:StdPeriphLib/src/system_stm32f10x.c **** #else    
1053:StdPeriphLib/src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
1054:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
1055:StdPeriphLib/src/system_stm32f10x.c ****                                         RCC_CFGR_PLLMULL));
1056:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
1057:StdPeriphLib/src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
1058:StdPeriphLib/src/system_stm32f10x.c **** 
1059:StdPeriphLib/src/system_stm32f10x.c ****     /* Enable PLL */
1060:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 184              		.loc 1 1060 0
 185 00e8 1368     		ldr	r3, [r2, #0]
 186 00ea 43F08073 		orr	r3, r3, #16777216
 187 00ee 1360     		str	r3, [r2, #0]
 188              	.L8:
1061:StdPeriphLib/src/system_stm32f10x.c **** 
1062:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is ready */
1063:StdPeriphLib/src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 189              		.loc 1 1063 0
 190 00f0 1368     		ldr	r3, [r2, #0]
 191 00f2 13F0007F 		tst	r3, #33554432
 192 00f6 094B     		ldr	r3, .L22
 193 00f8 FAD0     		beq	.L8
1064:StdPeriphLib/src/system_stm32f10x.c ****     {
1065:StdPeriphLib/src/system_stm32f10x.c ****     }
1066:StdPeriphLib/src/system_stm32f10x.c ****     
1067:StdPeriphLib/src/system_stm32f10x.c ****     /* Select PLL as system clock source */
1068:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 194              		.loc 1 1068 0
 195 00fa 5A68     		ldr	r2, [r3, #4]
 196 00fc 22F00302 		bic	r2, r2, #3
 197 0100 5A60     		str	r2, [r3, #4]
1069:StdPeriphLib/src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 198              		.loc 1 1069 0
 199 0102 5A68     		ldr	r2, [r3, #4]
 200 0104 42F00202 		orr	r2, r2, #2
 201 0108 5A60     		str	r2, [r3, #4]
 202              	.L9:
1070:StdPeriphLib/src/system_stm32f10x.c **** 
1071:StdPeriphLib/src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
1072:StdPeriphLib/src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 203              		.loc 1 1072 0
 204 010a 5A68     		ldr	r2, [r3, #4]
 205 010c 02F00C02 		and	r2, r2, #12
 206 0110 082A     		cmp	r2, #8
 207 0112 FAD1     		bne	.L9
 208 0114 B2E7     		b	.L10
 209              	.L21:
 210              	.LBE11:
 211              	.LBE12:
 212              	.LBE13:
 269:StdPeriphLib/src/system_stm32f10x.c **** }
 213              		.loc 1 269 0
 214 0116 02B0     		add	sp, sp, #8
 215 0118 7047     		bx	lr
 216              	.L23:
 217 011a 00BF     		.align	2
 218              	.L22:
 219 011c 00100240 		.word	1073876992
 220 0120 0000FFF0 		.word	-251723776
 221 0124 00ED00E0 		.word	-536810240
 222 0128 00200240 		.word	1073881088
 223 012c 00F0FEFF 		.word	-69632
 224              		.cfi_endproc
 225              	.LFE29:
 226              		.fnend
 228              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 229              		.align	1
 230              		.global	SystemCoreClockUpdate
 231              		.thumb
 232              		.thumb_func
 234              	SystemCoreClockUpdate:
 235              		.fnstart
 236              	.LFB30:
 307:StdPeriphLib/src/system_stm32f10x.c **** {
 237              		.loc 1 307 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              	.LVL8:
 319:StdPeriphLib/src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 242              		.loc 1 319 0
 243 0000 234A     		ldr	r2, .L36
 307:StdPeriphLib/src/system_stm32f10x.c **** {
 244              		.loc 1 307 0
 245 0002 30B5     		push	{r4, r5, lr}
 246              		.save {r4, r5, lr}
 247              	.LCFI1:
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 319:StdPeriphLib/src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 252              		.loc 1 319 0
 253 0004 5168     		ldr	r1, [r2, #4]
 254              	.LVL9:
 255 0006 234B     		ldr	r3, .L36+4
 256 0008 01F00C01 		and	r1, r1, #12
 257              	.LVL10:
 321:StdPeriphLib/src/system_stm32f10x.c ****   switch (tmp)
 258              		.loc 1 321 0
 259 000c 0429     		cmp	r1, #4
 260 000e 03D0     		beq	.L27
 261 0010 0829     		cmp	r1, #8
 262 0012 04D0     		beq	.L28
 263 0014 204A     		ldr	r2, .L36+8
 264 0016 00E0     		b	.L34
 265              	.L27:
 327:StdPeriphLib/src/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 266              		.loc 1 327 0
 267 0018 204A     		ldr	r2, .L36+12
 268              	.L34:
 269 001a 1A60     		str	r2, [r3, #0]
 328:StdPeriphLib/src/system_stm32f10x.c ****       break;
 270              		.loc 1 328 0
 271 001c 2BE0     		b	.L29
 272              	.L28:
 332:StdPeriphLib/src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 273              		.loc 1 332 0
 274 001e 5368     		ldr	r3, [r2, #4]
 275              	.LVL11:
 333:StdPeriphLib/src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 276              		.loc 1 333 0
 277 0020 5268     		ldr	r2, [r2, #4]
 362:StdPeriphLib/src/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 278              		.loc 1 362 0
 279 0022 C3F38343 		ubfx	r3, r3, #18, #4
 280              	.LVL12:
 364:StdPeriphLib/src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 281              		.loc 1 364 0
 282 0026 0D2B     		cmp	r3, #13
 333:StdPeriphLib/src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 283              		.loc 1 333 0
 284 0028 02F48032 		and	r2, r2, #65536
 285              	.LVL13:
 364:StdPeriphLib/src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 286              		.loc 1 364 0
 287 002c 01D0     		beq	.L33
 366:StdPeriphLib/src/system_stm32f10x.c ****          pllmull += 2;
 288              		.loc 1 366 0
 289 002e 0233     		adds	r3, r3, #2
 290              	.LVL14:
 291 0030 00E0     		b	.L30
 292              	.L33:
 370:StdPeriphLib/src/system_stm32f10x.c ****         pllmull = 13 / 2; 
 293              		.loc 1 370 0
 294 0032 0623     		movs	r3, #6
 295              	.LVL15:
 296              	.L30:
 373:StdPeriphLib/src/system_stm32f10x.c ****       if (pllsource == 0x00)
 297              		.loc 1 373 0
 298 0034 22B9     		cbnz	r2, .L31
 376:StdPeriphLib/src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 299              		.loc 1 376 0
 300 0036 1A4A     		ldr	r2, .L36+16
 301              	.LVL16:
 302 0038 5343     		muls	r3, r2, r3
 303              	.LVL17:
 304 003a 164A     		ldr	r2, .L36+4
 305 003c 1360     		str	r3, [r2, #0]
 306 003e 1AE0     		b	.L29
 307              	.LVL18:
 308              	.L31:
 382:StdPeriphLib/src/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 309              		.loc 1 382 0
 310 0040 134A     		ldr	r2, .L36
 311              	.LVL19:
 312 0042 164C     		ldr	r4, .L36+12
 313 0044 D16A     		ldr	r1, [r2, #44]
 314              	.LVL20:
 383:StdPeriphLib/src/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 315              		.loc 1 383 0
 316 0046 D06A     		ldr	r0, [r2, #44]
 317 0048 00F00F00 		and	r0, r0, #15
 318 004c 0130     		adds	r0, r0, #1
 319              	.LVL21:
 385:StdPeriphLib/src/system_stm32f10x.c ****         if (prediv1source == 0)
 320              		.loc 1 385 0
 321 004e 11F4803F 		tst	r1, #65536
 322 0052 1049     		ldr	r1, .L36+4
 323              	.LVL22:
 324 0054 00D1     		bne	.L32
 325 0056 0AE0     		b	.L35
 326              	.L32:
 394:StdPeriphLib/src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 327              		.loc 1 394 0
 328 0058 D56A     		ldr	r5, [r2, #44]
 329              	.LVL23:
 395:StdPeriphLib/src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 330              		.loc 1 395 0
 331 005a D26A     		ldr	r2, [r2, #44]
 332              	.LVL24:
 394:StdPeriphLib/src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 333              		.loc 1 394 0
 334 005c C5F30315 		ubfx	r5, r5, #4, #4
 335              	.LVL25:
 336 0060 0135     		adds	r5, r5, #1
 395:StdPeriphLib/src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 337              		.loc 1 395 0
 338 0062 C2F30322 		ubfx	r2, r2, #8, #4
 339              	.LVL26:
 396:StdPeriphLib/src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 340              		.loc 1 396 0
 341 0066 B4FBF5F4 		udiv	r4, r4, r5
 395:StdPeriphLib/src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 342              		.loc 1 395 0
 343 006a 0232     		adds	r2, r2, #2
 396:StdPeriphLib/src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 344              		.loc 1 396 0
 345 006c 5443     		muls	r4, r2, r4
 346              	.L35:
 347 006e B4FBF0F0 		udiv	r0, r4, r0
 348              	.LVL27:
 349 0072 4343     		muls	r3, r0, r3
 350              	.LVL28:
 351 0074 0B60     		str	r3, [r1, #0]
 352              	.L29:
 409:StdPeriphLib/src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 353              		.loc 1 409 0
 354 0076 064B     		ldr	r3, .L36
 355 0078 0A4A     		ldr	r2, .L36+20
 356 007a 5B68     		ldr	r3, [r3, #4]
 357 007c C3F30313 		ubfx	r3, r3, #4, #4
 358 0080 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 359              	.LVL29:
 411:StdPeriphLib/src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 360              		.loc 1 411 0
 361 0082 044B     		ldr	r3, .L36+4
 362 0084 1A68     		ldr	r2, [r3, #0]
 363 0086 22FA01F2 		lsr	r2, r2, r1
 364 008a 1A60     		str	r2, [r3, #0]
 365 008c 30BD     		pop	{r4, r5, pc}
 366              	.L37:
 367 008e 00BF     		.align	2
 368              	.L36:
 369 0090 00100240 		.word	1073876992
 370 0094 00000000 		.word	.LANCHOR0
 371 0098 00127A00 		.word	8000000
 372 009c 40787D01 		.word	25000000
 373 00a0 00093D00 		.word	4000000
 374 00a4 00000000 		.word	.LANCHOR1
 375              		.cfi_endproc
 376              	.LFE30:
 377              		.fnend
 379              		.global	AHBPrescTable
 380              		.global	SystemCoreClock
 381              		.section	.data.AHBPrescTable,"aw",%progbits
 382              	.LANCHOR1 = . + 0
 385              	AHBPrescTable:
 386 0000 00       		.byte	0
 387 0001 00       		.byte	0
 388 0002 00       		.byte	0
 389 0003 00       		.byte	0
 390 0004 00       		.byte	0
 391 0005 00       		.byte	0
 392 0006 00       		.byte	0
 393 0007 00       		.byte	0
 394 0008 01       		.byte	1
 395 0009 02       		.byte	2
 396 000a 03       		.byte	3
 397 000b 04       		.byte	4
 398 000c 06       		.byte	6
 399 000d 07       		.byte	7
 400 000e 08       		.byte	8
 401 000f 09       		.byte	9
 402              		.section	.data.SystemCoreClock,"aw",%progbits
 403              		.align	2
 404              	.LANCHOR0 = . + 0
 407              	SystemCoreClock:
 408 0000 00A24A04 		.word	72000000
 409              		.text
 410              	.Letext0:
 411              		.file 2 "/home/cnovak/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin/../arm-none-linux
 412              		.file 3 "StdPeriphLib/inc/core_cm3.h"
 413              		.file 4 "StdPeriphLib/inc/stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f10x.c
     /tmp/ccZQhBBe.s:19     .text.SystemInit:00000000 $t
     /tmp/ccZQhBBe.s:24     .text.SystemInit:00000000 SystemInit
     /tmp/ccZQhBBe.s:219    .text.SystemInit:0000011c $d
       .ARM.exidx.text.SystemInit:00000000 $d
     /tmp/ccZQhBBe.s:229    .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccZQhBBe.s:234    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccZQhBBe.s:369    .text.SystemCoreClockUpdate:00000090 $d
.ARM.exidx.text.SystemCoreClockUpdate:00000000 $d
     /tmp/ccZQhBBe.s:385    .data.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccZQhBBe.s:407    .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccZQhBBe.s:403    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_unwind_cpp_pr0
