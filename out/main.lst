   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 2
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Delay,"ax",%progbits
  19              		.align	1
  20              		.global	Delay
  21              		.thumb
  22              		.thumb_func
  24              	Delay:
  25              		.fnstart
  26              	.LFB30:
  27              		.file 1 "main.c"
   1:main.c        **** #include "stm32f10x_conf.h"
   2:main.c        **** 
   3:main.c        **** 
   4:main.c        **** GPIO_InitTypeDef GPIO_InitStructure;
   5:main.c        **** 
   6:main.c        **** 
   7:main.c        **** void Delay(vu32 nCount);
   8:main.c        **** void LED_Flash(void);
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** int main(void)
  12:main.c        **** {
  13:main.c        **** 
  14:main.c        ****   /* Enable clocks */
  15:main.c        ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
  16:main.c        **** 
  17:main.c        ****  
  18:main.c        ****   /* Configure PC.06 PC.07 as output push-pull */
  19:main.c        ****   GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
  20:main.c        ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  21:main.c        ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  22:main.c        ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
  23:main.c        **** 
  24:main.c        ****   //==============================================
  25:main.c        **** 
  26:main.c        ****   SysTick_Config(SystemCoreClock / 1000);
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        ****   while(1)
  30:main.c        ****   {
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        ****     GPIO_SetBits(GPIOC, GPIO_Pin_6);
  34:main.c        ****     GPIO_ResetBits(GPIOC, GPIO_Pin_7);
  35:main.c        **** 
  36:main.c        ****     Delay(0xDFFFF);
  37:main.c        ****     
  38:main.c        ****     GPIO_ResetBits(GPIOC, GPIO_Pin_6);
  39:main.c        ****     GPIO_SetBits(GPIOC, GPIO_Pin_7);
  40:main.c        **** 
  41:main.c        ****     Delay(0xDFFFF);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** 
  45:main.c        ****   }
  46:main.c        **** }
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** void Delay(vu32 nCount)
  50:main.c        **** {
  28              		.loc 1 50 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		.pad #8
  35 0000 82B0     		sub	sp, sp, #8
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.loc 1 50 0
  39 0002 0190     		str	r0, [sp, #4]
  51:main.c        ****   for(; nCount!= 0;nCount--);
  40              		.loc 1 51 0
  41 0004 02E0     		b	.L2
  42              	.L3:
  43              		.loc 1 51 0 is_stmt 0 discriminator 2
  44 0006 019B     		ldr	r3, [sp, #4]
  45 0008 013B     		subs	r3, r3, #1
  46              	.LVL1:
  47 000a 0193     		str	r3, [sp, #4]
  48              	.LVL2:
  49              	.L2:
  50              		.loc 1 51 0 discriminator 1
  51 000c 019B     		ldr	r3, [sp, #4]
  52 000e 002B     		cmp	r3, #0
  53 0010 F9D1     		bne	.L3
  52:main.c        **** }
  54              		.loc 1 52 0 is_stmt 1
  55 0012 02B0     		add	sp, sp, #8
  56 0014 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE30:
  59              		.fnend
  61              		.section	.text.startup.main,"ax",%progbits
  62              		.align	1
  63              		.global	main
  64              		.thumb
  65              		.thumb_func
  67              	main:
  68              		.fnstart
  69              	.LFB29:
  12:main.c        **** {
  70              		.loc 1 12 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74 0000 08B5     		push	{r3, lr}
  75              		.save {r3, lr}
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 3, -8
  79              		.cfi_offset 14, -4
  15:main.c        ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
  80              		.loc 1 15 0
  81 0002 1020     		movs	r0, #16
  82 0004 0121     		movs	r1, #1
  83 0006 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  84              	.LVL3:
  19:main.c        ****   GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
  85              		.loc 1 19 0
  86 000a 1949     		ldr	r1, .L6
  87 000c C023     		movs	r3, #192
  88 000e 0B80     		strh	r3, [r1, #0]	@ movhi
  20:main.c        ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  89              		.loc 1 20 0
  90 0010 1023     		movs	r3, #16
  91 0012 8B60     		str	r3, [r1, #8]
  22:main.c        ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
  92              		.loc 1 22 0
  93 0014 1748     		ldr	r0, .L6+4
  21:main.c        ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  94              		.loc 1 21 0
  95 0016 0323     		movs	r3, #3
  96 0018 4B60     		str	r3, [r1, #4]
  22:main.c        ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
  97              		.loc 1 22 0
  98 001a FFF7FEFF 		bl	GPIO_Init
  99              	.LVL4:
  26:main.c        ****   SysTick_Config(SystemCoreClock / 1000);
 100              		.loc 1 26 0
 101 001e 164B     		ldr	r3, .L6+8
 102              	.LVL5:
 103              	.LBB6:
 104              	.LBB7:
 105              	.LBB8:
 106              	.LBB9:
 107              		.file 2 "StdPeriphLib/inc/core_cm3.h"
   1:StdPeriphLib/inc/core_cm3.h **** /**************************************************************************//**
   2:StdPeriphLib/inc/core_cm3.h ****  * @file     core_cm3.h
   3:StdPeriphLib/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:StdPeriphLib/inc/core_cm3.h ****  * @version  V1.30
   5:StdPeriphLib/inc/core_cm3.h ****  * @date     30. October 2009
   6:StdPeriphLib/inc/core_cm3.h ****  *
   7:StdPeriphLib/inc/core_cm3.h ****  * @note
   8:StdPeriphLib/inc/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:StdPeriphLib/inc/core_cm3.h ****  *
  10:StdPeriphLib/inc/core_cm3.h ****  * @par
  11:StdPeriphLib/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:StdPeriphLib/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:StdPeriphLib/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:StdPeriphLib/inc/core_cm3.h ****  *
  15:StdPeriphLib/inc/core_cm3.h ****  * @par
  16:StdPeriphLib/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:StdPeriphLib/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:StdPeriphLib/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:StdPeriphLib/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:StdPeriphLib/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:StdPeriphLib/inc/core_cm3.h ****  *
  22:StdPeriphLib/inc/core_cm3.h ****  ******************************************************************************/
  23:StdPeriphLib/inc/core_cm3.h **** 
  24:StdPeriphLib/inc/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:StdPeriphLib/inc/core_cm3.h **** #define __CM3_CORE_H__
  26:StdPeriphLib/inc/core_cm3.h **** 
  27:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:StdPeriphLib/inc/core_cm3.h ****  *
  29:StdPeriphLib/inc/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:StdPeriphLib/inc/core_cm3.h ****  *   - Error 10: \n
  31:StdPeriphLib/inc/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:StdPeriphLib/inc/core_cm3.h ****  *     Error 10: Expecting ';'
  33:StdPeriphLib/inc/core_cm3.h ****  * .
  34:StdPeriphLib/inc/core_cm3.h ****  *   - Error 530: \n
  35:StdPeriphLib/inc/core_cm3.h ****  *     return(__regBasePri); \n
  36:StdPeriphLib/inc/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:StdPeriphLib/inc/core_cm3.h ****  * . 
  38:StdPeriphLib/inc/core_cm3.h ****  *   - Error 550: \n
  39:StdPeriphLib/inc/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:StdPeriphLib/inc/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:StdPeriphLib/inc/core_cm3.h ****  * .
  42:StdPeriphLib/inc/core_cm3.h ****  *   - Error 754: \n
  43:StdPeriphLib/inc/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:StdPeriphLib/inc/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:StdPeriphLib/inc/core_cm3.h ****  * .
  46:StdPeriphLib/inc/core_cm3.h ****  *   - Error 750: \n
  47:StdPeriphLib/inc/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:StdPeriphLib/inc/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:StdPeriphLib/inc/core_cm3.h ****  * .
  50:StdPeriphLib/inc/core_cm3.h ****  *   - Error 528: \n
  51:StdPeriphLib/inc/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:StdPeriphLib/inc/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:StdPeriphLib/inc/core_cm3.h ****  * .
  54:StdPeriphLib/inc/core_cm3.h ****  *   - Error 751: \n
  55:StdPeriphLib/inc/core_cm3.h ****  *     } InterruptType_Type; \n
  56:StdPeriphLib/inc/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:StdPeriphLib/inc/core_cm3.h ****  * .
  58:StdPeriphLib/inc/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:StdPeriphLib/inc/core_cm3.h ****  *
  60:StdPeriphLib/inc/core_cm3.h ****  */
  61:StdPeriphLib/inc/core_cm3.h **** 
  62:StdPeriphLib/inc/core_cm3.h **** /*lint -save */
  63:StdPeriphLib/inc/core_cm3.h **** /*lint -e10  */
  64:StdPeriphLib/inc/core_cm3.h **** /*lint -e530 */
  65:StdPeriphLib/inc/core_cm3.h **** /*lint -e550 */
  66:StdPeriphLib/inc/core_cm3.h **** /*lint -e754 */
  67:StdPeriphLib/inc/core_cm3.h **** /*lint -e750 */
  68:StdPeriphLib/inc/core_cm3.h **** /*lint -e528 */
  69:StdPeriphLib/inc/core_cm3.h **** /*lint -e751 */
  70:StdPeriphLib/inc/core_cm3.h **** 
  71:StdPeriphLib/inc/core_cm3.h **** 
  72:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:StdPeriphLib/inc/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:StdPeriphLib/inc/core_cm3.h ****     - CMSIS version number
  75:StdPeriphLib/inc/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:StdPeriphLib/inc/core_cm3.h ****     - Cortex-M core peripheral base address
  77:StdPeriphLib/inc/core_cm3.h ****   @{
  78:StdPeriphLib/inc/core_cm3.h ****  */
  79:StdPeriphLib/inc/core_cm3.h **** 
  80:StdPeriphLib/inc/core_cm3.h **** #ifdef __cplusplus
  81:StdPeriphLib/inc/core_cm3.h ****  extern "C" {
  82:StdPeriphLib/inc/core_cm3.h **** #endif 
  83:StdPeriphLib/inc/core_cm3.h **** 
  84:StdPeriphLib/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:StdPeriphLib/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:StdPeriphLib/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:StdPeriphLib/inc/core_cm3.h **** 
  88:StdPeriphLib/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:StdPeriphLib/inc/core_cm3.h **** 
  90:StdPeriphLib/inc/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:StdPeriphLib/inc/core_cm3.h **** 
  92:StdPeriphLib/inc/core_cm3.h **** #if defined (__ICCARM__)
  93:StdPeriphLib/inc/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:StdPeriphLib/inc/core_cm3.h **** #endif
  95:StdPeriphLib/inc/core_cm3.h **** 
  96:StdPeriphLib/inc/core_cm3.h **** 
  97:StdPeriphLib/inc/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:StdPeriphLib/inc/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:StdPeriphLib/inc/core_cm3.h **** #endif
 100:StdPeriphLib/inc/core_cm3.h **** 
 101:StdPeriphLib/inc/core_cm3.h **** 
 102:StdPeriphLib/inc/core_cm3.h **** 
 103:StdPeriphLib/inc/core_cm3.h **** 
 104:StdPeriphLib/inc/core_cm3.h **** /**
 105:StdPeriphLib/inc/core_cm3.h ****  * IO definitions
 106:StdPeriphLib/inc/core_cm3.h ****  *
 107:StdPeriphLib/inc/core_cm3.h ****  * define access restrictions to peripheral registers
 108:StdPeriphLib/inc/core_cm3.h ****  */
 109:StdPeriphLib/inc/core_cm3.h **** 
 110:StdPeriphLib/inc/core_cm3.h **** #ifdef __cplusplus
 111:StdPeriphLib/inc/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:StdPeriphLib/inc/core_cm3.h **** #else
 113:StdPeriphLib/inc/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:StdPeriphLib/inc/core_cm3.h **** #endif
 115:StdPeriphLib/inc/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:StdPeriphLib/inc/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:StdPeriphLib/inc/core_cm3.h **** 
 118:StdPeriphLib/inc/core_cm3.h **** 
 119:StdPeriphLib/inc/core_cm3.h **** 
 120:StdPeriphLib/inc/core_cm3.h **** /*******************************************************************************
 121:StdPeriphLib/inc/core_cm3.h ****  *                 Register Abstraction
 122:StdPeriphLib/inc/core_cm3.h ****  ******************************************************************************/
 123:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:StdPeriphLib/inc/core_cm3.h ****  @{
 125:StdPeriphLib/inc/core_cm3.h **** */
 126:StdPeriphLib/inc/core_cm3.h **** 
 127:StdPeriphLib/inc/core_cm3.h **** 
 128:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:StdPeriphLib/inc/core_cm3.h ****   @{
 131:StdPeriphLib/inc/core_cm3.h ****  */
 132:StdPeriphLib/inc/core_cm3.h **** typedef struct
 133:StdPeriphLib/inc/core_cm3.h **** {
 134:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:StdPeriphLib/inc/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:StdPeriphLib/inc/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:StdPeriphLib/inc/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:StdPeriphLib/inc/core_cm3.h **** }  NVIC_Type;                                               
 148:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:StdPeriphLib/inc/core_cm3.h **** 
 150:StdPeriphLib/inc/core_cm3.h **** 
 151:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:StdPeriphLib/inc/core_cm3.h ****   @{
 154:StdPeriphLib/inc/core_cm3.h ****  */
 155:StdPeriphLib/inc/core_cm3.h **** typedef struct
 156:StdPeriphLib/inc/core_cm3.h **** {
 157:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:StdPeriphLib/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:StdPeriphLib/inc/core_cm3.h **** } SCB_Type;                                                
 177:StdPeriphLib/inc/core_cm3.h **** 
 178:StdPeriphLib/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:StdPeriphLib/inc/core_cm3.h **** 
 182:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:StdPeriphLib/inc/core_cm3.h **** 
 185:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:StdPeriphLib/inc/core_cm3.h **** 
 188:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:StdPeriphLib/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:StdPeriphLib/inc/core_cm3.h **** 
 191:StdPeriphLib/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:StdPeriphLib/inc/core_cm3.h **** 
 195:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:StdPeriphLib/inc/core_cm3.h **** 
 198:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:StdPeriphLib/inc/core_cm3.h **** 
 201:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:StdPeriphLib/inc/core_cm3.h **** 
 204:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:StdPeriphLib/inc/core_cm3.h **** 
 207:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:StdPeriphLib/inc/core_cm3.h **** 
 210:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:StdPeriphLib/inc/core_cm3.h **** 
 213:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:StdPeriphLib/inc/core_cm3.h **** 
 216:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:StdPeriphLib/inc/core_cm3.h **** 
 219:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:StdPeriphLib/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:StdPeriphLib/inc/core_cm3.h **** 
 222:StdPeriphLib/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:StdPeriphLib/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:StdPeriphLib/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:StdPeriphLib/inc/core_cm3.h **** 
 226:StdPeriphLib/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:StdPeriphLib/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:StdPeriphLib/inc/core_cm3.h **** 
 229:StdPeriphLib/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:StdPeriphLib/inc/core_cm3.h **** 
 233:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:StdPeriphLib/inc/core_cm3.h **** 
 236:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:StdPeriphLib/inc/core_cm3.h **** 
 239:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:StdPeriphLib/inc/core_cm3.h **** 
 242:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:StdPeriphLib/inc/core_cm3.h **** 
 245:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:StdPeriphLib/inc/core_cm3.h **** 
 248:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:StdPeriphLib/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:StdPeriphLib/inc/core_cm3.h **** 
 251:StdPeriphLib/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 252:StdPeriphLib/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:StdPeriphLib/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:StdPeriphLib/inc/core_cm3.h **** 
 255:StdPeriphLib/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:StdPeriphLib/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:StdPeriphLib/inc/core_cm3.h **** 
 258:StdPeriphLib/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:StdPeriphLib/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:StdPeriphLib/inc/core_cm3.h **** 
 261:StdPeriphLib/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:StdPeriphLib/inc/core_cm3.h **** 
 265:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:StdPeriphLib/inc/core_cm3.h **** 
 268:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:StdPeriphLib/inc/core_cm3.h **** 
 271:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:StdPeriphLib/inc/core_cm3.h **** 
 274:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:StdPeriphLib/inc/core_cm3.h **** 
 277:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:StdPeriphLib/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:StdPeriphLib/inc/core_cm3.h **** 
 280:StdPeriphLib/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:StdPeriphLib/inc/core_cm3.h **** 
 284:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:StdPeriphLib/inc/core_cm3.h **** 
 287:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:StdPeriphLib/inc/core_cm3.h **** 
 290:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:StdPeriphLib/inc/core_cm3.h **** 
 293:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:StdPeriphLib/inc/core_cm3.h **** 
 296:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:StdPeriphLib/inc/core_cm3.h **** 
 299:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:StdPeriphLib/inc/core_cm3.h **** 
 302:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:StdPeriphLib/inc/core_cm3.h **** 
 305:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:StdPeriphLib/inc/core_cm3.h **** 
 308:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:StdPeriphLib/inc/core_cm3.h **** 
 311:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:StdPeriphLib/inc/core_cm3.h ****                                      
 314:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:StdPeriphLib/inc/core_cm3.h **** 
 317:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:StdPeriphLib/inc/core_cm3.h **** 
 320:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:StdPeriphLib/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:StdPeriphLib/inc/core_cm3.h **** 
 323:StdPeriphLib/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:StdPeriphLib/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:StdPeriphLib/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:StdPeriphLib/inc/core_cm3.h **** 
 327:StdPeriphLib/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:StdPeriphLib/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:StdPeriphLib/inc/core_cm3.h **** 
 330:StdPeriphLib/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:StdPeriphLib/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:StdPeriphLib/inc/core_cm3.h **** 
 333:StdPeriphLib/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:StdPeriphLib/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:StdPeriphLib/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:StdPeriphLib/inc/core_cm3.h **** 
 337:StdPeriphLib/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:StdPeriphLib/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:StdPeriphLib/inc/core_cm3.h **** 
 340:StdPeriphLib/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:StdPeriphLib/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:StdPeriphLib/inc/core_cm3.h **** 
 343:StdPeriphLib/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:StdPeriphLib/inc/core_cm3.h **** 
 347:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:StdPeriphLib/inc/core_cm3.h **** 
 350:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:StdPeriphLib/inc/core_cm3.h **** 
 353:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:StdPeriphLib/inc/core_cm3.h **** 
 356:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:StdPeriphLib/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:StdPeriphLib/inc/core_cm3.h **** 
 360:StdPeriphLib/inc/core_cm3.h **** 
 361:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for SysTick
 363:StdPeriphLib/inc/core_cm3.h ****   @{
 364:StdPeriphLib/inc/core_cm3.h ****  */
 365:StdPeriphLib/inc/core_cm3.h **** typedef struct
 366:StdPeriphLib/inc/core_cm3.h **** {
 367:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:StdPeriphLib/inc/core_cm3.h **** } SysTick_Type;
 372:StdPeriphLib/inc/core_cm3.h **** 
 373:StdPeriphLib/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:StdPeriphLib/inc/core_cm3.h **** 
 377:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:StdPeriphLib/inc/core_cm3.h **** 
 380:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:StdPeriphLib/inc/core_cm3.h **** 
 383:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:StdPeriphLib/inc/core_cm3.h **** 
 386:StdPeriphLib/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:StdPeriphLib/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:StdPeriphLib/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:StdPeriphLib/inc/core_cm3.h **** 
 390:StdPeriphLib/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 391:StdPeriphLib/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:StdPeriphLib/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:StdPeriphLib/inc/core_cm3.h **** 
 394:StdPeriphLib/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:StdPeriphLib/inc/core_cm3.h **** 
 398:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:StdPeriphLib/inc/core_cm3.h **** 
 401:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:StdPeriphLib/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:StdPeriphLib/inc/core_cm3.h **** 
 405:StdPeriphLib/inc/core_cm3.h **** 
 406:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:StdPeriphLib/inc/core_cm3.h ****   @{
 409:StdPeriphLib/inc/core_cm3.h ****  */
 410:StdPeriphLib/inc/core_cm3.h **** typedef struct
 411:StdPeriphLib/inc/core_cm3.h **** {
 412:StdPeriphLib/inc/core_cm3.h ****   __O  union  
 413:StdPeriphLib/inc/core_cm3.h ****   {
 414:StdPeriphLib/inc/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:StdPeriphLib/inc/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:StdPeriphLib/inc/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:StdPeriphLib/inc/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:StdPeriphLib/inc/core_cm3.h **** } ITM_Type;                                                
 445:StdPeriphLib/inc/core_cm3.h **** 
 446:StdPeriphLib/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:StdPeriphLib/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:StdPeriphLib/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:StdPeriphLib/inc/core_cm3.h **** 
 450:StdPeriphLib/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:StdPeriphLib/inc/core_cm3.h **** 
 454:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:StdPeriphLib/inc/core_cm3.h **** 
 457:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:StdPeriphLib/inc/core_cm3.h **** 
 460:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:StdPeriphLib/inc/core_cm3.h **** 
 463:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:StdPeriphLib/inc/core_cm3.h **** 
 466:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:StdPeriphLib/inc/core_cm3.h **** 
 469:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:StdPeriphLib/inc/core_cm3.h **** 
 472:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:StdPeriphLib/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:StdPeriphLib/inc/core_cm3.h **** 
 475:StdPeriphLib/inc/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:StdPeriphLib/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:StdPeriphLib/inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:StdPeriphLib/inc/core_cm3.h **** 
 479:StdPeriphLib/inc/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:StdPeriphLib/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:StdPeriphLib/inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:StdPeriphLib/inc/core_cm3.h **** 
 483:StdPeriphLib/inc/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:StdPeriphLib/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:StdPeriphLib/inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:StdPeriphLib/inc/core_cm3.h **** 
 487:StdPeriphLib/inc/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:StdPeriphLib/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:StdPeriphLib/inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:StdPeriphLib/inc/core_cm3.h **** 
 491:StdPeriphLib/inc/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:StdPeriphLib/inc/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:StdPeriphLib/inc/core_cm3.h **** 
 494:StdPeriphLib/inc/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:StdPeriphLib/inc/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:StdPeriphLib/inc/core_cm3.h **** 
 498:StdPeriphLib/inc/core_cm3.h **** 
 499:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:StdPeriphLib/inc/core_cm3.h ****   @{
 502:StdPeriphLib/inc/core_cm3.h ****  */
 503:StdPeriphLib/inc/core_cm3.h **** typedef struct
 504:StdPeriphLib/inc/core_cm3.h **** {
 505:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED0;
 506:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:StdPeriphLib/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:StdPeriphLib/inc/core_cm3.h **** #else
 510:StdPeriphLib/inc/core_cm3.h ****        uint32_t RESERVED1;
 511:StdPeriphLib/inc/core_cm3.h **** #endif
 512:StdPeriphLib/inc/core_cm3.h **** } InterruptType_Type;
 513:StdPeriphLib/inc/core_cm3.h **** 
 514:StdPeriphLib/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:StdPeriphLib/inc/core_cm3.h **** 
 518:StdPeriphLib/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:StdPeriphLib/inc/core_cm3.h **** 
 522:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:StdPeriphLib/inc/core_cm3.h **** 
 525:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:StdPeriphLib/inc/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:StdPeriphLib/inc/core_cm3.h **** 
 529:StdPeriphLib/inc/core_cm3.h **** 
 530:StdPeriphLib/inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:StdPeriphLib/inc/core_cm3.h ****   @{
 534:StdPeriphLib/inc/core_cm3.h ****  */
 535:StdPeriphLib/inc/core_cm3.h **** typedef struct
 536:StdPeriphLib/inc/core_cm3.h **** {
 537:StdPeriphLib/inc/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:StdPeriphLib/inc/core_cm3.h **** } MPU_Type;                                                
 549:StdPeriphLib/inc/core_cm3.h **** 
 550:StdPeriphLib/inc/core_cm3.h **** /* MPU Type Register */
 551:StdPeriphLib/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:StdPeriphLib/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:StdPeriphLib/inc/core_cm3.h **** 
 554:StdPeriphLib/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:StdPeriphLib/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:StdPeriphLib/inc/core_cm3.h **** 
 557:StdPeriphLib/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:StdPeriphLib/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:StdPeriphLib/inc/core_cm3.h **** 
 560:StdPeriphLib/inc/core_cm3.h **** /* MPU Control Register */
 561:StdPeriphLib/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:StdPeriphLib/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:StdPeriphLib/inc/core_cm3.h **** 
 564:StdPeriphLib/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:StdPeriphLib/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:StdPeriphLib/inc/core_cm3.h **** 
 567:StdPeriphLib/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:StdPeriphLib/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:StdPeriphLib/inc/core_cm3.h **** 
 570:StdPeriphLib/inc/core_cm3.h **** /* MPU Region Number Register */
 571:StdPeriphLib/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:StdPeriphLib/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:StdPeriphLib/inc/core_cm3.h **** 
 574:StdPeriphLib/inc/core_cm3.h **** /* MPU Region Base Address Register */
 575:StdPeriphLib/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:StdPeriphLib/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:StdPeriphLib/inc/core_cm3.h **** 
 578:StdPeriphLib/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:StdPeriphLib/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:StdPeriphLib/inc/core_cm3.h **** 
 581:StdPeriphLib/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:StdPeriphLib/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:StdPeriphLib/inc/core_cm3.h **** 
 584:StdPeriphLib/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:StdPeriphLib/inc/core_cm3.h **** 
 588:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:StdPeriphLib/inc/core_cm3.h **** 
 591:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:StdPeriphLib/inc/core_cm3.h **** 
 594:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:StdPeriphLib/inc/core_cm3.h **** 
 597:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:StdPeriphLib/inc/core_cm3.h **** 
 600:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:StdPeriphLib/inc/core_cm3.h **** 
 603:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:StdPeriphLib/inc/core_cm3.h **** 
 606:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:StdPeriphLib/inc/core_cm3.h **** 
 609:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:StdPeriphLib/inc/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:StdPeriphLib/inc/core_cm3.h **** 
 612:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:StdPeriphLib/inc/core_cm3.h **** #endif
 614:StdPeriphLib/inc/core_cm3.h **** 
 615:StdPeriphLib/inc/core_cm3.h **** 
 616:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:StdPeriphLib/inc/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:StdPeriphLib/inc/core_cm3.h ****   @{
 619:StdPeriphLib/inc/core_cm3.h ****  */
 620:StdPeriphLib/inc/core_cm3.h **** typedef struct
 621:StdPeriphLib/inc/core_cm3.h **** {
 622:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:StdPeriphLib/inc/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:StdPeriphLib/inc/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:StdPeriphLib/inc/core_cm3.h **** } CoreDebug_Type;
 627:StdPeriphLib/inc/core_cm3.h **** 
 628:StdPeriphLib/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:StdPeriphLib/inc/core_cm3.h **** 
 632:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:StdPeriphLib/inc/core_cm3.h **** 
 635:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:StdPeriphLib/inc/core_cm3.h **** 
 638:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:StdPeriphLib/inc/core_cm3.h **** 
 641:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:StdPeriphLib/inc/core_cm3.h **** 
 644:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:StdPeriphLib/inc/core_cm3.h **** 
 647:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:StdPeriphLib/inc/core_cm3.h **** 
 650:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:StdPeriphLib/inc/core_cm3.h **** 
 653:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:StdPeriphLib/inc/core_cm3.h **** 
 656:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:StdPeriphLib/inc/core_cm3.h **** 
 659:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:StdPeriphLib/inc/core_cm3.h **** 
 662:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:StdPeriphLib/inc/core_cm3.h **** 
 665:StdPeriphLib/inc/core_cm3.h **** /* Debug Core Register Selector Register */
 666:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:StdPeriphLib/inc/core_cm3.h **** 
 669:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:StdPeriphLib/inc/core_cm3.h **** 
 672:StdPeriphLib/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:StdPeriphLib/inc/core_cm3.h **** 
 676:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:StdPeriphLib/inc/core_cm3.h **** 
 679:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:StdPeriphLib/inc/core_cm3.h **** 
 682:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:StdPeriphLib/inc/core_cm3.h **** 
 685:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:StdPeriphLib/inc/core_cm3.h **** 
 688:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:StdPeriphLib/inc/core_cm3.h **** 
 691:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:StdPeriphLib/inc/core_cm3.h **** 
 694:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:StdPeriphLib/inc/core_cm3.h **** 
 697:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:StdPeriphLib/inc/core_cm3.h **** 
 700:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:StdPeriphLib/inc/core_cm3.h **** 
 703:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:StdPeriphLib/inc/core_cm3.h **** 
 706:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:StdPeriphLib/inc/core_cm3.h **** 
 709:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:StdPeriphLib/inc/core_cm3.h **** 
 713:StdPeriphLib/inc/core_cm3.h **** 
 714:StdPeriphLib/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:StdPeriphLib/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:StdPeriphLib/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:StdPeriphLib/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:StdPeriphLib/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:StdPeriphLib/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:StdPeriphLib/inc/core_cm3.h **** 
 722:StdPeriphLib/inc/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:StdPeriphLib/inc/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:StdPeriphLib/inc/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:StdPeriphLib/inc/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:StdPeriphLib/inc/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:StdPeriphLib/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:StdPeriphLib/inc/core_cm3.h **** 
 729:StdPeriphLib/inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:StdPeriphLib/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:StdPeriphLib/inc/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:StdPeriphLib/inc/core_cm3.h **** #endif
 733:StdPeriphLib/inc/core_cm3.h **** 
 734:StdPeriphLib/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:StdPeriphLib/inc/core_cm3.h **** 
 736:StdPeriphLib/inc/core_cm3.h **** 
 737:StdPeriphLib/inc/core_cm3.h **** /*******************************************************************************
 738:StdPeriphLib/inc/core_cm3.h ****  *                Hardware Abstraction Layer
 739:StdPeriphLib/inc/core_cm3.h ****  ******************************************************************************/
 740:StdPeriphLib/inc/core_cm3.h **** 
 741:StdPeriphLib/inc/core_cm3.h **** #if defined ( __CC_ARM   )
 742:StdPeriphLib/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:StdPeriphLib/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:StdPeriphLib/inc/core_cm3.h **** 
 745:StdPeriphLib/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:StdPeriphLib/inc/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:StdPeriphLib/inc/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:StdPeriphLib/inc/core_cm3.h **** 
 749:StdPeriphLib/inc/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:StdPeriphLib/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:StdPeriphLib/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:StdPeriphLib/inc/core_cm3.h **** 
 753:StdPeriphLib/inc/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:StdPeriphLib/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:StdPeriphLib/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:StdPeriphLib/inc/core_cm3.h **** 
 757:StdPeriphLib/inc/core_cm3.h **** #endif
 758:StdPeriphLib/inc/core_cm3.h **** 
 759:StdPeriphLib/inc/core_cm3.h **** 
 760:StdPeriphLib/inc/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:StdPeriphLib/inc/core_cm3.h **** 
 762:StdPeriphLib/inc/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:StdPeriphLib/inc/core_cm3.h **** /* ARM armcc specific functions */
 764:StdPeriphLib/inc/core_cm3.h **** 
 765:StdPeriphLib/inc/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:StdPeriphLib/inc/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:StdPeriphLib/inc/core_cm3.h **** 
 768:StdPeriphLib/inc/core_cm3.h **** #define __NOP                             __nop
 769:StdPeriphLib/inc/core_cm3.h **** #define __WFI                             __wfi
 770:StdPeriphLib/inc/core_cm3.h **** #define __WFE                             __wfe
 771:StdPeriphLib/inc/core_cm3.h **** #define __SEV                             __sev
 772:StdPeriphLib/inc/core_cm3.h **** #define __ISB()                           __isb(0)
 773:StdPeriphLib/inc/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:StdPeriphLib/inc/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:StdPeriphLib/inc/core_cm3.h **** #define __REV                             __rev
 776:StdPeriphLib/inc/core_cm3.h **** #define __RBIT                            __rbit
 777:StdPeriphLib/inc/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:StdPeriphLib/inc/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:StdPeriphLib/inc/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:StdPeriphLib/inc/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:StdPeriphLib/inc/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:StdPeriphLib/inc/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:StdPeriphLib/inc/core_cm3.h **** 
 784:StdPeriphLib/inc/core_cm3.h **** 
 785:StdPeriphLib/inc/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:StdPeriphLib/inc/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:StdPeriphLib/inc/core_cm3.h **** 
 790:StdPeriphLib/inc/core_cm3.h **** 
 791:StdPeriphLib/inc/core_cm3.h **** /**
 792:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:StdPeriphLib/inc/core_cm3.h ****  *
 794:StdPeriphLib/inc/core_cm3.h ****  * @return ProcessStackPointer
 795:StdPeriphLib/inc/core_cm3.h ****  *
 796:StdPeriphLib/inc/core_cm3.h ****  * Return the actual process stack pointer
 797:StdPeriphLib/inc/core_cm3.h ****  */
 798:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:StdPeriphLib/inc/core_cm3.h **** 
 800:StdPeriphLib/inc/core_cm3.h **** /**
 801:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:StdPeriphLib/inc/core_cm3.h ****  *
 803:StdPeriphLib/inc/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:StdPeriphLib/inc/core_cm3.h ****  *
 805:StdPeriphLib/inc/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:StdPeriphLib/inc/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:StdPeriphLib/inc/core_cm3.h ****  */
 808:StdPeriphLib/inc/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:StdPeriphLib/inc/core_cm3.h **** 
 810:StdPeriphLib/inc/core_cm3.h **** /**
 811:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:StdPeriphLib/inc/core_cm3.h ****  *
 813:StdPeriphLib/inc/core_cm3.h ****  * @return Main Stack Pointer
 814:StdPeriphLib/inc/core_cm3.h ****  *
 815:StdPeriphLib/inc/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:StdPeriphLib/inc/core_cm3.h ****  * Cortex processor register
 817:StdPeriphLib/inc/core_cm3.h ****  */
 818:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:StdPeriphLib/inc/core_cm3.h **** 
 820:StdPeriphLib/inc/core_cm3.h **** /**
 821:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:StdPeriphLib/inc/core_cm3.h ****  *
 823:StdPeriphLib/inc/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:StdPeriphLib/inc/core_cm3.h ****  *
 825:StdPeriphLib/inc/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:StdPeriphLib/inc/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:StdPeriphLib/inc/core_cm3.h ****  */
 828:StdPeriphLib/inc/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:StdPeriphLib/inc/core_cm3.h **** 
 830:StdPeriphLib/inc/core_cm3.h **** /**
 831:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:StdPeriphLib/inc/core_cm3.h ****  *
 833:StdPeriphLib/inc/core_cm3.h ****  * @param   value  value to reverse
 834:StdPeriphLib/inc/core_cm3.h ****  * @return         reversed value
 835:StdPeriphLib/inc/core_cm3.h ****  *
 836:StdPeriphLib/inc/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:StdPeriphLib/inc/core_cm3.h ****  */
 838:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:StdPeriphLib/inc/core_cm3.h **** 
 840:StdPeriphLib/inc/core_cm3.h **** /**
 841:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:StdPeriphLib/inc/core_cm3.h ****  *
 843:StdPeriphLib/inc/core_cm3.h ****  * @param   value  value to reverse
 844:StdPeriphLib/inc/core_cm3.h ****  * @return         reversed value
 845:StdPeriphLib/inc/core_cm3.h ****  *
 846:StdPeriphLib/inc/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:StdPeriphLib/inc/core_cm3.h ****  */
 848:StdPeriphLib/inc/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:StdPeriphLib/inc/core_cm3.h **** 
 850:StdPeriphLib/inc/core_cm3.h **** 
 851:StdPeriphLib/inc/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:StdPeriphLib/inc/core_cm3.h **** 
 853:StdPeriphLib/inc/core_cm3.h **** /**
 854:StdPeriphLib/inc/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:StdPeriphLib/inc/core_cm3.h ****  *
 856:StdPeriphLib/inc/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:StdPeriphLib/inc/core_cm3.h ****  */
 858:StdPeriphLib/inc/core_cm3.h **** extern void __CLREX(void);
 859:StdPeriphLib/inc/core_cm3.h **** 
 860:StdPeriphLib/inc/core_cm3.h **** /**
 861:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Base Priority value
 862:StdPeriphLib/inc/core_cm3.h ****  *
 863:StdPeriphLib/inc/core_cm3.h ****  * @return BasePriority
 864:StdPeriphLib/inc/core_cm3.h ****  *
 865:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the base priority register
 866:StdPeriphLib/inc/core_cm3.h ****  */
 867:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:StdPeriphLib/inc/core_cm3.h **** 
 869:StdPeriphLib/inc/core_cm3.h **** /**
 870:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Base Priority value
 871:StdPeriphLib/inc/core_cm3.h ****  *
 872:StdPeriphLib/inc/core_cm3.h ****  * @param  basePri  BasePriority
 873:StdPeriphLib/inc/core_cm3.h ****  *
 874:StdPeriphLib/inc/core_cm3.h ****  * Set the base priority register
 875:StdPeriphLib/inc/core_cm3.h ****  */
 876:StdPeriphLib/inc/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:StdPeriphLib/inc/core_cm3.h **** 
 878:StdPeriphLib/inc/core_cm3.h **** /**
 879:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:StdPeriphLib/inc/core_cm3.h ****  *
 881:StdPeriphLib/inc/core_cm3.h ****  * @return PriMask
 882:StdPeriphLib/inc/core_cm3.h ****  *
 883:StdPeriphLib/inc/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:StdPeriphLib/inc/core_cm3.h ****  */
 885:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:StdPeriphLib/inc/core_cm3.h **** 
 887:StdPeriphLib/inc/core_cm3.h **** /**
 888:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:StdPeriphLib/inc/core_cm3.h ****  *
 890:StdPeriphLib/inc/core_cm3.h ****  * @param   priMask  PriMask
 891:StdPeriphLib/inc/core_cm3.h ****  *
 892:StdPeriphLib/inc/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:StdPeriphLib/inc/core_cm3.h ****  */
 894:StdPeriphLib/inc/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:StdPeriphLib/inc/core_cm3.h **** 
 896:StdPeriphLib/inc/core_cm3.h **** /**
 897:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:StdPeriphLib/inc/core_cm3.h ****  *
 899:StdPeriphLib/inc/core_cm3.h ****  * @return FaultMask
 900:StdPeriphLib/inc/core_cm3.h ****  *
 901:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the fault mask register
 902:StdPeriphLib/inc/core_cm3.h ****  */
 903:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:StdPeriphLib/inc/core_cm3.h **** 
 905:StdPeriphLib/inc/core_cm3.h **** /**
 906:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:StdPeriphLib/inc/core_cm3.h ****  *
 908:StdPeriphLib/inc/core_cm3.h ****  * @param  faultMask faultMask value
 909:StdPeriphLib/inc/core_cm3.h ****  *
 910:StdPeriphLib/inc/core_cm3.h ****  * Set the fault mask register
 911:StdPeriphLib/inc/core_cm3.h ****  */
 912:StdPeriphLib/inc/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:StdPeriphLib/inc/core_cm3.h **** 
 914:StdPeriphLib/inc/core_cm3.h **** /**
 915:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Control Register value
 916:StdPeriphLib/inc/core_cm3.h ****  * 
 917:StdPeriphLib/inc/core_cm3.h ****  * @return Control value
 918:StdPeriphLib/inc/core_cm3.h ****  *
 919:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the control register
 920:StdPeriphLib/inc/core_cm3.h ****  */
 921:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:StdPeriphLib/inc/core_cm3.h **** 
 923:StdPeriphLib/inc/core_cm3.h **** /**
 924:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Control Register value
 925:StdPeriphLib/inc/core_cm3.h ****  *
 926:StdPeriphLib/inc/core_cm3.h ****  * @param  control  Control value
 927:StdPeriphLib/inc/core_cm3.h ****  *
 928:StdPeriphLib/inc/core_cm3.h ****  * Set the control register
 929:StdPeriphLib/inc/core_cm3.h ****  */
 930:StdPeriphLib/inc/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:StdPeriphLib/inc/core_cm3.h **** 
 932:StdPeriphLib/inc/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:StdPeriphLib/inc/core_cm3.h **** 
 934:StdPeriphLib/inc/core_cm3.h **** /**
 935:StdPeriphLib/inc/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:StdPeriphLib/inc/core_cm3.h ****  *
 937:StdPeriphLib/inc/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:StdPeriphLib/inc/core_cm3.h ****  */
 939:StdPeriphLib/inc/core_cm3.h **** #define __CLREX                           __clrex
 940:StdPeriphLib/inc/core_cm3.h **** 
 941:StdPeriphLib/inc/core_cm3.h **** /**
 942:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Base Priority value
 943:StdPeriphLib/inc/core_cm3.h ****  *
 944:StdPeriphLib/inc/core_cm3.h ****  * @return BasePriority
 945:StdPeriphLib/inc/core_cm3.h ****  *
 946:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the base priority register
 947:StdPeriphLib/inc/core_cm3.h ****  */
 948:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:StdPeriphLib/inc/core_cm3.h **** {
 950:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:StdPeriphLib/inc/core_cm3.h ****   return(__regBasePri);
 952:StdPeriphLib/inc/core_cm3.h **** }
 953:StdPeriphLib/inc/core_cm3.h **** 
 954:StdPeriphLib/inc/core_cm3.h **** /**
 955:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Base Priority value
 956:StdPeriphLib/inc/core_cm3.h ****  *
 957:StdPeriphLib/inc/core_cm3.h ****  * @param  basePri  BasePriority
 958:StdPeriphLib/inc/core_cm3.h ****  *
 959:StdPeriphLib/inc/core_cm3.h ****  * Set the base priority register
 960:StdPeriphLib/inc/core_cm3.h ****  */
 961:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:StdPeriphLib/inc/core_cm3.h **** {
 963:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:StdPeriphLib/inc/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:StdPeriphLib/inc/core_cm3.h **** }
 966:StdPeriphLib/inc/core_cm3.h **** 
 967:StdPeriphLib/inc/core_cm3.h **** /**
 968:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:StdPeriphLib/inc/core_cm3.h ****  *
 970:StdPeriphLib/inc/core_cm3.h ****  * @return PriMask
 971:StdPeriphLib/inc/core_cm3.h ****  *
 972:StdPeriphLib/inc/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:StdPeriphLib/inc/core_cm3.h ****  */
 974:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:StdPeriphLib/inc/core_cm3.h **** {
 976:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:StdPeriphLib/inc/core_cm3.h ****   return(__regPriMask);
 978:StdPeriphLib/inc/core_cm3.h **** }
 979:StdPeriphLib/inc/core_cm3.h **** 
 980:StdPeriphLib/inc/core_cm3.h **** /**
 981:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:StdPeriphLib/inc/core_cm3.h ****  *
 983:StdPeriphLib/inc/core_cm3.h ****  * @param  priMask  PriMask
 984:StdPeriphLib/inc/core_cm3.h ****  *
 985:StdPeriphLib/inc/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:StdPeriphLib/inc/core_cm3.h ****  */
 987:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:StdPeriphLib/inc/core_cm3.h **** {
 989:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:StdPeriphLib/inc/core_cm3.h ****   __regPriMask = (priMask);
 991:StdPeriphLib/inc/core_cm3.h **** }
 992:StdPeriphLib/inc/core_cm3.h **** 
 993:StdPeriphLib/inc/core_cm3.h **** /**
 994:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:StdPeriphLib/inc/core_cm3.h ****  *
 996:StdPeriphLib/inc/core_cm3.h ****  * @return FaultMask
 997:StdPeriphLib/inc/core_cm3.h ****  *
 998:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the fault mask register
 999:StdPeriphLib/inc/core_cm3.h ****  */
1000:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:StdPeriphLib/inc/core_cm3.h **** {
1002:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:StdPeriphLib/inc/core_cm3.h ****   return(__regFaultMask);
1004:StdPeriphLib/inc/core_cm3.h **** }
1005:StdPeriphLib/inc/core_cm3.h **** 
1006:StdPeriphLib/inc/core_cm3.h **** /**
1007:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:StdPeriphLib/inc/core_cm3.h ****  *
1009:StdPeriphLib/inc/core_cm3.h ****  * @param  faultMask  faultMask value
1010:StdPeriphLib/inc/core_cm3.h ****  *
1011:StdPeriphLib/inc/core_cm3.h ****  * Set the fault mask register
1012:StdPeriphLib/inc/core_cm3.h ****  */
1013:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:StdPeriphLib/inc/core_cm3.h **** {
1015:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:StdPeriphLib/inc/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:StdPeriphLib/inc/core_cm3.h **** }
1018:StdPeriphLib/inc/core_cm3.h **** 
1019:StdPeriphLib/inc/core_cm3.h **** /**
1020:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Control Register value
1021:StdPeriphLib/inc/core_cm3.h ****  * 
1022:StdPeriphLib/inc/core_cm3.h ****  * @return Control value
1023:StdPeriphLib/inc/core_cm3.h ****  *
1024:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the control register
1025:StdPeriphLib/inc/core_cm3.h ****  */
1026:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:StdPeriphLib/inc/core_cm3.h **** {
1028:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:StdPeriphLib/inc/core_cm3.h ****   return(__regControl);
1030:StdPeriphLib/inc/core_cm3.h **** }
1031:StdPeriphLib/inc/core_cm3.h **** 
1032:StdPeriphLib/inc/core_cm3.h **** /**
1033:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Control Register value
1034:StdPeriphLib/inc/core_cm3.h ****  *
1035:StdPeriphLib/inc/core_cm3.h ****  * @param  control  Control value
1036:StdPeriphLib/inc/core_cm3.h ****  *
1037:StdPeriphLib/inc/core_cm3.h ****  * Set the control register
1038:StdPeriphLib/inc/core_cm3.h ****  */
1039:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:StdPeriphLib/inc/core_cm3.h **** {
1041:StdPeriphLib/inc/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:StdPeriphLib/inc/core_cm3.h ****   __regControl = control;
1043:StdPeriphLib/inc/core_cm3.h **** }
1044:StdPeriphLib/inc/core_cm3.h **** 
1045:StdPeriphLib/inc/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:StdPeriphLib/inc/core_cm3.h **** 
1047:StdPeriphLib/inc/core_cm3.h **** 
1048:StdPeriphLib/inc/core_cm3.h **** 
1049:StdPeriphLib/inc/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:StdPeriphLib/inc/core_cm3.h **** /* IAR iccarm specific functions */
1051:StdPeriphLib/inc/core_cm3.h **** 
1052:StdPeriphLib/inc/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:StdPeriphLib/inc/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:StdPeriphLib/inc/core_cm3.h **** 
1055:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:StdPeriphLib/inc/core_cm3.h **** 
1058:StdPeriphLib/inc/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:StdPeriphLib/inc/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:StdPeriphLib/inc/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:StdPeriphLib/inc/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:StdPeriphLib/inc/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:StdPeriphLib/inc/core_cm3.h **** 
1064:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:StdPeriphLib/inc/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:StdPeriphLib/inc/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:StdPeriphLib/inc/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:StdPeriphLib/inc/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:StdPeriphLib/inc/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:StdPeriphLib/inc/core_cm3.h **** 
1076:StdPeriphLib/inc/core_cm3.h **** 
1077:StdPeriphLib/inc/core_cm3.h **** /**
1078:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:StdPeriphLib/inc/core_cm3.h ****  *
1080:StdPeriphLib/inc/core_cm3.h ****  * @return ProcessStackPointer
1081:StdPeriphLib/inc/core_cm3.h ****  *
1082:StdPeriphLib/inc/core_cm3.h ****  * Return the actual process stack pointer
1083:StdPeriphLib/inc/core_cm3.h ****  */
1084:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:StdPeriphLib/inc/core_cm3.h **** 
1086:StdPeriphLib/inc/core_cm3.h **** /**
1087:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:StdPeriphLib/inc/core_cm3.h ****  *
1089:StdPeriphLib/inc/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:StdPeriphLib/inc/core_cm3.h ****  *
1091:StdPeriphLib/inc/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:StdPeriphLib/inc/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:StdPeriphLib/inc/core_cm3.h ****  */
1094:StdPeriphLib/inc/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:StdPeriphLib/inc/core_cm3.h **** 
1096:StdPeriphLib/inc/core_cm3.h **** /**
1097:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:StdPeriphLib/inc/core_cm3.h ****  *
1099:StdPeriphLib/inc/core_cm3.h ****  * @return Main Stack Pointer
1100:StdPeriphLib/inc/core_cm3.h ****  *
1101:StdPeriphLib/inc/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:StdPeriphLib/inc/core_cm3.h ****  * Cortex processor register
1103:StdPeriphLib/inc/core_cm3.h ****  */
1104:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:StdPeriphLib/inc/core_cm3.h **** 
1106:StdPeriphLib/inc/core_cm3.h **** /**
1107:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:StdPeriphLib/inc/core_cm3.h ****  *
1109:StdPeriphLib/inc/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:StdPeriphLib/inc/core_cm3.h ****  *
1111:StdPeriphLib/inc/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:StdPeriphLib/inc/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:StdPeriphLib/inc/core_cm3.h ****  */
1114:StdPeriphLib/inc/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:StdPeriphLib/inc/core_cm3.h **** 
1116:StdPeriphLib/inc/core_cm3.h **** /**
1117:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:StdPeriphLib/inc/core_cm3.h ****  *
1119:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to reverse
1120:StdPeriphLib/inc/core_cm3.h ****  * @return        reversed value
1121:StdPeriphLib/inc/core_cm3.h ****  *
1122:StdPeriphLib/inc/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:StdPeriphLib/inc/core_cm3.h ****  */
1124:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:StdPeriphLib/inc/core_cm3.h **** 
1126:StdPeriphLib/inc/core_cm3.h **** /**
1127:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse bit order of value
1128:StdPeriphLib/inc/core_cm3.h ****  *
1129:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to reverse
1130:StdPeriphLib/inc/core_cm3.h ****  * @return        reversed value
1131:StdPeriphLib/inc/core_cm3.h ****  *
1132:StdPeriphLib/inc/core_cm3.h ****  * Reverse bit order of value
1133:StdPeriphLib/inc/core_cm3.h ****  */
1134:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:StdPeriphLib/inc/core_cm3.h **** 
1136:StdPeriphLib/inc/core_cm3.h **** /**
1137:StdPeriphLib/inc/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:StdPeriphLib/inc/core_cm3.h ****  *
1139:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1140:StdPeriphLib/inc/core_cm3.h ****  * @return        value of (*address)
1141:StdPeriphLib/inc/core_cm3.h ****  *
1142:StdPeriphLib/inc/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:StdPeriphLib/inc/core_cm3.h ****  */
1144:StdPeriphLib/inc/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:StdPeriphLib/inc/core_cm3.h **** 
1146:StdPeriphLib/inc/core_cm3.h **** /**
1147:StdPeriphLib/inc/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:StdPeriphLib/inc/core_cm3.h ****  *
1149:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1150:StdPeriphLib/inc/core_cm3.h ****  * @return        value of (*address)
1151:StdPeriphLib/inc/core_cm3.h ****  *
1152:StdPeriphLib/inc/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:StdPeriphLib/inc/core_cm3.h ****  */
1154:StdPeriphLib/inc/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:StdPeriphLib/inc/core_cm3.h **** 
1156:StdPeriphLib/inc/core_cm3.h **** /**
1157:StdPeriphLib/inc/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:StdPeriphLib/inc/core_cm3.h ****  *
1159:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1160:StdPeriphLib/inc/core_cm3.h ****  * @return        value of (*address)
1161:StdPeriphLib/inc/core_cm3.h ****  *
1162:StdPeriphLib/inc/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:StdPeriphLib/inc/core_cm3.h ****  */
1164:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:StdPeriphLib/inc/core_cm3.h **** 
1166:StdPeriphLib/inc/core_cm3.h **** /**
1167:StdPeriphLib/inc/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:StdPeriphLib/inc/core_cm3.h ****  *
1169:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to store
1170:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1171:StdPeriphLib/inc/core_cm3.h ****  * @return        successful / failed
1172:StdPeriphLib/inc/core_cm3.h ****  *
1173:StdPeriphLib/inc/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:StdPeriphLib/inc/core_cm3.h ****  */
1175:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:StdPeriphLib/inc/core_cm3.h **** 
1177:StdPeriphLib/inc/core_cm3.h **** /**
1178:StdPeriphLib/inc/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:StdPeriphLib/inc/core_cm3.h ****  *
1180:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to store
1181:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1182:StdPeriphLib/inc/core_cm3.h ****  * @return        successful / failed
1183:StdPeriphLib/inc/core_cm3.h ****  *
1184:StdPeriphLib/inc/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:StdPeriphLib/inc/core_cm3.h ****  */
1186:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:StdPeriphLib/inc/core_cm3.h **** 
1188:StdPeriphLib/inc/core_cm3.h **** /**
1189:StdPeriphLib/inc/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:StdPeriphLib/inc/core_cm3.h ****  *
1191:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to store
1192:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1193:StdPeriphLib/inc/core_cm3.h ****  * @return        successful / failed
1194:StdPeriphLib/inc/core_cm3.h ****  *
1195:StdPeriphLib/inc/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:StdPeriphLib/inc/core_cm3.h ****  */
1197:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:StdPeriphLib/inc/core_cm3.h **** 
1199:StdPeriphLib/inc/core_cm3.h **** 
1200:StdPeriphLib/inc/core_cm3.h **** 
1201:StdPeriphLib/inc/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:StdPeriphLib/inc/core_cm3.h **** /* GNU gcc specific functions */
1203:StdPeriphLib/inc/core_cm3.h **** 
1204:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:StdPeriphLib/inc/core_cm3.h **** 
1207:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:StdPeriphLib/inc/core_cm3.h **** 
1210:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:StdPeriphLib/inc/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:StdPeriphLib/inc/core_cm3.h **** 
1219:StdPeriphLib/inc/core_cm3.h **** 
1220:StdPeriphLib/inc/core_cm3.h **** /**
1221:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:StdPeriphLib/inc/core_cm3.h ****  *
1223:StdPeriphLib/inc/core_cm3.h ****  * @return ProcessStackPointer
1224:StdPeriphLib/inc/core_cm3.h ****  *
1225:StdPeriphLib/inc/core_cm3.h ****  * Return the actual process stack pointer
1226:StdPeriphLib/inc/core_cm3.h ****  */
1227:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:StdPeriphLib/inc/core_cm3.h **** 
1229:StdPeriphLib/inc/core_cm3.h **** /**
1230:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:StdPeriphLib/inc/core_cm3.h ****  *
1232:StdPeriphLib/inc/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:StdPeriphLib/inc/core_cm3.h ****  *
1234:StdPeriphLib/inc/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:StdPeriphLib/inc/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:StdPeriphLib/inc/core_cm3.h ****  */
1237:StdPeriphLib/inc/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:StdPeriphLib/inc/core_cm3.h **** 
1239:StdPeriphLib/inc/core_cm3.h **** /**
1240:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:StdPeriphLib/inc/core_cm3.h ****  *
1242:StdPeriphLib/inc/core_cm3.h ****  * @return Main Stack Pointer
1243:StdPeriphLib/inc/core_cm3.h ****  *
1244:StdPeriphLib/inc/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:StdPeriphLib/inc/core_cm3.h ****  * Cortex processor register
1246:StdPeriphLib/inc/core_cm3.h ****  */
1247:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:StdPeriphLib/inc/core_cm3.h **** 
1249:StdPeriphLib/inc/core_cm3.h **** /**
1250:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:StdPeriphLib/inc/core_cm3.h ****  *
1252:StdPeriphLib/inc/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:StdPeriphLib/inc/core_cm3.h ****  *
1254:StdPeriphLib/inc/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:StdPeriphLib/inc/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:StdPeriphLib/inc/core_cm3.h ****  */
1257:StdPeriphLib/inc/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:StdPeriphLib/inc/core_cm3.h **** 
1259:StdPeriphLib/inc/core_cm3.h **** /**
1260:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Base Priority value
1261:StdPeriphLib/inc/core_cm3.h ****  *
1262:StdPeriphLib/inc/core_cm3.h ****  * @return BasePriority
1263:StdPeriphLib/inc/core_cm3.h ****  *
1264:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the base priority register
1265:StdPeriphLib/inc/core_cm3.h ****  */
1266:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:StdPeriphLib/inc/core_cm3.h **** 
1268:StdPeriphLib/inc/core_cm3.h **** /**
1269:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Base Priority value
1270:StdPeriphLib/inc/core_cm3.h ****  *
1271:StdPeriphLib/inc/core_cm3.h ****  * @param  basePri  BasePriority
1272:StdPeriphLib/inc/core_cm3.h ****  *
1273:StdPeriphLib/inc/core_cm3.h ****  * Set the base priority register
1274:StdPeriphLib/inc/core_cm3.h ****  */
1275:StdPeriphLib/inc/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:StdPeriphLib/inc/core_cm3.h **** 
1277:StdPeriphLib/inc/core_cm3.h **** /**
1278:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:StdPeriphLib/inc/core_cm3.h ****  *
1280:StdPeriphLib/inc/core_cm3.h ****  * @return PriMask
1281:StdPeriphLib/inc/core_cm3.h ****  *
1282:StdPeriphLib/inc/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:StdPeriphLib/inc/core_cm3.h ****  */
1284:StdPeriphLib/inc/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:StdPeriphLib/inc/core_cm3.h **** 
1286:StdPeriphLib/inc/core_cm3.h **** /**
1287:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:StdPeriphLib/inc/core_cm3.h ****  *
1289:StdPeriphLib/inc/core_cm3.h ****  * @param  priMask  PriMask
1290:StdPeriphLib/inc/core_cm3.h ****  *
1291:StdPeriphLib/inc/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:StdPeriphLib/inc/core_cm3.h ****  */
1293:StdPeriphLib/inc/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:StdPeriphLib/inc/core_cm3.h **** 
1295:StdPeriphLib/inc/core_cm3.h **** /**
1296:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:StdPeriphLib/inc/core_cm3.h ****  *
1298:StdPeriphLib/inc/core_cm3.h ****  * @return FaultMask
1299:StdPeriphLib/inc/core_cm3.h ****  *
1300:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the fault mask register
1301:StdPeriphLib/inc/core_cm3.h ****  */
1302:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:StdPeriphLib/inc/core_cm3.h **** 
1304:StdPeriphLib/inc/core_cm3.h **** /**
1305:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:StdPeriphLib/inc/core_cm3.h ****  *
1307:StdPeriphLib/inc/core_cm3.h ****  * @param  faultMask  faultMask value
1308:StdPeriphLib/inc/core_cm3.h ****  *
1309:StdPeriphLib/inc/core_cm3.h ****  * Set the fault mask register
1310:StdPeriphLib/inc/core_cm3.h ****  */
1311:StdPeriphLib/inc/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:StdPeriphLib/inc/core_cm3.h **** 
1313:StdPeriphLib/inc/core_cm3.h **** /**
1314:StdPeriphLib/inc/core_cm3.h ****  * @brief  Return the Control Register value
1315:StdPeriphLib/inc/core_cm3.h **** * 
1316:StdPeriphLib/inc/core_cm3.h **** *  @return Control value
1317:StdPeriphLib/inc/core_cm3.h ****  *
1318:StdPeriphLib/inc/core_cm3.h ****  * Return the content of the control register
1319:StdPeriphLib/inc/core_cm3.h ****  */
1320:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:StdPeriphLib/inc/core_cm3.h **** 
1322:StdPeriphLib/inc/core_cm3.h **** /**
1323:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Control Register value
1324:StdPeriphLib/inc/core_cm3.h ****  *
1325:StdPeriphLib/inc/core_cm3.h ****  * @param  control  Control value
1326:StdPeriphLib/inc/core_cm3.h ****  *
1327:StdPeriphLib/inc/core_cm3.h ****  * Set the control register
1328:StdPeriphLib/inc/core_cm3.h ****  */
1329:StdPeriphLib/inc/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:StdPeriphLib/inc/core_cm3.h **** 
1331:StdPeriphLib/inc/core_cm3.h **** /**
1332:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:StdPeriphLib/inc/core_cm3.h ****  *
1334:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to reverse
1335:StdPeriphLib/inc/core_cm3.h ****  * @return        reversed value
1336:StdPeriphLib/inc/core_cm3.h ****  *
1337:StdPeriphLib/inc/core_cm3.h ****  * Reverse byte order in integer value
1338:StdPeriphLib/inc/core_cm3.h ****  */
1339:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:StdPeriphLib/inc/core_cm3.h **** 
1341:StdPeriphLib/inc/core_cm3.h **** /**
1342:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:StdPeriphLib/inc/core_cm3.h ****  *
1344:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to reverse
1345:StdPeriphLib/inc/core_cm3.h ****  * @return        reversed value
1346:StdPeriphLib/inc/core_cm3.h ****  *
1347:StdPeriphLib/inc/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:StdPeriphLib/inc/core_cm3.h ****  */
1349:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:StdPeriphLib/inc/core_cm3.h **** 
1351:StdPeriphLib/inc/core_cm3.h **** /**
1352:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:StdPeriphLib/inc/core_cm3.h ****  *
1354:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to reverse
1355:StdPeriphLib/inc/core_cm3.h ****  * @return        reversed value
1356:StdPeriphLib/inc/core_cm3.h ****  *
1357:StdPeriphLib/inc/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:StdPeriphLib/inc/core_cm3.h ****  */
1359:StdPeriphLib/inc/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:StdPeriphLib/inc/core_cm3.h **** 
1361:StdPeriphLib/inc/core_cm3.h **** /**
1362:StdPeriphLib/inc/core_cm3.h ****  * @brief  Reverse bit order of value
1363:StdPeriphLib/inc/core_cm3.h ****  *
1364:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to reverse
1365:StdPeriphLib/inc/core_cm3.h ****  * @return        reversed value
1366:StdPeriphLib/inc/core_cm3.h ****  *
1367:StdPeriphLib/inc/core_cm3.h ****  * Reverse bit order of value
1368:StdPeriphLib/inc/core_cm3.h ****  */
1369:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:StdPeriphLib/inc/core_cm3.h **** 
1371:StdPeriphLib/inc/core_cm3.h **** /**
1372:StdPeriphLib/inc/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:StdPeriphLib/inc/core_cm3.h ****  *
1374:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1375:StdPeriphLib/inc/core_cm3.h ****  * @return        value of (*address)
1376:StdPeriphLib/inc/core_cm3.h ****  *
1377:StdPeriphLib/inc/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:StdPeriphLib/inc/core_cm3.h ****  */
1379:StdPeriphLib/inc/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:StdPeriphLib/inc/core_cm3.h **** 
1381:StdPeriphLib/inc/core_cm3.h **** /**
1382:StdPeriphLib/inc/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:StdPeriphLib/inc/core_cm3.h ****  *
1384:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1385:StdPeriphLib/inc/core_cm3.h ****  * @return        value of (*address)
1386:StdPeriphLib/inc/core_cm3.h ****  *
1387:StdPeriphLib/inc/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:StdPeriphLib/inc/core_cm3.h ****  */
1389:StdPeriphLib/inc/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:StdPeriphLib/inc/core_cm3.h **** 
1391:StdPeriphLib/inc/core_cm3.h **** /**
1392:StdPeriphLib/inc/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:StdPeriphLib/inc/core_cm3.h ****  *
1394:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1395:StdPeriphLib/inc/core_cm3.h ****  * @return        value of (*address)
1396:StdPeriphLib/inc/core_cm3.h ****  *
1397:StdPeriphLib/inc/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:StdPeriphLib/inc/core_cm3.h ****  */
1399:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:StdPeriphLib/inc/core_cm3.h **** 
1401:StdPeriphLib/inc/core_cm3.h **** /**
1402:StdPeriphLib/inc/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:StdPeriphLib/inc/core_cm3.h ****  *
1404:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to store
1405:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1406:StdPeriphLib/inc/core_cm3.h ****  * @return        successful / failed
1407:StdPeriphLib/inc/core_cm3.h ****  *
1408:StdPeriphLib/inc/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:StdPeriphLib/inc/core_cm3.h ****  */
1410:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:StdPeriphLib/inc/core_cm3.h **** 
1412:StdPeriphLib/inc/core_cm3.h **** /**
1413:StdPeriphLib/inc/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:StdPeriphLib/inc/core_cm3.h ****  *
1415:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to store
1416:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1417:StdPeriphLib/inc/core_cm3.h ****  * @return        successful / failed
1418:StdPeriphLib/inc/core_cm3.h ****  *
1419:StdPeriphLib/inc/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:StdPeriphLib/inc/core_cm3.h ****  */
1421:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:StdPeriphLib/inc/core_cm3.h **** 
1423:StdPeriphLib/inc/core_cm3.h **** /**
1424:StdPeriphLib/inc/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:StdPeriphLib/inc/core_cm3.h ****  *
1426:StdPeriphLib/inc/core_cm3.h ****  * @param  value  value to store
1427:StdPeriphLib/inc/core_cm3.h ****  * @param  *addr  address pointer
1428:StdPeriphLib/inc/core_cm3.h ****  * @return        successful / failed
1429:StdPeriphLib/inc/core_cm3.h ****  *
1430:StdPeriphLib/inc/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:StdPeriphLib/inc/core_cm3.h ****  */
1432:StdPeriphLib/inc/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:StdPeriphLib/inc/core_cm3.h **** 
1434:StdPeriphLib/inc/core_cm3.h **** 
1435:StdPeriphLib/inc/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:StdPeriphLib/inc/core_cm3.h **** /* TASKING carm specific functions */
1437:StdPeriphLib/inc/core_cm3.h **** 
1438:StdPeriphLib/inc/core_cm3.h **** /*
1439:StdPeriphLib/inc/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:StdPeriphLib/inc/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:StdPeriphLib/inc/core_cm3.h ****  * Including the CMSIS ones.
1442:StdPeriphLib/inc/core_cm3.h ****  */
1443:StdPeriphLib/inc/core_cm3.h **** 
1444:StdPeriphLib/inc/core_cm3.h **** #endif
1445:StdPeriphLib/inc/core_cm3.h **** 
1446:StdPeriphLib/inc/core_cm3.h **** 
1447:StdPeriphLib/inc/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:StdPeriphLib/inc/core_cm3.h ****   Core  Function Interface containing:
1449:StdPeriphLib/inc/core_cm3.h ****   - Core NVIC Functions
1450:StdPeriphLib/inc/core_cm3.h ****   - Core SysTick Functions
1451:StdPeriphLib/inc/core_cm3.h ****   - Core Reset Functions
1452:StdPeriphLib/inc/core_cm3.h **** */
1453:StdPeriphLib/inc/core_cm3.h **** /*@{*/
1454:StdPeriphLib/inc/core_cm3.h **** 
1455:StdPeriphLib/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:StdPeriphLib/inc/core_cm3.h **** 
1457:StdPeriphLib/inc/core_cm3.h **** /**
1458:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:StdPeriphLib/inc/core_cm3.h ****  *
1460:StdPeriphLib/inc/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:StdPeriphLib/inc/core_cm3.h ****  *
1462:StdPeriphLib/inc/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:StdPeriphLib/inc/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:StdPeriphLib/inc/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:StdPeriphLib/inc/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:StdPeriphLib/inc/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:StdPeriphLib/inc/core_cm3.h ****  */
1468:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:StdPeriphLib/inc/core_cm3.h **** {
1470:StdPeriphLib/inc/core_cm3.h ****   uint32_t reg_value;
1471:StdPeriphLib/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:StdPeriphLib/inc/core_cm3.h ****   
1473:StdPeriphLib/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:StdPeriphLib/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:StdPeriphLib/inc/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:StdPeriphLib/inc/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:StdPeriphLib/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:StdPeriphLib/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:StdPeriphLib/inc/core_cm3.h **** }
1480:StdPeriphLib/inc/core_cm3.h **** 
1481:StdPeriphLib/inc/core_cm3.h **** /**
1482:StdPeriphLib/inc/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:StdPeriphLib/inc/core_cm3.h ****  *
1484:StdPeriphLib/inc/core_cm3.h ****  * @return priority grouping field 
1485:StdPeriphLib/inc/core_cm3.h ****  *
1486:StdPeriphLib/inc/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:StdPeriphLib/inc/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:StdPeriphLib/inc/core_cm3.h ****  */
1489:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:StdPeriphLib/inc/core_cm3.h **** {
1491:StdPeriphLib/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:StdPeriphLib/inc/core_cm3.h **** }
1493:StdPeriphLib/inc/core_cm3.h **** 
1494:StdPeriphLib/inc/core_cm3.h **** /**
1495:StdPeriphLib/inc/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:StdPeriphLib/inc/core_cm3.h ****  *
1497:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:StdPeriphLib/inc/core_cm3.h ****  *
1499:StdPeriphLib/inc/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:StdPeriphLib/inc/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:StdPeriphLib/inc/core_cm3.h ****  */
1502:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:StdPeriphLib/inc/core_cm3.h **** {
1504:StdPeriphLib/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:StdPeriphLib/inc/core_cm3.h **** }
1506:StdPeriphLib/inc/core_cm3.h **** 
1507:StdPeriphLib/inc/core_cm3.h **** /**
1508:StdPeriphLib/inc/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:StdPeriphLib/inc/core_cm3.h ****  * 
1510:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:StdPeriphLib/inc/core_cm3.h ****  * 
1512:StdPeriphLib/inc/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:StdPeriphLib/inc/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:StdPeriphLib/inc/core_cm3.h ****  */
1515:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:StdPeriphLib/inc/core_cm3.h **** {
1517:StdPeriphLib/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:StdPeriphLib/inc/core_cm3.h **** }
1519:StdPeriphLib/inc/core_cm3.h **** 
1520:StdPeriphLib/inc/core_cm3.h **** /**
1521:StdPeriphLib/inc/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:StdPeriphLib/inc/core_cm3.h ****  * 
1523:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:StdPeriphLib/inc/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:StdPeriphLib/inc/core_cm3.h ****  *
1526:StdPeriphLib/inc/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1527:StdPeriphLib/inc/core_cm3.h ****  * otherwise it returns 0
1528:StdPeriphLib/inc/core_cm3.h ****  */
1529:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:StdPeriphLib/inc/core_cm3.h **** {
1531:StdPeriphLib/inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:StdPeriphLib/inc/core_cm3.h **** }
1533:StdPeriphLib/inc/core_cm3.h **** 
1534:StdPeriphLib/inc/core_cm3.h **** /**
1535:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:StdPeriphLib/inc/core_cm3.h ****  * 
1537:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:StdPeriphLib/inc/core_cm3.h ****  *
1539:StdPeriphLib/inc/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:StdPeriphLib/inc/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:StdPeriphLib/inc/core_cm3.h ****  */
1542:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:StdPeriphLib/inc/core_cm3.h **** {
1544:StdPeriphLib/inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:StdPeriphLib/inc/core_cm3.h **** }
1546:StdPeriphLib/inc/core_cm3.h **** 
1547:StdPeriphLib/inc/core_cm3.h **** /**
1548:StdPeriphLib/inc/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:StdPeriphLib/inc/core_cm3.h ****  *
1550:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:StdPeriphLib/inc/core_cm3.h ****  *
1552:StdPeriphLib/inc/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1553:StdPeriphLib/inc/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:StdPeriphLib/inc/core_cm3.h ****  */
1555:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:StdPeriphLib/inc/core_cm3.h **** {
1557:StdPeriphLib/inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:StdPeriphLib/inc/core_cm3.h **** }
1559:StdPeriphLib/inc/core_cm3.h **** 
1560:StdPeriphLib/inc/core_cm3.h **** /**
1561:StdPeriphLib/inc/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:StdPeriphLib/inc/core_cm3.h ****  *
1563:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:StdPeriphLib/inc/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:StdPeriphLib/inc/core_cm3.h ****  *
1566:StdPeriphLib/inc/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1567:StdPeriphLib/inc/core_cm3.h ****  * otherwise it returns 0.
1568:StdPeriphLib/inc/core_cm3.h ****  */
1569:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:StdPeriphLib/inc/core_cm3.h **** {
1571:StdPeriphLib/inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:StdPeriphLib/inc/core_cm3.h **** }
1573:StdPeriphLib/inc/core_cm3.h **** 
1574:StdPeriphLib/inc/core_cm3.h **** /**
1575:StdPeriphLib/inc/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:StdPeriphLib/inc/core_cm3.h ****  *
1577:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:StdPeriphLib/inc/core_cm3.h ****  * @param  priority  The priority to set
1579:StdPeriphLib/inc/core_cm3.h ****  *
1580:StdPeriphLib/inc/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1581:StdPeriphLib/inc/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1582:StdPeriphLib/inc/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:StdPeriphLib/inc/core_cm3.h ****  *
1584:StdPeriphLib/inc/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:StdPeriphLib/inc/core_cm3.h ****  */
1586:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:StdPeriphLib/inc/core_cm3.h **** {
1588:StdPeriphLib/inc/core_cm3.h ****   if(IRQn < 0) {
1589:StdPeriphLib/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 108              		.loc 2 1589 0
 109 0020 F021     		movs	r1, #240
 110              	.LBE9:
 111              	.LBE8:
 112              	.LBE7:
 113              	.LBE6:
  26:main.c        ****   SysTick_Config(SystemCoreClock / 1000);
 114              		.loc 1 26 0
 115 0022 1A68     		ldr	r2, [r3, #0]
 116 0024 4FF47A73 		mov	r3, #1000
 117              	.LVL6:
 118 0028 B2FBF3F2 		udiv	r2, r2, r3
 119              	.LVL7:
 120              	.LBB13:
 121              	.LBB12:
1590:StdPeriphLib/inc/core_cm3.h ****   else {
1591:StdPeriphLib/inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1592:StdPeriphLib/inc/core_cm3.h **** }
1593:StdPeriphLib/inc/core_cm3.h **** 
1594:StdPeriphLib/inc/core_cm3.h **** /**
1595:StdPeriphLib/inc/core_cm3.h ****  * @brief  Read the priority for an interrupt
1596:StdPeriphLib/inc/core_cm3.h ****  *
1597:StdPeriphLib/inc/core_cm3.h ****  * @param  IRQn      The number of the interrupt for get priority
1598:StdPeriphLib/inc/core_cm3.h ****  * @return           The priority for the interrupt
1599:StdPeriphLib/inc/core_cm3.h ****  *
1600:StdPeriphLib/inc/core_cm3.h ****  * Read the priority for the specified interrupt. The interrupt 
1601:StdPeriphLib/inc/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1602:StdPeriphLib/inc/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1603:StdPeriphLib/inc/core_cm3.h ****  *
1604:StdPeriphLib/inc/core_cm3.h ****  * The returned priority value is automatically aligned to the implemented
1605:StdPeriphLib/inc/core_cm3.h ****  * priority bits of the microcontroller.
1606:StdPeriphLib/inc/core_cm3.h ****  *
1607:StdPeriphLib/inc/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1608:StdPeriphLib/inc/core_cm3.h ****  */
1609:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1610:StdPeriphLib/inc/core_cm3.h **** {
1611:StdPeriphLib/inc/core_cm3.h **** 
1612:StdPeriphLib/inc/core_cm3.h ****   if(IRQn < 0) {
1613:StdPeriphLib/inc/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1614:StdPeriphLib/inc/core_cm3.h ****   else {
1615:StdPeriphLib/inc/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1616:StdPeriphLib/inc/core_cm3.h **** }
1617:StdPeriphLib/inc/core_cm3.h **** 
1618:StdPeriphLib/inc/core_cm3.h **** 
1619:StdPeriphLib/inc/core_cm3.h **** /**
1620:StdPeriphLib/inc/core_cm3.h ****  * @brief  Encode the priority for an interrupt
1621:StdPeriphLib/inc/core_cm3.h ****  *
1622:StdPeriphLib/inc/core_cm3.h ****  * @param  PriorityGroup    The used priority group
1623:StdPeriphLib/inc/core_cm3.h ****  * @param  PreemptPriority  The preemptive priority value (starting from 0)
1624:StdPeriphLib/inc/core_cm3.h ****  * @param  SubPriority      The sub priority value (starting from 0)
1625:StdPeriphLib/inc/core_cm3.h ****  * @return                  The encoded priority for the interrupt
1626:StdPeriphLib/inc/core_cm3.h ****  *
1627:StdPeriphLib/inc/core_cm3.h ****  * Encode the priority for an interrupt with the given priority group,
1628:StdPeriphLib/inc/core_cm3.h ****  * preemptive priority value and sub priority value.
1629:StdPeriphLib/inc/core_cm3.h ****  * In case of a conflict between priority grouping and available
1630:StdPeriphLib/inc/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1631:StdPeriphLib/inc/core_cm3.h ****  *
1632:StdPeriphLib/inc/core_cm3.h ****  * The returned priority value can be used for NVIC_SetPriority(...) function
1633:StdPeriphLib/inc/core_cm3.h ****  */
1634:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1635:StdPeriphLib/inc/core_cm3.h **** {
1636:StdPeriphLib/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1637:StdPeriphLib/inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1638:StdPeriphLib/inc/core_cm3.h ****   uint32_t SubPriorityBits;
1639:StdPeriphLib/inc/core_cm3.h **** 
1640:StdPeriphLib/inc/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1641:StdPeriphLib/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1642:StdPeriphLib/inc/core_cm3.h ****  
1643:StdPeriphLib/inc/core_cm3.h ****   return (
1644:StdPeriphLib/inc/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1645:StdPeriphLib/inc/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1646:StdPeriphLib/inc/core_cm3.h ****          );
1647:StdPeriphLib/inc/core_cm3.h **** }
1648:StdPeriphLib/inc/core_cm3.h **** 
1649:StdPeriphLib/inc/core_cm3.h **** 
1650:StdPeriphLib/inc/core_cm3.h **** /**
1651:StdPeriphLib/inc/core_cm3.h ****  * @brief  Decode the priority of an interrupt
1652:StdPeriphLib/inc/core_cm3.h ****  *
1653:StdPeriphLib/inc/core_cm3.h ****  * @param  Priority           The priority for the interrupt
1654:StdPeriphLib/inc/core_cm3.h ****  * @param  PriorityGroup      The used priority group
1655:StdPeriphLib/inc/core_cm3.h ****  * @param  pPreemptPriority   The preemptive priority value (starting from 0)
1656:StdPeriphLib/inc/core_cm3.h ****  * @param  pSubPriority       The sub priority value (starting from 0)
1657:StdPeriphLib/inc/core_cm3.h ****  *
1658:StdPeriphLib/inc/core_cm3.h ****  * Decode an interrupt priority value with the given priority group to 
1659:StdPeriphLib/inc/core_cm3.h ****  * preemptive priority value and sub priority value.
1660:StdPeriphLib/inc/core_cm3.h ****  * In case of a conflict between priority grouping and available
1661:StdPeriphLib/inc/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1662:StdPeriphLib/inc/core_cm3.h ****  *
1663:StdPeriphLib/inc/core_cm3.h ****  * The priority value can be retrieved with NVIC_GetPriority(...) function
1664:StdPeriphLib/inc/core_cm3.h ****  */
1665:StdPeriphLib/inc/core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1666:StdPeriphLib/inc/core_cm3.h **** {
1667:StdPeriphLib/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1668:StdPeriphLib/inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1669:StdPeriphLib/inc/core_cm3.h ****   uint32_t SubPriorityBits;
1670:StdPeriphLib/inc/core_cm3.h **** 
1671:StdPeriphLib/inc/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1672:StdPeriphLib/inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1673:StdPeriphLib/inc/core_cm3.h ****   
1674:StdPeriphLib/inc/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1675:StdPeriphLib/inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1676:StdPeriphLib/inc/core_cm3.h **** }
1677:StdPeriphLib/inc/core_cm3.h **** 
1678:StdPeriphLib/inc/core_cm3.h **** 
1679:StdPeriphLib/inc/core_cm3.h **** 
1680:StdPeriphLib/inc/core_cm3.h **** /* ##################################    SysTick function  ########################################
1681:StdPeriphLib/inc/core_cm3.h **** 
1682:StdPeriphLib/inc/core_cm3.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
1683:StdPeriphLib/inc/core_cm3.h **** 
1684:StdPeriphLib/inc/core_cm3.h **** /**
1685:StdPeriphLib/inc/core_cm3.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
1686:StdPeriphLib/inc/core_cm3.h ****  *
1687:StdPeriphLib/inc/core_cm3.h ****  * @param   ticks   number of ticks between two interrupts
1688:StdPeriphLib/inc/core_cm3.h ****  * @return  1 = failed, 0 = successful
1689:StdPeriphLib/inc/core_cm3.h ****  *
1690:StdPeriphLib/inc/core_cm3.h ****  * Initialise the system tick timer and its interrupt and start the
1691:StdPeriphLib/inc/core_cm3.h ****  * system tick timer / counter in free running mode to generate 
1692:StdPeriphLib/inc/core_cm3.h ****  * periodical interrupts.
1693:StdPeriphLib/inc/core_cm3.h ****  */
1694:StdPeriphLib/inc/core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1695:StdPeriphLib/inc/core_cm3.h **** { 
1696:StdPeriphLib/inc/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
1697:StdPeriphLib/inc/core_cm3.h ****                                                                
1698:StdPeriphLib/inc/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 122              		.loc 2 1698 0
 123 002c 134B     		ldr	r3, .L6+12
 124 002e 013A     		subs	r2, r2, #1
 125              	.LVL8:
 126 0030 5A60     		str	r2, [r3, #4]
 127              	.LVL9:
 128              	.LBB11:
 129              	.LBB10:
1589:StdPeriphLib/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 130              		.loc 2 1589 0
 131 0032 134A     		ldr	r2, .L6+16
 132              	.LVL10:
 133 0034 82F82310 		strb	r1, [r2, #35]
 134              	.LBE10:
 135              	.LBE11:
1699:StdPeriphLib/inc/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
1700:StdPeriphLib/inc/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 136              		.loc 2 1700 0
 137 0038 0022     		movs	r2, #0
 138 003a 9A60     		str	r2, [r3, #8]
1701:StdPeriphLib/inc/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 139              		.loc 2 1701 0
 140 003c 0722     		movs	r2, #7
 141 003e 1A60     		str	r2, [r3, #0]
 142              	.LVL11:
 143              	.L5:
 144              	.LBE12:
 145              	.LBE13:
  33:main.c        ****     GPIO_SetBits(GPIOC, GPIO_Pin_6);
 146              		.loc 1 33 0 discriminator 1
 147 0040 4021     		movs	r1, #64
 148 0042 0C48     		ldr	r0, .L6+4
 149 0044 FFF7FEFF 		bl	GPIO_SetBits
 150              	.LVL12:
  34:main.c        ****     GPIO_ResetBits(GPIOC, GPIO_Pin_7);
 151              		.loc 1 34 0 discriminator 1
 152 0048 8021     		movs	r1, #128
 153 004a 0A48     		ldr	r0, .L6+4
 154 004c FFF7FEFF 		bl	GPIO_ResetBits
 155              	.LVL13:
  36:main.c        ****     Delay(0xDFFFF);
 156              		.loc 1 36 0 discriminator 1
 157 0050 0C48     		ldr	r0, .L6+20
 158 0052 FFF7FEFF 		bl	Delay
 159              	.LVL14:
  38:main.c        ****     GPIO_ResetBits(GPIOC, GPIO_Pin_6);
 160              		.loc 1 38 0 discriminator 1
 161 0056 4021     		movs	r1, #64
 162 0058 0648     		ldr	r0, .L6+4
 163 005a FFF7FEFF 		bl	GPIO_ResetBits
 164              	.LVL15:
  39:main.c        ****     GPIO_SetBits(GPIOC, GPIO_Pin_7);
 165              		.loc 1 39 0 discriminator 1
 166 005e 0548     		ldr	r0, .L6+4
 167 0060 8021     		movs	r1, #128
 168 0062 FFF7FEFF 		bl	GPIO_SetBits
 169              	.LVL16:
  41:main.c        ****     Delay(0xDFFFF);
 170              		.loc 1 41 0 discriminator 1
 171 0066 0748     		ldr	r0, .L6+20
 172 0068 FFF7FEFF 		bl	Delay
 173              	.LVL17:
 174 006c E8E7     		b	.L5
 175              	.L7:
 176 006e 00BF     		.align	2
 177              	.L6:
 178 0070 00000000 		.word	GPIO_InitStructure
 179 0074 00100140 		.word	1073811456
 180 0078 00000000 		.word	SystemCoreClock
 181 007c 10E000E0 		.word	-536813552
 182 0080 00ED00E0 		.word	-536810240
 183 0084 FFFF0D00 		.word	917503
 184              		.cfi_endproc
 185              	.LFE29:
 186              		.fnend
 188              		.section	.text.LED_Flash,"ax",%progbits
 189              		.align	1
 190              		.global	LED_Flash
 191              		.thumb
 192              		.thumb_func
 194              	LED_Flash:
 195              		.fnstart
 196              	.LFB31:
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** void LED_Flash(void)
  56:main.c        **** {
 197              		.loc 1 56 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
  57:main.c        **** 
  58:main.c        ****   static int f=0;
  59:main.c        ****    
  60:main.c        ****    if(f==0)
 202              		.loc 1 60 0
 203 0000 074B     		ldr	r3, .L10
 204 0002 1A68     		ldr	r2, [r3, #0]
 205 0004 2AB9     		cbnz	r2, .L9
  61:main.c        ****    {
  62:main.c        ****       f=1;
  63:main.c        ****       GPIO_SetBits(GPIOC, GPIO_Pin_6);//
 206              		.loc 1 63 0
 207 0006 0748     		ldr	r0, .L10+4
  62:main.c        ****       f=1;
 208              		.loc 1 62 0
 209 0008 0122     		movs	r2, #1
 210              		.loc 1 63 0
 211 000a 4021     		movs	r1, #64
  62:main.c        ****       f=1;
 212              		.loc 1 62 0
 213 000c 1A60     		str	r2, [r3, #0]
  64:main.c        ****    }
  65:main.c        ****    else
  66:main.c        ****    {
  67:main.c        ****       f=0;
  68:main.c        ****       GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
  69:main.c        ****    }
  70:main.c        ****   
  71:main.c        **** }
 214              		.loc 1 71 0
  63:main.c        ****       GPIO_SetBits(GPIOC, GPIO_Pin_6);//
 215              		.loc 1 63 0
 216 000e FFF7FEBF 		b	GPIO_SetBits
 217              	.LVL18:
 218              	.L9:
  68:main.c        ****       GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
 219              		.loc 1 68 0
 220 0012 0448     		ldr	r0, .L10+4
  67:main.c        ****       f=0;
 221              		.loc 1 67 0
 222 0014 0022     		movs	r2, #0
  68:main.c        ****       GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
 223              		.loc 1 68 0
 224 0016 4021     		movs	r1, #64
  67:main.c        ****       f=0;
 225              		.loc 1 67 0
 226 0018 1A60     		str	r2, [r3, #0]
 227              		.loc 1 71 0
  68:main.c        ****       GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
 228              		.loc 1 68 0
 229 001a FFF7FEBF 		b	GPIO_ResetBits
 230              	.LVL19:
 231              	.L11:
 232 001e 00BF     		.align	2
 233              	.L10:
 234 0020 00000000 		.word	.LANCHOR0
 235 0024 00100140 		.word	1073811456
 236              		.cfi_endproc
 237              	.LFE31:
 238              		.fnend
 240              		.section	.text.SysTick_Handler,"ax",%progbits
 241              		.align	1
 242              		.global	SysTick_Handler
 243              		.thumb
 244              		.thumb_func
 246              	SysTick_Handler:
 247              		.fnstart
 248              	.LFB32:
  72:main.c        **** 
  73:main.c        **** 
  74:main.c        **** void SysTick_Handler(void) {
 249              		.loc 1 74 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
  75:main.c        **** 
  76:main.c        ****    LED_Flash();
  77:main.c        **** 
  78:main.c        **** }
 254              		.loc 1 78 0
  76:main.c        ****    LED_Flash();
 255              		.loc 1 76 0
 256 0000 FFF7FEBF 		b	LED_Flash
 257              	.LVL20:
 258              		.cfi_endproc
 259              	.LFE32:
 260              		.fnend
 262              		.comm	GPIO_InitStructure,12,4
 263              		.section	.bss.f.5365,"aw",%nobits
 264              		.align	2
 265              	.LANCHOR0 = . + 0
 268              	f.5365:
 269 0000 00000000 		.space	4
 270              		.text
 271              	.Letext0:
 272              		.file 3 "StdPeriphLib/inc/stm32f10x.h"
 273              		.file 4 "/home/cnovak/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin/../arm-none-linux
 274              		.file 5 "StdPeriphLib/inc/stm32f10x_gpio.h"
 275              		.file 6 "StdPeriphLib/inc/system_stm32f10x.h"
 276              		.file 7 "StdPeriphLib/inc/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc3kJbdr.s:19     .text.Delay:00000000 $t
     /tmp/cc3kJbdr.s:24     .text.Delay:00000000 Delay
            .ARM.exidx.text.Delay:00000000 $d
     /tmp/cc3kJbdr.s:62     .text.startup.main:00000000 $t
     /tmp/cc3kJbdr.s:67     .text.startup.main:00000000 main
     /tmp/cc3kJbdr.s:178    .text.startup.main:00000070 $d
                            *COM*:0000000c GPIO_InitStructure
     .ARM.extab.text.startup.main:00000000 $d
     .ARM.exidx.text.startup.main:00000000 $d
     /tmp/cc3kJbdr.s:189    .text.LED_Flash:00000000 $t
     /tmp/cc3kJbdr.s:194    .text.LED_Flash:00000000 LED_Flash
     /tmp/cc3kJbdr.s:234    .text.LED_Flash:00000020 $d
        .ARM.exidx.text.LED_Flash:00000000 $d
     /tmp/cc3kJbdr.s:241    .text.SysTick_Handler:00000000 $t
     /tmp/cc3kJbdr.s:246    .text.SysTick_Handler:00000000 SysTick_Handler
  .ARM.exidx.text.SysTick_Handler:00000000 $d
     /tmp/cc3kJbdr.s:264    .bss.f.5365:00000000 $d
     /tmp/cc3kJbdr.s:268    .bss.f.5365:00000000 f.5365
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_unwind_cpp_pr0
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_SetBits
GPIO_ResetBits
SystemCoreClock
__aeabi_unwind_cpp_pr1
