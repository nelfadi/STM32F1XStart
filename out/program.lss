
out/program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001470  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000150  08001470  08001470  00009470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .interp       00000013  080015c0  080015c0  000095c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.version  00000006  080015d4  080015d4  000095d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.version_r 00000020  080015dc  080015dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000030  080015fc  080015fc  000095fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000059  0800162c  0800162c  0000962c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .hash         00000018  08001688  08001688  00009688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  080016a0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dynamic      00000090  20000038  080016d8  00010038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000010  200000c8  08001768  000100c8  2**2
                  ALLOC
 11 ._usrstack    00000100  200000d8  08001768  000100d8  2**0
                  ALLOC
 12 .comment      00000030  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY
 13 .debug_aranges 000004d0  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   00003922  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00000e41  00000000  00000000  00013eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000141f  00000000  00000000  00014d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000a54  00000000  00000000  0001614c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001573  00000000  00000000  00016ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000023e8  00000000  00000000  00018113  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000498  00000000  00000000  0001a4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .ARM.attributes 00000033  00000000  00000000  0001a993  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 f1 01 00 08 a9 01 00 08 a9 01 00 08     ... ............
 8000010:	a9 01 00 08 a9 01 00 08 a9 01 00 08 00 00 00 00     ................
	...
 800002c:	a9 01 00 08 a9 01 00 08 00 00 00 00 a9 01 00 08     ................
 800003c:	a5 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 800004c:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 800005c:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 800006c:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 800007c:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 800008c:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 800009c:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 80000ac:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 80000bc:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 80000cc:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
 80000dc:	a9 01 00 08 a9 01 00 08 a9 01 00 08 a9 01 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <Delay>:
  }
}


void Delay(vu32 nCount)
{
 800010c:	b082      	sub	sp, #8
 800010e:	9001      	str	r0, [sp, #4]
  for(; nCount!= 0;nCount--);
 8000110:	e002      	b.n	8000118 <Delay+0xc>
 8000112:	9b01      	ldr	r3, [sp, #4]
 8000114:	3b01      	subs	r3, #1
 8000116:	9301      	str	r3, [sp, #4]
 8000118:	9b01      	ldr	r3, [sp, #4]
 800011a:	2b00      	cmp	r3, #0
 800011c:	d1f9      	bne.n	8000112 <Delay+0x6>
}
 800011e:	b002      	add	sp, #8
 8000120:	4770      	bx	lr
	...

08000124 <main>:
void Delay(vu32 nCount);
void LED_Flash(void);


int main(void)
{
 8000124:	b508      	push	{r3, lr}

  /* Enable clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000126:	2010      	movs	r0, #16
 8000128:	2101      	movs	r1, #1
 800012a:	f000 fdd5 	bl	8000cd8 <RCC_APB2PeriphClockCmd>

 
  /* Configure PC.06 PC.07 as output push-pull */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 800012e:	4911      	ldr	r1, [pc, #68]	; (8000174 <main+0x50>)
 8000130:	23c0      	movs	r3, #192	; 0xc0
 8000132:	800b      	strh	r3, [r1, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000134:	2310      	movs	r3, #16
 8000136:	608b      	str	r3, [r1, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000138:	480f      	ldr	r0, [pc, #60]	; (8000178 <main+0x54>)

 
  /* Configure PC.06 PC.07 as output push-pull */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800013a:	2303      	movs	r3, #3
 800013c:	604b      	str	r3, [r1, #4]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800013e:	f000 fb60 	bl	8000802 <GPIO_Init>

  while(1)
  {


    GPIO_SetBits(GPIOC, GPIO_Pin_6);
 8000142:	2140      	movs	r1, #64	; 0x40
 8000144:	480c      	ldr	r0, [pc, #48]	; (8000178 <main+0x54>)
 8000146:	f000 fbca 	bl	80008de <GPIO_SetBits>
    GPIO_ResetBits(GPIOC, GPIO_Pin_7);
 800014a:	2180      	movs	r1, #128	; 0x80
 800014c:	480a      	ldr	r0, [pc, #40]	; (8000178 <main+0x54>)
 800014e:	f000 fbc8 	bl	80008e2 <GPIO_ResetBits>

    Delay(0x20000);
 8000152:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000156:	f7ff ffd9 	bl	800010c <Delay>
    
    GPIO_ResetBits(GPIOC, GPIO_Pin_6);
 800015a:	2140      	movs	r1, #64	; 0x40
 800015c:	4806      	ldr	r0, [pc, #24]	; (8000178 <main+0x54>)
 800015e:	f000 fbc0 	bl	80008e2 <GPIO_ResetBits>
    GPIO_SetBits(GPIOC, GPIO_Pin_7);
 8000162:	4805      	ldr	r0, [pc, #20]	; (8000178 <main+0x54>)
 8000164:	2180      	movs	r1, #128	; 0x80
 8000166:	f000 fbba 	bl	80008de <GPIO_SetBits>

    Delay(0xA0000);
 800016a:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 800016e:	f7ff ffcd 	bl	800010c <Delay>
 8000172:	e7e6      	b.n	8000142 <main+0x1e>
 8000174:	200000cc 	.word	0x200000cc
 8000178:	40011000 	.word	0x40011000

0800017c <LED_Flash>:
void LED_Flash(void)
{

  static int f=0;
   
   if(f==0)
 800017c:	4b07      	ldr	r3, [pc, #28]	; (800019c <LED_Flash+0x20>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	b92a      	cbnz	r2, 800018e <LED_Flash+0x12>
   {
      f=1;
      GPIO_SetBits(GPIOC, GPIO_Pin_6);//
 8000182:	4807      	ldr	r0, [pc, #28]	; (80001a0 <LED_Flash+0x24>)

  static int f=0;
   
   if(f==0)
   {
      f=1;
 8000184:	2201      	movs	r2, #1
      GPIO_SetBits(GPIOC, GPIO_Pin_6);//
 8000186:	2140      	movs	r1, #64	; 0x40

  static int f=0;
   
   if(f==0)
   {
      f=1;
 8000188:	601a      	str	r2, [r3, #0]
      GPIO_SetBits(GPIOC, GPIO_Pin_6);//
 800018a:	f000 bba8 	b.w	80008de <GPIO_SetBits>
   }
   else
   {
      f=0;
      GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <LED_Flash+0x24>)
      f=1;
      GPIO_SetBits(GPIOC, GPIO_Pin_6);//
   }
   else
   {
      f=0;
 8000190:	2200      	movs	r2, #0
      GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
 8000192:	2140      	movs	r1, #64	; 0x40
      f=1;
      GPIO_SetBits(GPIOC, GPIO_Pin_6);//
   }
   else
   {
      f=0;
 8000194:	601a      	str	r2, [r3, #0]
      GPIO_ResetBits(GPIOC, GPIO_Pin_6);//
 8000196:	f000 bba4 	b.w	80008e2 <GPIO_ResetBits>
 800019a:	bf00      	nop
 800019c:	200000c8 	.word	0x200000c8
 80001a0:	40011000 	.word	0x40011000

080001a4 <SysTick_Handler>:
}


void SysTick_Handler(void) {

   LED_Flash();
 80001a4:	f7ff bfea 	b.w	800017c <LED_Flash>

080001a8 <Default_Handler>:
 * @param  None
 * @retval : None
*/

void Default_Handler(void)
{
 80001a8:	e7fe      	b.n	80001a8 <Default_Handler>
	...

080001ac <__Init_Data_and_BSS>:
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc  = &_sidata;
  pulDest = &_sdata;
  if ( pulSrc != pulDest )
 80001ac:	490b      	ldr	r1, [pc, #44]	; (80001dc <__Init_Data_and_BSS+0x30>)
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <__Init_Data_and_BSS+0x34>)
 * @param  None
 * @retval : None
*/

void __Init_Data_and_BSS(void)
{
 80001b0:	b510      	push	{r4, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc  = &_sidata;
  pulDest = &_sdata;
  if ( pulSrc != pulDest )
 80001b2:	4291      	cmp	r1, r2
 80001b4:	d107      	bne.n	80001c6 <__Init_Data_and_BSS+0x1a>
 80001b6:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <__Init_Data_and_BSS+0x38>)
    {
      *(pulDest++) = *(pulSrc++);
    }
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 80001b8:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <__Init_Data_and_BSS+0x3c>)
  {
    *(pulDest++) = 0;
 80001ba:	2100      	movs	r1, #0
 80001bc:	e00b      	b.n	80001d6 <__Init_Data_and_BSS+0x2a>
  pulDest = &_sdata;
  if ( pulSrc != pulDest )
  {
    for(; pulDest < &_edata; )
    {
      *(pulDest++) = *(pulSrc++);
 80001be:	5858      	ldr	r0, [r3, r1]
 80001c0:	5098      	str	r0, [r3, r2]
 80001c2:	3304      	adds	r3, #4
 80001c4:	e001      	b.n	80001ca <__Init_Data_and_BSS+0x1e>
  /* Copy the data segment initializers from flash to SRAM */
  pulSrc  = &_sidata;
  pulDest = &_sdata;
  if ( pulSrc != pulDest )
  {
    for(; pulDest < &_edata; )
 80001c6:	4c09      	ldr	r4, [pc, #36]	; (80001ec <__Init_Data_and_BSS+0x40>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc  = &_sidata;
  pulDest = &_sdata;
  if ( pulSrc != pulDest )
 80001c8:	2300      	movs	r3, #0
 * @brief  initializes data and bss sections
 * @param  None
 * @retval : None
*/

void __Init_Data_and_BSS(void)
 80001ca:	1898      	adds	r0, r3, r2
  /* Copy the data segment initializers from flash to SRAM */
  pulSrc  = &_sidata;
  pulDest = &_sdata;
  if ( pulSrc != pulDest )
  {
    for(; pulDest < &_edata; )
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3f6      	bcc.n	80001be <__Init_Data_and_BSS+0x12>
 80001d0:	e7f1      	b.n	80001b6 <__Init_Data_and_BSS+0xa>
    }
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
  {
    *(pulDest++) = 0;
 80001d2:	f843 1b04 	str.w	r1, [r3], #4
    {
      *(pulDest++) = *(pulSrc++);
    }
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d3fb      	bcc.n	80001d2 <__Init_Data_and_BSS+0x26>
  {
    *(pulDest++) = 0;
  }
}
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	080015c0 	.word	0x080015c0
 80001e0:	20000000 	.word	0x20000000
 80001e4:	200000c8 	.word	0x200000c8
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	20000038 	.word	0x20000038

080001f0 <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 80001f0:	4668      	mov	r0, sp
 80001f2:	f020 0107 	bic.w	r1, r0, #7
 80001f6:	468d      	mov	sp, r1
 80001f8:	b508      	push	{r3, lr}

  /* Initialize data and bss */
  __Init_Data_and_BSS();
 80001fa:	f7ff ffd7 	bl	80001ac <__Init_Data_and_BSS>
    __libc_init_array()
  } */
  
  /* Setup the microcontroller system. Initialize the Embedded Flash Interface,
     initialize the PLL and update the SystemFrequency variable. */
  SystemInit();
 80001fe:	f001 f827 	bl	8001250 <SystemInit>

  /* Call the application's entry point.*/
  main();
 8000202:	f7ff ff8f 	bl	8000124 <main>
 8000206:	e7fe      	b.n	8000206 <Reset_Handler+0x16>

08000208 <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <FLASH_SetLatency+0x10>)
 800020a:	681a      	ldr	r2, [r3, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 800020c:	f002 0238 	and.w	r2, r2, #56	; 0x38
  tmpreg |= FLASH_Latency;
 8000210:	4310      	orrs	r0, r2
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8000212:	6018      	str	r0, [r3, #0]
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40022000 	.word	0x40022000

0800021c <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <FLASH_HalfCycleAccessCmd+0x14>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	f022 0208 	bic.w	r2, r2, #8
 8000224:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4310      	orrs	r0, r2
 800022a:	6018      	str	r0, [r3, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40022000 	.word	0x40022000

08000234 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <FLASH_PrefetchBufferCmd+0x14>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	f022 0210 	bic.w	r2, r2, #16
 800023c:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4310      	orrs	r0, r2
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40022000 	.word	0x40022000

0800024c <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <FLASH_Unlock+0x10>)
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <FLASH_Unlock+0x14>)
 8000250:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000252:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40022000 	.word	0x40022000
 8000260:	45670123 	.word	0x45670123

08000264 <FLASH_UnlockBank1>:
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <FLASH_UnlockBank1+0x10>)
 8000266:	4a04      	ldr	r2, [pc, #16]	; (8000278 <FLASH_UnlockBank1+0x14>)
 8000268:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800026a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40022000 	.word	0x40022000
 8000278:	45670123 	.word	0x45670123

0800027c <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 800027c:	4b02      	ldr	r3, [pc, #8]	; (8000288 <FLASH_Lock+0xc>)
 800027e:	691a      	ldr	r2, [r3, #16]
 8000280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000284:	611a      	str	r2, [r3, #16]
 8000286:	4770      	bx	lr
 8000288:	40022000 	.word	0x40022000

0800028c <FLASH_LockBank1>:
  * @retval None
  */
void FLASH_LockBank1(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <FLASH_LockBank1+0xc>)
 800028e:	691a      	ldr	r2, [r3, #16]
 8000290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000294:	611a      	str	r2, [r3, #16]
 8000296:	4770      	bx	lr
 8000298:	40022000 	.word	0x40022000

0800029c <FLASH_GetUserOptionByte>:
  *         and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <FLASH_GetUserOptionByte+0x8>)
 800029e:	69d8      	ldr	r0, [r3, #28]
}
 80002a0:	0880      	lsrs	r0, r0, #2
 80002a2:	4770      	bx	lr
 80002a4:	40022000 	.word	0x40022000

080002a8 <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Flash write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <FLASH_GetWriteProtectionOptionByte+0x8>)
 80002aa:	6a18      	ldr	r0, [r3, #32]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40022000 	.word	0x40022000

080002b4 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <FLASH_GetReadOutProtectionStatus+0xc>)
 80002b6:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 80002b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40022000 	.word	0x40022000

080002c4 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 80002c4:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <FLASH_GetPrefetchBufferStatus+0xc>)
 80002c6:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 80002c8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40022000 	.word	0x40022000

080002d4 <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80002d6:	691a      	ldr	r2, [r3, #16]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80002d8:	b109      	cbz	r1, 80002de <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80002da:	4310      	orrs	r0, r2
 80002dc:	e001      	b.n	80002e2 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 80002de:	ea22 0000 	bic.w	r0, r2, r0
 80002e2:	6118      	str	r0, [r3, #16]
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40022000 	.word	0x40022000

080002ec <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 80002ec:	2801      	cmp	r0, #1
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <FLASH_GetFlagStatus+0x1c>)
 80002f0:	d103      	bne.n	80002fa <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 80002f2:	69d8      	ldr	r0, [r3, #28]
 80002f4:	f000 0001 	and.w	r0, r0, #1
 80002f8:	4770      	bx	lr
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4218      	tst	r0, r3
 80002fe:	bf0c      	ite	eq
 8000300:	2000      	moveq	r0, #0
 8000302:	2001      	movne	r0, #1
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40022000 	.word	0x40022000

0800030c <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800030c:	4b01      	ldr	r3, [pc, #4]	; (8000314 <FLASH_ClearFlag+0x8>)
 800030e:	60d8      	str	r0, [r3, #12]
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40022000 	.word	0x40022000

08000318 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <FLASH_GetStatus+0x24>)
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	07d1      	lsls	r1, r2, #31
 800031e:	d409      	bmi.n	8000334 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 8000320:	68da      	ldr	r2, [r3, #12]
 8000322:	0752      	lsls	r2, r2, #29
 8000324:	d408      	bmi.n	8000338 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 800032c:	bf0c      	ite	eq
 800032e:	2004      	moveq	r0, #4
 8000330:	2003      	movne	r0, #3
 8000332:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8000334:	2001      	movs	r0, #1
 8000336:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 8000338:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800033a:	4770      	bx	lr
 800033c:	40022000 	.word	0x40022000

08000340 <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <FLASH_GetBank1Status+0x24>)
 8000342:	68da      	ldr	r2, [r3, #12]
 8000344:	07d2      	lsls	r2, r2, #31
 8000346:	d409      	bmi.n	800035c <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000348:	68da      	ldr	r2, [r3, #12]
 800034a:	0750      	lsls	r0, r2, #29
 800034c:	d408      	bmi.n	8000360 <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 8000354:	bf0c      	ite	eq
 8000356:	2004      	moveq	r0, #4
 8000358:	2003      	movne	r0, #3
 800035a:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 800035c:	2001      	movs	r0, #1
 800035e:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 8000360:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8000362:	4770      	bx	lr
 8000364:	40022000 	.word	0x40022000

08000368 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000368:	b510      	push	{r4, lr}
 800036a:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 800036c:	f7ff ffe8 	bl	8000340 <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000370:	e002      	b.n	8000378 <FLASH_WaitForLastOperation+0x10>
  {
    status = FLASH_GetBank1Status();
 8000372:	f7ff ffe5 	bl	8000340 <FLASH_GetBank1Status>
    Timeout--;
 8000376:	3c01      	subs	r4, #1
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000378:	2801      	cmp	r0, #1
 800037a:	d103      	bne.n	8000384 <FLASH_WaitForLastOperation+0x1c>
 800037c:	2c00      	cmp	r4, #0
 800037e:	d1f8      	bne.n	8000372 <FLASH_WaitForLastOperation+0xa>
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8000380:	2005      	movs	r0, #5
 8000382:	bd10      	pop	{r4, pc}
 8000384:	2c00      	cmp	r4, #0
 8000386:	bf08      	it	eq
 8000388:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 800038a:	bd10      	pop	{r4, pc}

0800038c <FLASH_UserOptionByteConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800038e:	4c12      	ldr	r4, [pc, #72]	; (80003d8 <FLASH_UserOptionByteConfig+0x4c>)
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <FLASH_UserOptionByteConfig+0x50>)
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 8000392:	4605      	mov	r5, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8000394:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8000396:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800039a:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800039c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 80003a0:	460e      	mov	r6, r1
 80003a2:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80003a4:	f7ff ffe0 	bl	8000368 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80003a8:	2804      	cmp	r0, #4
 80003aa:	d114      	bne.n	80003d6 <FLASH_UserOptionByteConfig+0x4a>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80003ac:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 80003ae:	f045 05f8 	orr.w	r5, r5, #248	; 0xf8
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6123      	str	r3, [r4, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 80003b8:	432e      	orrs	r6, r5
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <FLASH_UserOptionByteConfig+0x54>)
 80003bc:	4337      	orrs	r7, r6
 80003be:	805f      	strh	r7, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80003c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003c4:	f7ff ffd0 	bl	8000368 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 80003c8:	2805      	cmp	r0, #5
 80003ca:	d004      	beq.n	80003d6 <FLASH_UserOptionByteConfig+0x4a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80003cc:	6922      	ldr	r2, [r4, #16]
 80003ce:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80003d2:	4013      	ands	r3, r2
 80003d4:	6123      	str	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 80003d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003d8:	40022000 	.word	0x40022000
 80003dc:	45670123 	.word	0x45670123
 80003e0:	1ffff800 	.word	0x1ffff800

080003e4 <FLASH_ReadOutProtection>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 80003e4:	b538      	push	{r3, r4, r5, lr}
 80003e6:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80003e8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80003ec:	f7ff ffbc 	bl	8000368 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80003f0:	2804      	cmp	r0, #4
 80003f2:	d138      	bne.n	8000466 <FLASH_ReadOutProtection+0x82>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80003f4:	4c1c      	ldr	r4, [pc, #112]	; (8000468 <FLASH_ReadOutProtection+0x84>)
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <FLASH_ReadOutProtection+0x88>)
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80003f8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80003fc:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80003fe:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000402:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 800040c:	6923      	ldr	r3, [r4, #16]
 800040e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000412:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000414:	f7ff ffa8 	bl	8000368 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 8000418:	2804      	cmp	r0, #4
 800041a:	d11d      	bne.n	8000458 <FLASH_ReadOutProtection+0x74>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 800041c:	6922      	ldr	r2, [r4, #16]
 800041e:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8000422:	4013      	ands	r3, r2
 8000424:	6123      	str	r3, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 8000426:	6923      	ldr	r3, [r4, #16]
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6123      	str	r3, [r4, #16]
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <FLASH_ReadOutProtection+0x8c>)
      if(NewState != DISABLE)
 8000430:	b10d      	cbz	r5, 8000436 <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 8000432:	2200      	movs	r2, #0
 8000434:	e000      	b.n	8000438 <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8000436:	22a5      	movs	r2, #165	; 0xa5
 8000438:	801a      	strh	r2, [r3, #0]
      }
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 800043a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800043e:	f7ff ff93 	bl	8000368 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_TIMEOUT)
 8000442:	2805      	cmp	r0, #5
 8000444:	d101      	bne.n	800044a <FLASH_ReadOutProtection+0x66>
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8000446:	2005      	movs	r0, #5
 8000448:	bd38      	pop	{r3, r4, r5, pc}
      status = FLASH_WaitForLastOperation(EraseTimeout); 
    
      if(status != FLASH_TIMEOUT)
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 800044a:	4a07      	ldr	r2, [pc, #28]	; (8000468 <FLASH_ReadOutProtection+0x84>)
 800044c:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8000450:	6911      	ldr	r1, [r2, #16]
 8000452:	400b      	ands	r3, r1
 8000454:	6113      	str	r3, [r2, #16]
 8000456:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8000458:	2805      	cmp	r0, #5
 800045a:	d0f4      	beq.n	8000446 <FLASH_ReadOutProtection+0x62>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 800045c:	6922      	ldr	r2, [r4, #16]
 800045e:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8000462:	4013      	ands	r3, r2
 8000464:	6123      	str	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;       
}
 8000466:	bd38      	pop	{r3, r4, r5, pc}
 8000468:	40022000 	.word	0x40022000
 800046c:	45670123 	.word	0x45670123
 8000470:	1ffff800 	.word	0x1ffff800

08000474 <FLASH_EnableWriteProtection>:
  *     @arg FLASH_WRProt_AllPages
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
 8000474:	b510      	push	{r4, lr}
 8000476:	4604      	mov	r4, r0
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000478:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800047c:	f7ff ff74 	bl	8000368 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8000480:	2804      	cmp	r0, #4
 8000482:	d145      	bne.n	8000510 <FLASH_EnableWriteProtection+0x9c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <FLASH_EnableWriteProtection+0xa0>)
 8000486:	4924      	ldr	r1, [pc, #144]	; (8000518 <FLASH_EnableWriteProtection+0xa4>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 8000488:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800048a:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800048c:	f101 3188 	add.w	r1, r1, #2290649224	; 0x88888888
 8000490:	6099      	str	r1, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8000492:	6919      	ldr	r1, [r3, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 8000494:	b2e2      	uxtb	r2, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8000496:	f041 0110 	orr.w	r1, r1, #16
    if(WRP0_Data != 0xFF)
 800049a:	2aff      	cmp	r2, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800049c:	6119      	str	r1, [r3, #16]
    if(WRP0_Data != 0xFF)
 800049e:	d104      	bne.n	80004aa <FLASH_EnableWriteProtection+0x36>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 80004a0:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 80004a4:	2bff      	cmp	r3, #255	; 0xff
 80004a6:	d10e      	bne.n	80004c6 <FLASH_EnableWriteProtection+0x52>
 80004a8:	e008      	b.n	80004bc <FLASH_EnableWriteProtection+0x48>
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <FLASH_EnableWriteProtection+0xa8>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 80004b0:	811a      	strh	r2, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004b2:	f7ff ff59 	bl	8000368 <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 80004b6:	2804      	cmp	r0, #4
 80004b8:	d122      	bne.n	8000500 <FLASH_EnableWriteProtection+0x8c>
 80004ba:	e7f1      	b.n	80004a0 <FLASH_EnableWriteProtection+0x2c>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 80004bc:	f3c4 4307 	ubfx	r3, r4, #16, #8
      OB->WRP1 = WRP1_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80004c0:	2bff      	cmp	r3, #255	; 0xff
 80004c2:	d10e      	bne.n	80004e2 <FLASH_EnableWriteProtection+0x6e>
 80004c4:	e008      	b.n	80004d8 <FLASH_EnableWriteProtection+0x64>
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 80004c6:	4a15      	ldr	r2, [pc, #84]	; (800051c <FLASH_EnableWriteProtection+0xa8>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 80004cc:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004ce:	f7ff ff4b 	bl	8000368 <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80004d2:	2804      	cmp	r0, #4
 80004d4:	d0f2      	beq.n	80004bc <FLASH_EnableWriteProtection+0x48>
 80004d6:	e013      	b.n	8000500 <FLASH_EnableWriteProtection+0x8c>
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 80004d8:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80004da:	2cff      	cmp	r4, #255	; 0xff
 80004dc:	d10a      	bne.n	80004f4 <FLASH_EnableWriteProtection+0x80>
 80004de:	2004      	movs	r0, #4
 80004e0:	e010      	b.n	8000504 <FLASH_EnableWriteProtection+0x90>
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <FLASH_EnableWriteProtection+0xa8>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 80004e8:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004ea:	f7ff ff3d 	bl	8000368 <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80004ee:	2804      	cmp	r0, #4
 80004f0:	d0f2      	beq.n	80004d8 <FLASH_EnableWriteProtection+0x64>
 80004f2:	e005      	b.n	8000500 <FLASH_EnableWriteProtection+0x8c>
    {
      OB->WRP3 = WRP3_Data;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <FLASH_EnableWriteProtection+0xa8>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 80004fa:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80004fc:	f7ff ff34 	bl	8000368 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_TIMEOUT)
 8000500:	2805      	cmp	r0, #5
 8000502:	d005      	beq.n	8000510 <FLASH_EnableWriteProtection+0x9c>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <FLASH_EnableWriteProtection+0xa0>)
 8000506:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800050a:	6911      	ldr	r1, [r2, #16]
 800050c:	400b      	ands	r3, r1
 800050e:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8000510:	bd10      	pop	{r4, pc}
 8000512:	bf00      	nop
 8000514:	40022000 	.word	0x40022000
 8000518:	45670123 	.word	0x45670123
 800051c:	1ffff800 	.word	0x1ffff800

08000520 <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8000528:	460e      	mov	r6, r1
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800052a:	f7ff ff1d 	bl	8000368 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800052e:	2804      	cmp	r0, #4
 8000530:	d115      	bne.n	800055e <FLASH_ProgramOptionByteData+0x3e>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8000532:	4c0b      	ldr	r4, [pc, #44]	; (8000560 <FLASH_ProgramOptionByteData+0x40>)
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <FLASH_ProgramOptionByteData+0x44>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(__IO uint16_t*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000536:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800053a:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800053c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000540:	60a3      	str	r3, [r4, #8]
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8000542:	6923      	ldr	r3, [r4, #16]
 8000544:	f043 0310 	orr.w	r3, r3, #16
 8000548:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 800054a:	802e      	strh	r6, [r5, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800054c:	f7ff ff0c 	bl	8000368 <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 8000550:	2805      	cmp	r0, #5
 8000552:	d004      	beq.n	800055e <FLASH_ProgramOptionByteData+0x3e>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8000554:	6922      	ldr	r2, [r4, #16]
 8000556:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800055a:	4013      	ands	r3, r2
 800055c:	6123      	str	r3, [r4, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	40022000 	.word	0x40022000
 8000564:	45670123 	.word	0x45670123

08000568 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800056c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8000570:	460e      	mov	r6, r1
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000572:	f7ff fef9 	bl	8000368 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8000576:	2804      	cmp	r0, #4
 8000578:	d10e      	bne.n	8000598 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 800057a:	4c08      	ldr	r4, [pc, #32]	; (800059c <FLASH_ProgramHalfWord+0x34>)
  
    *(__IO uint16_t*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800057c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8000580:	6923      	ldr	r3, [r4, #16]
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = Data;
 8000588:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800058a:	f7ff feed 	bl	8000368 <FLASH_WaitForLastOperation>
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 800058e:	6922      	ldr	r2, [r4, #16]
 8000590:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000594:	4013      	ands	r3, r2
 8000596:	6123      	str	r3, [r4, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
}
 8000598:	bd70      	pop	{r4, r5, r6, pc}
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80005a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 80005a2:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80005a4:	4606      	mov	r6, r0
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80005a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80005aa:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 80005ac:	9301      	str	r3, [sp, #4]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80005ae:	f7ff fedb 	bl	8000368 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80005b2:	2804      	cmp	r0, #4
 80005b4:	d119      	bne.n	80005ea <FLASH_ProgramWord+0x4a>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80005b6:	4c0d      	ldr	r4, [pc, #52]	; (80005ec <FLASH_ProgramWord+0x4c>)
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80005b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80005bc:	6923      	ldr	r3, [r4, #16]
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 80005c4:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80005c6:	f7ff fecf 	bl	8000368 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 80005ca:	2804      	cmp	r0, #4
 80005cc:	d108      	bne.n	80005e0 <FLASH_ProgramWord+0x40>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 80005ce:	3602      	adds	r6, #2
 80005d0:	9601      	str	r6, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 80005d2:	9b01      	ldr	r3, [sp, #4]
 80005d4:	0c2d      	lsrs	r5, r5, #16
 80005d6:	801d      	strh	r5, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80005d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005dc:	f7ff fec4 	bl	8000368 <FLASH_WaitForLastOperation>
      FLASH->CR &= CR_PG_Reset;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 80005e0:	6922      	ldr	r2, [r4, #16]
 80005e2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80005e6:	4013      	ands	r3, r2
 80005e8:	6123      	str	r3, [r4, #16]
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
}
 80005ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80005ec:	40022000 	.word	0x40022000

080005f0 <FLASH_EraseOptionBytes>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  uint16_t rdptmp = RDP_Key;

  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 80005f2:	f7ff fe5f 	bl	80002b4 <FLASH_GetReadOutProtectionStatus>
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
  uint16_t rdptmp = RDP_Key;
 80005f6:	2800      	cmp	r0, #0
 80005f8:	bf0c      	ite	eq
 80005fa:	25a5      	moveq	r5, #165	; 0xa5
 80005fc:	2500      	movne	r5, #0
  {
    rdptmp = 0x00;  
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80005fe:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000602:	f7ff feb1 	bl	8000368 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8000606:	2804      	cmp	r0, #4
 8000608:	d12b      	bne.n	8000662 <FLASH_EraseOptionBytes+0x72>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800060a:	4c16      	ldr	r4, [pc, #88]	; (8000664 <FLASH_EraseOptionBytes+0x74>)
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <FLASH_EraseOptionBytes+0x78>)
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800060e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8000612:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8000614:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8000618:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 800061a:	6923      	ldr	r3, [r4, #16]
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8000622:	6923      	ldr	r3, [r4, #16]
 8000624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000628:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800062a:	f7ff fe9d 	bl	8000368 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 800062e:	2804      	cmp	r0, #4
 8000630:	d10e      	bne.n	8000650 <FLASH_EraseOptionBytes+0x60>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8000632:	6922      	ldr	r2, [r4, #16]
 8000634:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8000638:	4013      	ands	r3, r2
 800063a:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 800063c:	6923      	ldr	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800063e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6123      	str	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <FLASH_EraseOptionBytes+0x7c>)
 800064a:	801d      	strh	r5, [r3, #0]
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800064c:	f7ff fe8c 	bl	8000368 <FLASH_WaitForLastOperation>
 
      if(status != FLASH_TIMEOUT)
 8000650:	2805      	cmp	r0, #5
 8000652:	d101      	bne.n	8000658 <FLASH_EraseOptionBytes+0x68>
  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
  {
    rdptmp = 0x00;  
 8000654:	2005      	movs	r0, #5
 8000656:	bd38      	pop	{r3, r4, r5, pc}
    else
    {
      if (status != FLASH_TIMEOUT)
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8000658:	6922      	ldr	r2, [r4, #16]
 800065a:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800065e:	4013      	ands	r3, r2
 8000660:	6123      	str	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8000662:	bd38      	pop	{r3, r4, r5, pc}
 8000664:	40022000 	.word	0x40022000
 8000668:	45670123 	.word	0x45670123
 800066c:	1ffff800 	.word	0x1ffff800

08000670 <FLASH_EraseAllPages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
 8000670:	b510      	push	{r4, lr}
    /* Disable the MER Bit */
    FLASH->CR2 &= CR_MER_Reset;
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8000672:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000676:	f7ff fe77 	bl	8000368 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800067a:	2804      	cmp	r0, #4
 800067c:	d111      	bne.n	80006a2 <FLASH_EraseAllPages+0x32>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800067e:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <FLASH_EraseAllPages+0x34>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000680:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8000684:	6923      	ldr	r3, [r4, #16]
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000692:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8000694:	f7ff fe68 	bl	8000368 <FLASH_WaitForLastOperation>

    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 8000698:	6922      	ldr	r2, [r4, #16]
 800069a:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 800069e:	4013      	ands	r3, r2
 80006a0:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 80006a2:	bd10      	pop	{r4, pc}
 80006a4:	40022000 	.word	0x40022000

080006a8 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 80006a8:	b538      	push	{r3, r4, r5, lr}
 80006aa:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80006ac:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80006b0:	f7ff fe5a 	bl	8000368 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80006b4:	2804      	cmp	r0, #4
 80006b6:	d112      	bne.n	80006de <FLASH_ErasePage+0x36>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80006b8:	4c09      	ldr	r4, [pc, #36]	; (80006e0 <FLASH_ErasePage+0x38>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80006ba:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80006be:	6923      	ldr	r3, [r4, #16]
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 80006c6:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 80006c8:	6923      	ldr	r3, [r4, #16]
 80006ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ce:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80006d0:	f7ff fe4a 	bl	8000368 <FLASH_WaitForLastOperation>
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 80006d4:	6922      	ldr	r2, [r4, #16]
 80006d6:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 80006da:	4013      	ands	r3, r2
 80006dc:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	40022000 	.word	0x40022000

080006e4 <FLASH_WaitForLastBank1Operation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{ 
 80006e4:	b510      	push	{r4, lr}
 80006e6:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80006e8:	f7ff fe2a 	bl	8000340 <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80006ec:	e002      	b.n	80006f4 <FLASH_WaitForLastBank1Operation+0x10>
  {
    status = FLASH_GetBank1Status();
 80006ee:	f7ff fe27 	bl	8000340 <FLASH_GetBank1Status>
    Timeout--;
 80006f2:	3c01      	subs	r4, #1
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80006f4:	2801      	cmp	r0, #1
 80006f6:	d103      	bne.n	8000700 <FLASH_WaitForLastBank1Operation+0x1c>
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d1f8      	bne.n	80006ee <FLASH_WaitForLastBank1Operation+0xa>
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80006fc:	2005      	movs	r0, #5
 80006fe:	bd10      	pop	{r4, pc}
 8000700:	2c00      	cmp	r4, #0
 8000702:	bf08      	it	eq
 8000704:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 8000706:	bd10      	pop	{r4, pc}

08000708 <FLASH_EraseAllBank1Pages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllBank1Pages(void)
{
 8000708:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 800070a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800070e:	f7ff ffe9 	bl	80006e4 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8000712:	2804      	cmp	r0, #4
 8000714:	d111      	bne.n	800073a <FLASH_EraseAllBank1Pages+0x32>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8000716:	4c09      	ldr	r4, [pc, #36]	; (800073c <FLASH_EraseAllBank1Pages+0x34>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 8000718:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800071c:	6923      	ldr	r3, [r4, #16]
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072a:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 800072c:	f7ff ffda 	bl	80006e4 <FLASH_WaitForLastBank1Operation>
    
    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 8000730:	6922      	ldr	r2, [r4, #16]
 8000732:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 8000736:	4013      	ands	r3, r2
 8000738:	6123      	str	r3, [r4, #16]
  }    
  /* Return the Erase Status */
  return status;
}
 800073a:	bd10      	pop	{r4, pc}
 800073c:	40022000 	.word	0x40022000

08000740 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000740:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <GPIO_DeInit+0x90>)
 8000744:	4298      	cmp	r0, r3
 8000746:	d105      	bne.n	8000754 <GPIO_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000748:	2004      	movs	r0, #4
 800074a:	2101      	movs	r1, #1
 800074c:	f000 fae8 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000750:	2004      	movs	r0, #4
 8000752:	e036      	b.n	80007c2 <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOB)
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <GPIO_DeInit+0x94>)
 8000756:	4298      	cmp	r0, r3
 8000758:	d105      	bne.n	8000766 <GPIO_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800075a:	2008      	movs	r0, #8
 800075c:	2101      	movs	r1, #1
 800075e:	f000 fadf 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8000762:	2008      	movs	r0, #8
 8000764:	e02d      	b.n	80007c2 <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOC)
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <GPIO_DeInit+0x98>)
 8000768:	4298      	cmp	r0, r3
 800076a:	d105      	bne.n	8000778 <GPIO_DeInit+0x38>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800076c:	2010      	movs	r0, #16
 800076e:	2101      	movs	r1, #1
 8000770:	f000 fad6 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000774:	2010      	movs	r0, #16
 8000776:	e024      	b.n	80007c2 <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOD)
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <GPIO_DeInit+0x9c>)
 800077a:	4298      	cmp	r0, r3
 800077c:	d105      	bne.n	800078a <GPIO_DeInit+0x4a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 800077e:	2020      	movs	r0, #32
 8000780:	2101      	movs	r1, #1
 8000782:	f000 facd 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8000786:	2020      	movs	r0, #32
 8000788:	e01b      	b.n	80007c2 <GPIO_DeInit+0x82>
  }    
  else if (GPIOx == GPIOE)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <GPIO_DeInit+0xa0>)
 800078c:	4298      	cmp	r0, r3
 800078e:	d105      	bne.n	800079c <GPIO_DeInit+0x5c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000790:	2040      	movs	r0, #64	; 0x40
 8000792:	2101      	movs	r1, #1
 8000794:	f000 fac4 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000798:	2040      	movs	r0, #64	; 0x40
 800079a:	e012      	b.n	80007c2 <GPIO_DeInit+0x82>
  } 
  else if (GPIOx == GPIOF)
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <GPIO_DeInit+0xa4>)
 800079e:	4298      	cmp	r0, r3
 80007a0:	d105      	bne.n	80007ae <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	2101      	movs	r1, #1
 80007a6:	f000 fabb 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80007aa:	2080      	movs	r0, #128	; 0x80
 80007ac:	e009      	b.n	80007c2 <GPIO_DeInit+0x82>
  }
  else
  {
    if (GPIOx == GPIOG)
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <GPIO_DeInit+0xa8>)
 80007b0:	4298      	cmp	r0, r3
 80007b2:	d10b      	bne.n	80007cc <GPIO_DeInit+0x8c>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80007b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007b8:	2101      	movs	r1, #1
 80007ba:	f000 fab1 	bl	8000d20 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80007be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007c2:	2100      	movs	r1, #0
    }
  }
}
 80007c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80007c8:	f000 baaa 	b.w	8000d20 <RCC_APB2PeriphResetCmd>
 80007cc:	bd08      	pop	{r3, pc}
 80007ce:	bf00      	nop
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40011400 	.word	0x40011400
 80007e0:	40011800 	.word	0x40011800
 80007e4:	40011c00 	.word	0x40011c00
 80007e8:	40012000 	.word	0x40012000

080007ec <GPIO_AFIODeInit>:
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80007ec:	2001      	movs	r0, #1
 80007ee:	4601      	mov	r1, r0
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 80007f0:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80007f2:	f000 fa95 	bl	8000d20 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80007f6:	2001      	movs	r0, #1
 80007f8:	2100      	movs	r1, #0
}
 80007fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80007fe:	f000 ba8f 	b.w	8000d20 <RCC_APB2PeriphResetCmd>

08000802 <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000802:	688b      	ldr	r3, [r1, #8]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000808:	06da      	lsls	r2, r3, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800080a:	bf48      	it	mi
 800080c:	684a      	ldrmi	r2, [r1, #4]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800080e:	8809      	ldrh	r1, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000810:	f003 040f 	and.w	r4, r3, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000814:	bf48      	it	mi
 8000816:	4314      	orrmi	r4, r2
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000818:	f011 0fff 	tst.w	r1, #255	; 0xff
 800081c:	d01f      	beq.n	800085e <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 800081e:	6805      	ldr	r5, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000820:	2200      	movs	r2, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000822:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000826:	f04f 080f 	mov.w	r8, #15
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
 800082a:	fa0c f702 	lsl.w	r7, ip, r2
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800082e:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 8000832:	42be      	cmp	r6, r7
 8000834:	d10f      	bne.n	8000856 <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
 8000836:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000838:	fa08 f907 	lsl.w	r9, r8, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800083c:	fa04 f707 	lsl.w	r7, r4, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000840:	ea25 0509 	bic.w	r5, r5, r9
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000844:	2b28      	cmp	r3, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000846:	ea45 0507 	orr.w	r5, r5, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800084a:	d101      	bne.n	8000850 <GPIO_Init+0x4e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800084c:	6146      	str	r6, [r0, #20]
 800084e:	e002      	b.n	8000856 <GPIO_Init+0x54>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000850:	2b48      	cmp	r3, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000852:	bf08      	it	eq
 8000854:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000856:	3201      	adds	r2, #1
 8000858:	2a08      	cmp	r2, #8
 800085a:	d1e6      	bne.n	800082a <GPIO_Init+0x28>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800085c:	6005      	str	r5, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800085e:	29ff      	cmp	r1, #255	; 0xff
 8000860:	d921      	bls.n	80008a6 <GPIO_Init+0xa4>
  {
    tmpreg = GPIOx->CRH;
 8000862:	6845      	ldr	r5, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000864:	2200      	movs	r2, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000866:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800086a:	f04f 080f 	mov.w	r8, #15
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 800086e:	f102 0708 	add.w	r7, r2, #8
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000872:	fa0c f707 	lsl.w	r7, ip, r7
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000876:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 800087a:	42be      	cmp	r6, r7
 800087c:	d10f      	bne.n	800089e <GPIO_Init+0x9c>
      {
        pos = pinpos << 2;
 800087e:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000880:	fa08 f907 	lsl.w	r9, r8, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000884:	fa04 f707 	lsl.w	r7, r4, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000888:	ea25 0509 	bic.w	r5, r5, r9
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800088c:	2b28      	cmp	r3, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800088e:	ea45 0507 	orr.w	r5, r5, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000892:	d101      	bne.n	8000898 <GPIO_Init+0x96>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000894:	6146      	str	r6, [r0, #20]
 8000896:	e002      	b.n	800089e <GPIO_Init+0x9c>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000898:	2b48      	cmp	r3, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800089a:	bf08      	it	eq
 800089c:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800089e:	3201      	adds	r2, #1
 80008a0:	2a08      	cmp	r2, #8
 80008a2:	d1e4      	bne.n	800086e <GPIO_Init+0x6c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80008a4:	6045      	str	r5, [r0, #4]
 80008a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080008aa <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ae:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80008b0:	2302      	movs	r3, #2
 80008b2:	6043      	str	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80008b4:	2304      	movs	r3, #4
 80008b6:	6083      	str	r3, [r0, #8]
 80008b8:	4770      	bx	lr

080008ba <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008ba:	6883      	ldr	r3, [r0, #8]
 80008bc:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80008be:	bf0c      	ite	eq
 80008c0:	2000      	moveq	r0, #0
 80008c2:	2001      	movne	r0, #1
 80008c4:	4770      	bx	lr

080008c6 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80008c6:	6880      	ldr	r0, [r0, #8]
}
 80008c8:	b280      	uxth	r0, r0
 80008ca:	4770      	bx	lr

080008cc <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008cc:	68c3      	ldr	r3, [r0, #12]
 80008ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80008d0:	bf0c      	ite	eq
 80008d2:	2000      	moveq	r0, #0
 80008d4:	2001      	movne	r0, #1
 80008d6:	4770      	bx	lr

080008d8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80008d8:	68c0      	ldr	r0, [r0, #12]
}
 80008da:	b280      	uxth	r0, r0
 80008dc:	4770      	bx	lr

080008de <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80008de:	6101      	str	r1, [r0, #16]
 80008e0:	4770      	bx	lr

080008e2 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80008e2:	6141      	str	r1, [r0, #20]
 80008e4:	4770      	bx	lr

080008e6 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80008e6:	b10a      	cbz	r2, 80008ec <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008e8:	6101      	str	r1, [r0, #16]
 80008ea:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80008ec:	6141      	str	r1, [r0, #20]
 80008ee:	4770      	bx	lr

080008f0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80008f0:	60c1      	str	r1, [r0, #12]
 80008f2:	4770      	bx	lr

080008f4 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80008f4:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80008f8:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80008fa:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80008fc:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80008fe:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000900:	6983      	ldr	r3, [r0, #24]
 8000902:	4770      	bx	lr

08000904 <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <GPIO_EventOutputConfig+0x18>)
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000906:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000908:	6814      	ldr	r4, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 800090a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800090e:	4023      	ands	r3, r4
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8000910:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  tmpreg |= GPIO_PinSource;
 8000914:	430b      	orrs	r3, r1
  AFIO->EVCR = tmpreg;
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	bd10      	pop	{r4, pc}
 800091a:	bf00      	nop
 800091c:	40010000 	.word	0x40010000

08000920 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <GPIO_EventOutputCmd+0x8>)
 8000922:	6018      	str	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	4220001c 	.word	0x4220001c

0800092c <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800092c:	2800      	cmp	r0, #0
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <GPIO_PinRemapConfig+0x60>)
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000930:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000932:	f400 1440 	and.w	r4, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 8000936:	bfb4      	ite	lt
 8000938:	69db      	ldrlt	r3, [r3, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800093a:	685b      	ldrge	r3, [r3, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800093c:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8000940:	b282      	uxth	r2, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000942:	d107      	bne.n	8000954 <GPIO_PinRemapConfig+0x28>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000944:	4c11      	ldr	r4, [pc, #68]	; (800098c <GPIO_PinRemapConfig+0x60>)
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000946:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800094a:	6865      	ldr	r5, [r4, #4]
 800094c:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8000950:	6065      	str	r5, [r4, #4]
 8000952:	e00f      	b.n	8000974 <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000954:	02c4      	lsls	r4, r0, #11
 8000956:	d505      	bpl.n	8000964 <GPIO_PinRemapConfig+0x38>
  else
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000958:	f3c0 4403 	ubfx	r4, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800095c:	2503      	movs	r5, #3
 800095e:	fa05 f404 	lsl.w	r4, r5, r4
 8000962:	e003      	b.n	800096c <GPIO_PinRemapConfig+0x40>
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000964:	0d44      	lsrs	r4, r0, #21
 8000966:	0124      	lsls	r4, r4, #4
 8000968:	fa02 f404 	lsl.w	r4, r2, r4
 800096c:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000970:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8000974:	b121      	cbz	r1, 8000980 <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000976:	0d41      	lsrs	r1, r0, #21
 8000978:	0109      	lsls	r1, r1, #4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	4313      	orrs	r3, r2
 8000980:	4a02      	ldr	r2, [pc, #8]	; (800098c <GPIO_PinRemapConfig+0x60>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000982:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 8000984:	bfb4      	ite	lt
 8000986:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000988:	6053      	strge	r3, [r2, #4]
 800098a:	bd30      	pop	{r4, r5, pc}
 800098c:	40010000 	.word	0x40010000

08000990 <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000990:	f001 0203 	and.w	r2, r1, #3
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000994:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000996:	0092      	lsls	r2, r2, #2
 8000998:	240f      	movs	r4, #15
 800099a:	fa04 f402 	lsl.w	r4, r4, r2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800099e:	fa00 f002 	lsl.w	r0, r0, r2
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <GPIO_EXTILineConfig+0x30>)
 80009a4:	0889      	lsrs	r1, r1, #2
 80009a6:	3102      	adds	r1, #2
 80009a8:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80009ac:	ea25 0404 	bic.w	r4, r5, r4
 80009b0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80009b4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80009b8:	4304      	orrs	r4, r0
 80009ba:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 80009be:	bd30      	pop	{r4, r5, pc}
 80009c0:	40010000 	.word	0x40010000

080009c4 <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 80009c4:	4b01      	ldr	r3, [pc, #4]	; (80009cc <GPIO_ETH_MediaInterfaceConfig+0x8>)
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	422000dc 	.word	0x422000dc

080009d0 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <RCC_DeInit+0x44>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f042 0201 	orr.w	r2, r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 80009da:	6859      	ldr	r1, [r3, #4]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <RCC_DeInit+0x48>)
 80009de:	400a      	ands	r2, r1
 80009e0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80009e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009f4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80009fc:	605a      	str	r2, [r3, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8000a04:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8000a06:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000a0a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	f0ff0000 	.word	0xf0ff0000

08000a1c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000a1e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a28:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a30:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000a32:	d003      	beq.n	8000a3c <RCC_HSEConfig+0x20>
 8000a34:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000a38:	d108      	bne.n	8000a4c <RCC_HSEConfig+0x30>
 8000a3a:	e003      	b.n	8000a44 <RCC_HSEConfig+0x28>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a42:	e002      	b.n	8000a4a <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <RCC_AdjustHSICalibrationValue+0x10>)
 8000a56:	681a      	ldr	r2, [r3, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8000a58:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000a5c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 8000a60:	6018      	str	r0, [r3, #0]
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000

08000a68 <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000a68:	4b01      	ldr	r3, [pc, #4]	; (8000a70 <RCC_HSICmd+0x8>)
 8000a6a:	6018      	str	r0, [r3, #0]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	42420000 	.word	0x42420000

08000a74 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <RCC_PLLConfig+0x10>)
 8000a76:	685a      	ldr	r2, [r3, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000a78:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000a7c:	4310      	orrs	r0, r2
 8000a7e:	4301      	orrs	r1, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a80:	6059      	str	r1, [r3, #4]
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <RCC_PLLCmd+0x8>)
 8000a8a:	6018      	str	r0, [r3, #0]
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	42420060 	.word	0x42420060

08000a94 <RCC_PREDIV1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <RCC_PREDIV1Config+0x14>)
 8000a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 8000a98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a9c:	f022 020f 	bic.w	r2, r2, #15
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 8000aa0:	4310      	orrs	r0, r2
 8000aa2:	4301      	orrs	r1, r0
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8000aa4:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000

08000aac <RCC_PREDIV2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <RCC_PREDIV2Config+0x10>)
 8000aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
 8000ab0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
 8000ab4:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8000ab6:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <RCC_PLL2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <RCC_PLL2Config+0x10>)
 8000ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
 8000ac4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
 8000ac8:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8000aca:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <RCC_PLL2Cmd>:
void RCC_PLL2Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 8000ad4:	4b01      	ldr	r3, [pc, #4]	; (8000adc <RCC_PLL2Cmd+0x8>)
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	42420068 	.word	0x42420068

08000ae0 <RCC_PLL3Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <RCC_PLL3Config+0x10>)
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
 8000ae4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
 8000ae8:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8000aea:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <RCC_PLL3Cmd>:
void RCC_PLL3Cmd(FunctionalState NewState)
{
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <RCC_PLL3Cmd+0x8>)
 8000af6:	6018      	str	r0, [r3, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	42420070 	.word	0x42420070

08000b00 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <RCC_SYSCLKConfig+0x10>)
 8000b02:	685a      	ldr	r2, [r3, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000b04:	f022 0203 	bic.w	r2, r2, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000b08:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b0a:	6058      	str	r0, [r3, #4]
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <RCC_GetSYSCLKSource+0xc>)
 8000b16:	6858      	ldr	r0, [r3, #4]
}
 8000b18:	f000 000c 	and.w	r0, r0, #12
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <RCC_HCLKConfig+0x10>)
 8000b26:	685a      	ldr	r2, [r3, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000b28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000b2c:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b2e:	6058      	str	r0, [r3, #4]
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <RCC_PCLK1Config+0x10>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000b40:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b42:	6058      	str	r0, [r3, #4]
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <RCC_PCLK2Config+0x10>)
 8000b4e:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000b50:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000b54:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b58:	6058      	str	r0, [r3, #4]
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000

08000b60 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000b62:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b64:	b109      	cbz	r1, 8000b6a <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000b66:	4310      	orrs	r0, r2
 8000b68:	e001      	b.n	8000b6e <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000b6a:	ea22 0000 	bic.w	r0, r2, r0
 8000b6e:	7018      	strb	r0, [r3, #0]
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021009 	.word	0x40021009

08000b78 <RCC_OTGFSCLKConfig>:
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <RCC_OTGFSCLKConfig+0x8>)
 8000b7a:	6018      	str	r0, [r3, #0]
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	424200d8 	.word	0x424200d8

08000b84 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <RCC_ADCCLKConfig+0x10>)
 8000b86:	685a      	ldr	r2, [r3, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000b88:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000b8c:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b8e:	6058      	str	r0, [r3, #4]
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <RCC_I2S2CLKConfig>:
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <RCC_I2S2CLKConfig+0x8>)
 8000b9a:	6018      	str	r0, [r3, #0]
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	424205c4 	.word	0x424205c4

08000ba4 <RCC_I2S3CLKConfig>:
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <RCC_I2S3CLKConfig+0x8>)
 8000ba6:	6018      	str	r0, [r3, #0]
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	424205c8 	.word	0x424205c8

08000bb0 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <RCC_LSEConfig+0x1c>)
 8000bb2:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000bb4:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000bb6:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000bb8:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000bba:	d002      	beq.n	8000bc2 <RCC_LSEConfig+0x12>
 8000bbc:	2804      	cmp	r0, #4
 8000bbe:	d104      	bne.n	8000bca <RCC_LSEConfig+0x1a>
 8000bc0:	e001      	b.n	8000bc6 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000bc2:	7018      	strb	r0, [r3, #0]
      break;
 8000bc4:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	4770      	bx	lr
 8000bcc:	40021020 	.word	0x40021020

08000bd0 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <RCC_LSICmd+0x8>)
 8000bd2:	6018      	str	r0, [r3, #0]
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	42420480 	.word	0x42420480

08000bdc <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <RCC_RTCCLKConfig+0xc>)
 8000bde:	6a1a      	ldr	r2, [r3, #32]
 8000be0:	4310      	orrs	r0, r2
 8000be2:	6218      	str	r0, [r3, #32]
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000bec:	4b01      	ldr	r3, [pc, #4]	; (8000bf4 <RCC_RTCCLKCmd+0x8>)
 8000bee:	6018      	str	r0, [r3, #0]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	4242043c 	.word	0x4242043c

08000bf8 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000bf8:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <RCC_GetClocksFreq+0xb0>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bfa:	b530      	push	{r4, r5, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000bfc:	6853      	ldr	r3, [r2, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d003      	beq.n	8000c0e <RCC_GetClocksFreq+0x16>
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d003      	beq.n	8000c12 <RCC_GetClocksFreq+0x1a>
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <RCC_GetClocksFreq+0xb4>)
 8000c0c:	e029      	b.n	8000c62 <RCC_GetClocksFreq+0x6a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <RCC_GetClocksFreq+0xb8>)
 8000c10:	e027      	b.n	8000c62 <RCC_GetClocksFreq+0x6a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c12:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c14:	6852      	ldr	r2, [r2, #4]
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 8000c16:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllmull != 0x0D)
 8000c1a:	2b0d      	cmp	r3, #13
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c1c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 #endif
      }
#else
      pllmull = pllmull >> 18;
      
      if (pllmull != 0x0D)
 8000c20:	d001      	beq.n	8000c26 <RCC_GetClocksFreq+0x2e>
      {
         pllmull += 2;
 8000c22:	3302      	adds	r3, #2
 8000c24:	e000      	b.n	8000c28 <RCC_GetClocksFreq+0x30>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 8000c26:	2306      	movs	r3, #6
      }
            
      if (pllsource == 0x00)
 8000c28:	b912      	cbnz	r2, 8000c30 <RCC_GetClocksFreq+0x38>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c2a:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <RCC_GetClocksFreq+0xbc>)
 8000c2c:	4353      	muls	r3, r2
 8000c2e:	e018      	b.n	8000c62 <RCC_GetClocksFreq+0x6a>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <RCC_GetClocksFreq+0xb0>)
 8000c32:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000c34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000c36:	f001 010f 	and.w	r1, r1, #15
 8000c3a:	3101      	adds	r1, #1
        
        if (prediv1source == 0)
 8000c3c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000c40:	4c1b      	ldr	r4, [pc, #108]	; (8000cb0 <RCC_GetClocksFreq+0xb8>)
 8000c42:	d100      	bne.n	8000c46 <RCC_GetClocksFreq+0x4e>
 8000c44:	e00a      	b.n	8000c5c <RCC_GetClocksFreq+0x64>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8000c46:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8000c48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8000c4a:	f3c5 1503 	ubfx	r5, r5, #4, #4
 8000c4e:	3501      	adds	r5, #1
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8000c50:	f3c2 2203 	ubfx	r2, r2, #8, #4
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8000c54:	fbb4 f4f5 	udiv	r4, r4, r5
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8000c58:	3202      	adds	r2, #2
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8000c5a:	4354      	muls	r4, r2
 8000c5c:	fbb4 f1f1 	udiv	r1, r4, r1
 8000c60:	434b      	muls	r3, r1
 8000c62:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <RCC_GetClocksFreq+0xb0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000c66:	4914      	ldr	r1, [pc, #80]	; (8000cb8 <RCC_GetClocksFreq+0xc0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000c68:	685a      	ldr	r2, [r3, #4]
  tmp = tmp >> 4;
 8000c6a:	f3c2 1203 	ubfx	r2, r2, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000c6e:	5c8c      	ldrb	r4, [r1, r2]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c70:	6802      	ldr	r2, [r0, #0]
 8000c72:	fa22 f204 	lsr.w	r2, r2, r4
 8000c76:	6042      	str	r2, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000c78:	685c      	ldr	r4, [r3, #4]
  tmp = tmp >> 8;
 8000c7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000c7e:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c80:	fa22 f404 	lsr.w	r4, r2, r4
 8000c84:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000c86:	685c      	ldr	r4, [r3, #4]
  tmp = tmp >> 11;
 8000c88:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000c8c:	5d09      	ldrb	r1, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c8e:	fa22 f201 	lsr.w	r2, r2, r1
 8000c92:	60c2      	str	r2, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000c94:	685b      	ldr	r3, [r3, #4]
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8000c96:	4909      	ldr	r1, [pc, #36]	; (8000cbc <RCC_GetClocksFreq+0xc4>)
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
 8000c98:	f3c3 3381 	ubfx	r3, r3, #14, #2
  presc = ADCPrescTable[tmp];
 8000c9c:	5ccb      	ldrb	r3, [r1, r3]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000c9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ca2:	6102      	str	r2, [r0, #16]
 8000ca4:	bd30      	pop	{r4, r5, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	007a1200 	.word	0x007a1200
 8000cb0:	017d7840 	.word	0x017d7840
 8000cb4:	003d0900 	.word	0x003d0900
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	2000000c 	.word	0x2000000c

08000cc0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000cc2:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cc4:	b109      	cbz	r1, 8000cca <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000cc6:	4310      	orrs	r0, r2
 8000cc8:	e001      	b.n	8000cce <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000cca:	ea22 0000 	bic.w	r0, r2, r0
 8000cce:	6158      	str	r0, [r3, #20]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cda:	699a      	ldr	r2, [r3, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cdc:	b109      	cbz	r1, 8000ce2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	e001      	b.n	8000ce6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ce2:	ea22 0000 	bic.w	r0, r2, r0
 8000ce6:	6198      	str	r0, [r3, #24]
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cf2:	69da      	ldr	r2, [r3, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cf4:	b109      	cbz	r1, 8000cfa <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cf6:	4310      	orrs	r0, r2
 8000cf8:	e001      	b.n	8000cfe <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000cfa:	ea22 0000 	bic.w	r0, r2, r0
 8000cfe:	61d8      	str	r0, [r3, #28]
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <RCC_AHBPeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d0c:	b109      	cbz	r1, 8000d12 <RCC_AHBPeriphResetCmd+0xa>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000d0e:	4310      	orrs	r0, r2
 8000d10:	e001      	b.n	8000d16 <RCC_AHBPeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000d12:	ea22 0000 	bic.w	r0, r2, r0
 8000d16:	6298      	str	r0, [r3, #40]	; 0x28
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d22:	68da      	ldr	r2, [r3, #12]
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d24:	b109      	cbz	r1, 8000d2a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d26:	4310      	orrs	r0, r2
 8000d28:	e001      	b.n	8000d2e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000d2a:	ea22 0000 	bic.w	r0, r2, r0
 8000d2e:	60d8      	str	r0, [r3, #12]
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d3a:	691a      	ldr	r2, [r3, #16]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d3c:	b109      	cbz	r1, 8000d42 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d3e:	4310      	orrs	r0, r2
 8000d40:	e001      	b.n	8000d46 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000d42:	ea22 0000 	bic.w	r0, r2, r0
 8000d46:	6118      	str	r0, [r3, #16]
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000d50:	4b01      	ldr	r3, [pc, #4]	; (8000d58 <RCC_BackupResetCmd+0x8>)
 8000d52:	6018      	str	r0, [r3, #0]
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	42420440 	.word	0x42420440

08000d5c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <RCC_ClockSecuritySystemCmd+0x8>)
 8000d5e:	6018      	str	r0, [r3, #0]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	4242004c 	.word	0x4242004c

08000d68 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <RCC_MCOConfig+0x8>)
 8000d6a:	7018      	strb	r0, [r3, #0]
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40021007 	.word	0x40021007

08000d74 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000d74:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000d76:	2a01      	cmp	r2, #1
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <RCC_GetFlagStatus+0x28>)
 8000d7a:	d101      	bne.n	8000d80 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	e003      	b.n	8000d88 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000d80:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8000d82:	bf0c      	ite	eq
 8000d84:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000d86:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f000 001f 	and.w	r0, r0, #31
 8000d8e:	fa02 f000 	lsl.w	r0, r2, r0
 8000d92:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8000d94:	bf0c      	ite	eq
 8000d96:	2000      	moveq	r0, #0
 8000d98:	2001      	movne	r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000

08000da0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000da0:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000da6:	2031      	movs	r0, #49	; 0x31
 8000da8:	f7ff ffe4 	bl	8000d74 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000dac:	9b01      	ldr	r3, [sp, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000db2:	9b01      	ldr	r3, [sp, #4]
 8000db4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000db8:	d001      	beq.n	8000dbe <RCC_WaitForHSEStartUp+0x1e>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d0f3      	beq.n	8000da6 <RCC_WaitForHSEStartUp+0x6>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	2031      	movs	r0, #49	; 0x31
 8000dc0:	f7ff ffd8 	bl	8000d74 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8000dc4:	3000      	adds	r0, #0
 8000dc6:	bf18      	it	ne
 8000dc8:	2001      	movne	r0, #1
 8000dca:	bd0e      	pop	{r1, r2, r3, pc}

08000dcc <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <RCC_ClearFlag+0xc>)
 8000dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dd0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <RCC_GetITStatus+0x10>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000de2:	bf0c      	ite	eq
 8000de4:	2000      	moveq	r0, #0
 8000de6:	2001      	movne	r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000df0:	4b01      	ldr	r3, [pc, #4]	; (8000df8 <RCC_ClearITPendingBit+0x8>)
 8000df2:	7018      	strb	r0, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	4002100a 	.word	0x4002100a

08000dfc <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000dfc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <USART_DeInit+0x84>)
 8000e00:	4298      	cmp	r0, r3
 8000e02:	d10b      	bne.n	8000e1c <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000e04:	2101      	movs	r1, #1
 8000e06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e0a:	f7ff ff89 	bl	8000d20 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000e0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e12:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8000e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000e18:	f7ff bf82 	b.w	8000d20 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <USART_DeInit+0x88>)
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d107      	bne.n	8000e32 <USART_DeInit+0x36>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000e22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e26:	2101      	movs	r1, #1
 8000e28:	f7ff ff86 	bl	8000d38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000e2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e30:	e01f      	b.n	8000e72 <USART_DeInit+0x76>
  }
  else if (USARTx == USART3)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <USART_DeInit+0x8c>)
 8000e34:	4298      	cmp	r0, r3
 8000e36:	d107      	bne.n	8000e48 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000e38:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	f7ff ff7b 	bl	8000d38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000e42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e46:	e014      	b.n	8000e72 <USART_DeInit+0x76>
  }    
  else if (USARTx == UART4)
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <USART_DeInit+0x90>)
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d107      	bne.n	8000e5e <USART_DeInit+0x62>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000e4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e52:	2101      	movs	r1, #1
 8000e54:	f7ff ff70 	bl	8000d38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000e58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e5c:	e009      	b.n	8000e72 <USART_DeInit+0x76>
  }    
  else
  {
    if (USARTx == UART5)
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <USART_DeInit+0x94>)
 8000e60:	4298      	cmp	r0, r3
 8000e62:	d10b      	bne.n	8000e7c <USART_DeInit+0x80>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000e64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e68:	2101      	movs	r1, #1
 8000e6a:	f7ff ff65 	bl	8000d38 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000e6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e72:	2100      	movs	r1, #0
    }
  }
}
 8000e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000e78:	f7ff bf5e 	b.w	8000d38 <RCC_APB1PeriphResetCmd>
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40004c00 	.word	0x40004c00
 8000e90:	40005000 	.word	0x40005000

08000e94 <USART_Init>:
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e94:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e96:	88ca      	ldrh	r2, [r1, #6]
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e98:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e9e:	4313      	orrs	r3, r2
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ea0:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ea2:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ea4:	8983      	ldrh	r3, [r0, #12]
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ea6:	460d      	mov	r5, r1
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ea8:	88aa      	ldrh	r2, [r5, #4]
 8000eaa:	8909      	ldrh	r1, [r1, #8]
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000eac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000eb0:	430a      	orrs	r2, r1
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000eb2:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000eb6:	8969      	ldrh	r1, [r5, #10]
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000eb8:	041b      	lsls	r3, r3, #16
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000eba:	430a      	orrs	r2, r1
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000ebc:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ebe:	4313      	orrs	r3, r2
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ec0:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000ec2:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000ec4:	89aa      	ldrh	r2, [r5, #12]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000ec6:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ecc:	b087      	sub	sp, #28
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000ece:	4313      	orrs	r3, r2
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ed0:	4604      	mov	r4, r0
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ed2:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ed4:	a801      	add	r0, sp, #4
 8000ed6:	f7ff fe8f 	bl	8000bf8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <USART_Init+0xa4>)
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000edc:	89a2      	ldrh	r2, [r4, #12]
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 8000ede:	429c      	cmp	r4, r3
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000ee0:	bf0c      	ite	eq
 8000ee2:	9b04      	ldreq	r3, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000ee4:	9b03      	ldrne	r3, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ee6:	b212      	sxth	r2, r2
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	f04f 0119 	mov.w	r1, #25
 8000eee:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ef0:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ef4:	da01      	bge.n	8000efa <USART_Init+0x66>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	e000      	b.n	8000efc <USART_Init+0x68>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000efa:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000efc:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000efe:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f02:	fbb1 f2f3 	udiv	r2, r1, r3
 8000f06:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f08:	0910      	lsrs	r0, r2, #4
 8000f0a:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000f0e:	89a0      	ldrh	r0, [r4, #12]
 8000f10:	b200      	sxth	r0, r0
 8000f12:	2800      	cmp	r0, #0
 8000f14:	da06      	bge.n	8000f24 <USART_Init+0x90>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f16:	00c9      	lsls	r1, r1, #3
 8000f18:	3132      	adds	r1, #50	; 0x32
 8000f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	e005      	b.n	8000f30 <USART_Init+0x9c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f24:	0109      	lsls	r1, r1, #4
 8000f26:	3132      	adds	r1, #50	; 0x32
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f32:	8122      	strh	r2, [r4, #8]
}
 8000f34:	b007      	add	sp, #28
 8000f36:	bd30      	pop	{r4, r5, pc}
 8000f38:	40013800 	.word	0x40013800

08000f3c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000f3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f40:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f42:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000f44:	2300      	movs	r3, #0
 8000f46:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000f48:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000f4a:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f4c:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000f4e:	8183      	strh	r3, [r0, #12]
 8000f50:	4770      	bx	lr

08000f52 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000f52:	880b      	ldrh	r3, [r1, #0]
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000f54:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000f56:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f58:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000f5a:	4323      	orrs	r3, r4
 8000f5c:	888c      	ldrh	r4, [r1, #4]
 8000f5e:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f60:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8000f62:	4323      	orrs	r3, r4
 8000f64:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8000f66:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000f6a:	4313      	orrs	r3, r2
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f6c:	8203      	strh	r3, [r0, #16]
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000f70:	2300      	movs	r3, #0
 8000f72:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000f74:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000f76:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000f78:	80c3      	strh	r3, [r0, #6]
 8000f7a:	4770      	bx	lr

08000f7c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000f7c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f7e:	b119      	cbz	r1, 8000f88 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f86:	e003      	b.n	8000f90 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	0c1b      	lsrs	r3, r3, #16
 8000f90:	8183      	strh	r3, [r0, #12]
 8000f92:	4770      	bx	lr

08000f94 <USART_ITConfig>:
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f94:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000f98:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000f9a:	2401      	movs	r4, #1
 8000f9c:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000fa0:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000fa2:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000fa6:	d101      	bne.n	8000fac <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8000fa8:	300c      	adds	r0, #12
 8000faa:	e004      	b.n	8000fb6 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d101      	bne.n	8000fb4 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8000fb0:	3010      	adds	r0, #16
 8000fb2:	e000      	b.n	8000fb6 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000fb4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000fb6:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8000fb8:	b10a      	cbz	r2, 8000fbe <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	e001      	b.n	8000fc2 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000fbe:	ea23 0101 	bic.w	r1, r3, r1
 8000fc2:	6001      	str	r1, [r0, #0]
 8000fc4:	bd10      	pop	{r4, pc}

08000fc6 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000fc6:	8a83      	ldrh	r3, [r0, #20]
 8000fc8:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8000fca:	b10a      	cbz	r2, 8000fd0 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	e001      	b.n	8000fd4 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000fd0:	ea23 0101 	bic.w	r1, r3, r1
 8000fd4:	8281      	strh	r1, [r0, #20]
 8000fd6:	4770      	bx	lr

08000fd8 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8000fd8:	8a03      	ldrh	r3, [r0, #16]
 8000fda:	f023 030f 	bic.w	r3, r3, #15
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8000fe4:	8a03      	ldrh	r3, [r0, #16]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4319      	orrs	r1, r3
 8000fea:	8201      	strh	r1, [r0, #16]
 8000fec:	4770      	bx	lr

08000fee <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8000fee:	8983      	ldrh	r3, [r0, #12]
 8000ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ff4:	041b      	lsls	r3, r3, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8000ffa:	8983      	ldrh	r3, [r0, #12]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4319      	orrs	r1, r3
 8001000:	8181      	strh	r1, [r0, #12]
 8001002:	4770      	bx	lr

08001004 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8001004:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001006:	b119      	cbz	r1, 8001010 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8001008:	b29b      	uxth	r3, r3
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	e003      	b.n	8001018 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8001010:	f023 0302 	bic.w	r3, r3, #2
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	8183      	strh	r3, [r0, #12]
 800101a:	4770      	bx	lr

0800101c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800101c:	8a03      	ldrh	r3, [r0, #16]
 800101e:	f023 0320 	bic.w	r3, r3, #32
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001028:	8a03      	ldrh	r3, [r0, #16]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4319      	orrs	r1, r3
 800102e:	8201      	strh	r1, [r0, #16]
 8001030:	4770      	bx	lr

08001032 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8001032:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001034:	b119      	cbz	r1, 800103e <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8001036:	b29b      	uxth	r3, r3
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	e003      	b.n	8001046 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 800103e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001042:	041b      	lsls	r3, r3, #16
 8001044:	0c1b      	lsrs	r3, r3, #16
 8001046:	8203      	strh	r3, [r0, #16]
 8001048:	4770      	bx	lr

0800104a <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800104a:	05c9      	lsls	r1, r1, #23
 800104c:	0dc9      	lsrs	r1, r1, #23
 800104e:	8081      	strh	r1, [r0, #4]
 8001050:	4770      	bx	lr

08001052 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001052:	8880      	ldrh	r0, [r0, #4]
 8001054:	05c0      	lsls	r0, r0, #23
}
 8001056:	0dc0      	lsrs	r0, r0, #23
 8001058:	4770      	bx	lr

0800105a <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 800105a:	8983      	ldrh	r3, [r0, #12]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	8183      	strh	r3, [r0, #12]
 8001064:	4770      	bx	lr

08001066 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8001066:	8b03      	ldrh	r3, [r0, #24]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800106c:	8b03      	ldrh	r3, [r0, #24]
 800106e:	b29b      	uxth	r3, r3
 8001070:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001074:	8301      	strh	r1, [r0, #24]
 8001076:	4770      	bx	lr

08001078 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8001078:	8b03      	ldrh	r3, [r0, #24]
 800107a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800107e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001080:	8b03      	ldrh	r3, [r0, #24]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4319      	orrs	r1, r3
 8001086:	8301      	strh	r1, [r0, #24]
 8001088:	4770      	bx	lr

0800108a <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800108a:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800108c:	b119      	cbz	r1, 8001096 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800108e:	b29b      	uxth	r3, r3
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	e003      	b.n	800109e <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8001096:	f023 0320 	bic.w	r3, r3, #32
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	8283      	strh	r3, [r0, #20]
 80010a0:	4770      	bx	lr

080010a2 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80010a2:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010a4:	b119      	cbz	r1, 80010ae <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	e003      	b.n	80010b6 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80010ae:	f023 0310 	bic.w	r3, r3, #16
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	8283      	strh	r3, [r0, #20]
 80010b8:	4770      	bx	lr

080010ba <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80010ba:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010bc:	b119      	cbz	r1, 80010c6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	e003      	b.n	80010ce <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 80010c6:	f023 0308 	bic.w	r3, r3, #8
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	0c1b      	lsrs	r3, r3, #16
 80010ce:	8283      	strh	r3, [r0, #20]
 80010d0:	4770      	bx	lr

080010d2 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 80010d2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010d4:	b121      	cbz	r1, 80010e0 <USART_OverSampling8Cmd+0xe>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 80010d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010de:	e001      	b.n	80010e4 <USART_OverSampling8Cmd+0x12>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 80010e0:	045b      	lsls	r3, r3, #17
 80010e2:	0c5b      	lsrs	r3, r3, #17
 80010e4:	8183      	strh	r3, [r0, #12]
 80010e6:	4770      	bx	lr

080010e8 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80010e8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010ea:	b119      	cbz	r1, 80010f4 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f2:	e003      	b.n	80010fc <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 80010f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	0c1b      	lsrs	r3, r3, #16
 80010fc:	8283      	strh	r3, [r0, #20]
 80010fe:	4770      	bx	lr

08001100 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8001100:	8a83      	ldrh	r3, [r0, #20]
 8001102:	f023 0304 	bic.w	r3, r3, #4
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	0c1b      	lsrs	r3, r3, #16
 800110a:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800110c:	8a83      	ldrh	r3, [r0, #20]
 800110e:	b29b      	uxth	r3, r3
 8001110:	4319      	orrs	r1, r3
 8001112:	8281      	strh	r1, [r0, #20]
 8001114:	4770      	bx	lr

08001116 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8001116:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001118:	b119      	cbz	r1, 8001122 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800111a:	b29b      	uxth	r3, r3
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	e003      	b.n	800112a <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8001122:	f023 0302 	bic.w	r3, r3, #2
 8001126:	041b      	lsls	r3, r3, #16
 8001128:	0c1b      	lsrs	r3, r3, #16
 800112a:	8283      	strh	r3, [r0, #20]
 800112c:	4770      	bx	lr

0800112e <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800112e:	8803      	ldrh	r3, [r0, #0]
 8001130:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001132:	bf0c      	ite	eq
 8001134:	2000      	moveq	r0, #0
 8001136:	2001      	movne	r0, #1
 8001138:	4770      	bx	lr

0800113a <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 800113a:	43c9      	mvns	r1, r1
 800113c:	8001      	strh	r1, [r0, #0]
 800113e:	4770      	bx	lr

08001140 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001140:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001142:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8001146:	2201      	movs	r2, #1
 8001148:	f001 031f 	and.w	r3, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800114c:	2c01      	cmp	r4, #1
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 800114e:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001152:	d101      	bne.n	8001158 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8001154:	8983      	ldrh	r3, [r0, #12]
 8001156:	e003      	b.n	8001160 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001158:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800115a:	bf0c      	ite	eq
 800115c:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800115e:	8a83      	ldrhne	r3, [r0, #20]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001164:	8802      	ldrh	r2, [r0, #0]
 8001166:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001168:	b143      	cbz	r3, 800117c <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 800116a:	2301      	movs	r3, #1
 800116c:	0a09      	lsrs	r1, r1, #8
 800116e:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001172:	4211      	tst	r1, r2
 8001174:	bf0c      	ite	eq
 8001176:	2000      	moveq	r0, #0
 8001178:	2001      	movne	r0, #1
 800117a:	bd10      	pop	{r4, pc}
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800117c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 800117e:	bd10      	pop	{r4, pc}

08001180 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001180:	0a09      	lsrs	r1, r1, #8
 8001182:	2301      	movs	r3, #1
 8001184:	fa03 f301 	lsl.w	r3, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8001188:	43db      	mvns	r3, r3
 800118a:	8003      	strh	r3, [r0, #0]
 800118c:	4770      	bx	lr
	...

08001190 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001190:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <NVIC_PriorityGroupConfig+0x10>)
 8001196:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800119a:	60d8      	str	r0, [r3, #12]
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011a4:	6843      	ldr	r3, [r0, #4]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80011a6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011a8:	b1fb      	cbz	r3, 80011ea <NVIC_Init+0x46>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <NVIC_Init+0x60>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011ac:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011ae:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011b0:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011b2:	43db      	mvns	r3, r3
 80011b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80011b8:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011bc:	fa01 f102 	lsl.w	r1, r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa22 f203 	lsr.w	r2, r2, r3

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011c6:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011c8:	4022      	ands	r2, r4
 80011ca:	430a      	orrs	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 80011d0:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011d2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80011d6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011da:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011dc:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011de:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	e007      	b.n	80011fa <NVIC_Init+0x56>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ea:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011ec:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ee:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011f8:	3120      	adds	r1, #32
 80011fa:	4a03      	ldr	r2, [pc, #12]	; (8001208 <NVIC_Init+0x64>)
 80011fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001200:	bd10      	pop	{r4, pc}
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000e100 	.word	0xe000e100

0800120c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800120c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001210:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <NVIC_SetVectorTable+0x10>)
 8001216:	4308      	orrs	r0, r1
 8001218:	6098      	str	r0, [r3, #8]
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001222:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001224:	b109      	cbz	r1, 800122a <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8001226:	4310      	orrs	r0, r2
 8001228:	e001      	b.n	800122e <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800122a:	ea22 0000 	bic.w	r0, r2, r0
 800122e:	6118      	str	r0, [r3, #16]
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800123a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	bf0c      	ite	eq
 8001240:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001244:	f022 0204 	bicne.w	r2, r2, #4
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	4770      	bx	lr
 800124c:	e000e010 	.word	0xe000e010

08001250 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <SystemInit+0x11c>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001252:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 800125c:	6859      	ldr	r1, [r3, #4]
 800125e:	4a44      	ldr	r2, [pc, #272]	; (8001370 <SystemInit+0x120>)
 8001260:	400a      	ands	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800126a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800126e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001276:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800127e:	605a      	str	r2, [r3, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8001286:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8001288:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800128c:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 800128e:	2200      	movs	r2, #0
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800129c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80012a4:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 80012a6:	9a00      	ldr	r2, [sp, #0]
 80012a8:	3201      	adds	r2, #1
 80012aa:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012ac:	9a01      	ldr	r2, [sp, #4]
 80012ae:	b91a      	cbnz	r2, 80012b8 <SystemInit+0x68>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80012b6:	d1f2      	bne.n	800129e <SystemInit+0x4e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <SystemInit+0x11c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80012c0:	bf18      	it	ne
 80012c2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012c4:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d004      	beq.n	80012d6 <SystemInit+0x86>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <SystemInit+0x124>)
 80012ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e047      	b.n	8001366 <SystemInit+0x116>
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <SystemInit+0x128>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	f042 0210 	orr.w	r2, r2, #16
 80012de:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f022 0203 	bic.w	r2, r2, #3
 80012e6:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f042 0202 	orr.w	r2, r2, #2
 80012ee:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80012f0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001302:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 8001304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <SystemInit+0x12c>)
 8001308:	400a      	ands	r2, r1
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 800130c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130e:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 8001312:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800131e:	601a      	str	r2, [r3, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <SystemInit+0x11c>)
 8001324:	0109      	lsls	r1, r1, #4
 8001326:	d5fb      	bpl.n	8001320 <SystemInit+0xd0>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 8001328:	6853      	ldr	r3, [r2, #4]
 800132a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800132e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 8001330:	6853      	ldr	r3, [r2, #4]
 8001332:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001336:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <SystemInit+0x11c>)
 8001348:	d0fa      	beq.n	8001340 <SystemInit+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	f022 0203 	bic.w	r2, r2, #3
 8001350:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	f042 0202 	orr.w	r2, r2, #2
 8001358:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	f002 020c 	and.w	r2, r2, #12
 8001360:	2a08      	cmp	r2, #8
 8001362:	d1fa      	bne.n	800135a <SystemInit+0x10a>
 8001364:	e7b2      	b.n	80012cc <SystemInit+0x7c>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
#endif 
}
 8001366:	b002      	add	sp, #8
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	f0ff0000 	.word	0xf0ff0000
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	40022000 	.word	0x40022000
 800137c:	fffef000 	.word	0xfffef000

08001380 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <SystemCoreClockUpdate+0x90>)
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001382:	b530      	push	{r4, r5, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001384:	6851      	ldr	r1, [r2, #4]
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <SystemCoreClockUpdate+0x94>)
 8001388:	f001 010c 	and.w	r1, r1, #12
  
  switch (tmp)
 800138c:	2904      	cmp	r1, #4
 800138e:	d003      	beq.n	8001398 <SystemCoreClockUpdate+0x18>
 8001390:	2908      	cmp	r1, #8
 8001392:	d004      	beq.n	800139e <SystemCoreClockUpdate+0x1e>
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <SystemCoreClockUpdate+0x98>)
 8001396:	e000      	b.n	800139a <SystemCoreClockUpdate+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <SystemCoreClockUpdate+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
      break;
 800139c:	e02b      	b.n	80013f6 <SystemCoreClockUpdate+0x76>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800139e:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80013a0:	6852      	ldr	r2, [r2, #4]
          SystemCoreClock = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 80013a2:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllmull != 0x0D)
 80013a6:	2b0d      	cmp	r3, #13
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80013a8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 #endif
      }
#else
      pllmull = pllmull >> 18;
      
      if (pllmull != 0x0D)
 80013ac:	d001      	beq.n	80013b2 <SystemCoreClockUpdate+0x32>
      {
         pllmull += 2;
 80013ae:	3302      	adds	r3, #2
 80013b0:	e000      	b.n	80013b4 <SystemCoreClockUpdate+0x34>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 80013b2:	2306      	movs	r3, #6
      }
            
      if (pllsource == 0x00)
 80013b4:	b922      	cbnz	r2, 80013c0 <SystemCoreClockUpdate+0x40>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <SystemCoreClockUpdate+0xa0>)
 80013b8:	4353      	muls	r3, r2
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <SystemCoreClockUpdate+0x94>)
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01a      	b.n	80013f6 <SystemCoreClockUpdate+0x76>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 80013c0:	4a13      	ldr	r2, [pc, #76]	; (8001410 <SystemCoreClockUpdate+0x90>)
 80013c2:	4c16      	ldr	r4, [pc, #88]	; (800141c <SystemCoreClockUpdate+0x9c>)
 80013c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80013c6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80013c8:	f000 000f 	and.w	r0, r0, #15
 80013cc:	3001      	adds	r0, #1
        
        if (prediv1source == 0)
 80013ce:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80013d2:	4910      	ldr	r1, [pc, #64]	; (8001414 <SystemCoreClockUpdate+0x94>)
 80013d4:	d100      	bne.n	80013d8 <SystemCoreClockUpdate+0x58>
 80013d6:	e00a      	b.n	80013ee <SystemCoreClockUpdate+0x6e>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 80013d8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 80013da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 80013dc:	f3c5 1503 	ubfx	r5, r5, #4, #4
 80013e0:	3501      	adds	r5, #1
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 80013e2:	f3c2 2203 	ubfx	r2, r2, #8, #4
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 80013e6:	fbb4 f4f5 	udiv	r4, r4, r5
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 80013ea:	3202      	adds	r2, #2
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 80013ec:	4354      	muls	r4, r2
 80013ee:	fbb4 f0f0 	udiv	r0, r4, r0
 80013f2:	4343      	muls	r3, r0
 80013f4:	600b      	str	r3, [r1, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemCoreClockUpdate+0x90>)
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SystemCoreClockUpdate+0xa4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001400:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SystemCoreClockUpdate+0x94>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	fa22 f201 	lsr.w	r2, r2, r1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	bd30      	pop	{r4, r5, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	20000030 	.word	0x20000030
 8001418:	007a1200 	.word	0x007a1200
 800141c:	017d7840 	.word	0x017d7840
 8001420:	003d0900 	.word	0x003d0900
 8001424:	20000020 	.word	0x20000020
 8001428:	8101b108 	.word	0x8101b108
 800142c:	8400b0b0 	.word	0x8400b0b0
 8001430:	00000000 	.word	0x00000000
 8001434:	8101b108 	.word	0x8101b108
 8001438:	840090b0 	.word	0x840090b0
 800143c:	00000000 	.word	0x00000000
 8001440:	8101b108 	.word	0x8101b108
 8001444:	8400b0b0 	.word	0x8400b0b0
 8001448:	00000000 	.word	0x00000000
 800144c:	8101b108 	.word	0x8101b108
 8001450:	8400b0b0 	.word	0x8400b0b0
 8001454:	00000000 	.word	0x00000000
 8001458:	8101b107 	.word	0x8101b107
 800145c:	8400b0b0 	.word	0x8400b0b0
 8001460:	00000000 	.word	0x00000000
 8001464:	8101b108 	.word	0x8101b108
 8001468:	8400b0b0 	.word	0x8400b0b0
 800146c:	00000000 	.word	0x00000000
